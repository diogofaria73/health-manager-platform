var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AggregateRoot.html",[0,0.014,1,2.149]],["body/classes/AggregateRoot.html",[0,0.011,1,2.445,2,0.73,3,0.246,4,0.216,5,0.216,6,4.352,7,2.14,8,1.845,9,1.704,10,0.342,11,1.069,12,3.065,13,4.424,14,2.741,15,3.803,16,3.244,17,0.991,18,3.737,19,3.065,20,4.871,21,2.445,22,2.741,23,3.187,24,1,25,0.029,26,3.394,27,1.87,28,1.158,29,1.173,30,2.55,31,1.069,32,3.712,33,2.14,34,2.14,35,3.737,36,2.55,37,1.244,38,1.069,39,1.153,40,1.173,41,2.894,42,2.55,43,1.87,44,2.14,45,1.259,46,2.55,47,2.55,48,0.717,49,3.737,50,2.14,51,2.55,52,0.246,53,1.158,54,0.73,55,3.737,56,2.55,57,2.55,58,0.016,59,0.016]],["title/modules/AppModule.html",[60,1.377,61,2.149]],["body/modules/AppModule.html",[0,0.017,3,0.375,4,0.33,5,0.33,25,0.029,48,0.811,52,0.375,58,0.022,59,0.022,60,2.315,61,4.038,62,1.919,63,1.919,64,2.299,65,2.299,66,1.919,67,2.954,68,2.299,69,3.263,70,3.263,71,3.648,72,2.954,73,2.299,74,2.299,75,3.888,76,3.27,77,3.888,78,1.63,79,2.299]],["title/controllers/CreatePatientController.html",[80,1.941,81,2.149]],["body/controllers/CreatePatientController.html",[0,0.017,3,0.386,4,0.339,5,0.339,10,0.538,17,1.35,25,0.029,29,0.839,40,1.062,48,0.65,52,0.386,58,0.022,59,0.022,78,1.679,79,2.368,80,2.368,81,3.332,82,4.274,83,1.829,84,3.361,85,4.005,86,3.361,87,3.664,88,5.893,89,4.005,90,5.093,91,4.005,92,4.005,93,4.005,94,1.438]],["title/injectables/CreatePatientUseCase.html",[95,1.769,96,1.769]],["body/injectables/CreatePatientUseCase.html",[0,0.011,3,0.249,4,0.219,5,0.219,9,0.739,10,0.347,17,1,24,0.86,25,0.029,29,0.79,37,1.256,38,1.402,39,1.164,40,0.685,45,1.275,48,0.845,52,0.249,53,1.173,54,1.079,58,0.017,59,0.017,78,1.083,83,1.872,87,2.916,94,0.928,95,2.032,96,2.032,97,1.894,98,2.634,99,2.634,100,2.2,101,1.69,102,3.74,103,2.583,104,2.419,105,2.583,106,3.166,107,2.583,108,3.207,109,2.583,110,2.767,111,2.468,112,1.173,113,1.713,114,2.168,115,2.168,116,1.391,117,1.083,118,1.894,119,1.527,120,1.713,121,1.69,122,1.69,123,1.69,124,1.894,125,0.685,126,1.728,127,1.713,128,2.23,129,2.23,130,1.894,131,1.894,132,1.527,133,1.868,134,3.166,135,2.767,136,2.168,137,3.166,138,2.168,139,2.168,140,1.894,141,2.168,142,2.168,143,2.168,144,2.767,145,2.168]],["title/interfaces/CreatePatientUseCaseRequest.html",[108,2.149,125,0.871]],["body/interfaces/CreatePatientUseCaseRequest.html",[0,0.011,3,0.257,4,0.226,5,0.226,9,0.764,10,0.358,11,1.105,24,1.019,25,0.029,38,1.511,45,2.241,48,0.857,52,0.257,53,1.212,54,1.105,58,0.017,59,0.017,78,1.119,83,1.63,87,1.746,95,2.081,96,1.438,98,1.578,99,1.578,100,1.317,101,1.746,102,2.24,104,1.907,106,2.24,108,2.971,110,1.958,111,1.746,112,1.212,113,1.755,114,2.24,115,2.24,116,1.438,117,1.119,118,1.958,119,1.578,120,1.755,121,1.746,122,1.746,123,1.746,124,1.958,125,0.708,126,2.297,127,2.399,128,3.122,129,3.122,130,1.958,131,1.958,132,1.578,133,1.903,134,3.242,135,2.833,136,2.24,137,3.242,138,2.24,139,2.24,140,1.958,141,2.24,142,2.24,143,2.24,144,2.833,145,2.24,146,1.317]],["title/modules/DatabaseModule.html",[60,1.377,147,1.769]],["body/modules/DatabaseModule.html",[0,0.015,3,0.343,4,0.302,5,0.302,25,0.029,48,0.858,52,0.343,58,0.021,59,0.021,60,2.218,62,1.757,63,1.757,64,2.104,65,2.104,66,1.757,67,3.128,68,3.128,72,2.789,73,2.104,74,2.104,76,2.329,78,1.492,79,2.104,116,1.917,147,3.31,148,2.988,149,2.988,150,2.988,151,3.486,152,3.56,153,3.56,154,2.789,155,3.56,156,2.329]],["title/interfaces/DomainEvent.html",[26,1.941,125,0.871]],["body/interfaces/DomainEvent.html",[3,0.388,4,0.341,5,0.341,9,1.152,10,0.54,11,1.462,17,1.355,24,0.777,25,0.028,26,3.02,29,0.843,31,2.353,40,1.067,48,0.653,52,0.388,58,0.022,59,0.022,125,1.067,146,1.987,157,3.343,158,3.378,159,5.904,160,5.904,161,4.025,162,5.613,163,3.378,164,1.987]],["title/classes/DomainEvents.html",[0,0.014,23,2.149]],["body/classes/DomainEvents.html",[0,0.006,1,3.599,2,0.417,3,0.141,4,0.124,5,0.124,9,0.417,10,0.324,11,0.69,12,3.414,17,0.64,19,2.35,23,1.579,24,0.978,25,0.029,26,2.35,27,1.77,28,1.096,29,1.089,31,1.901,37,1.509,38,1.297,39,1.399,40,1.304,41,3.218,48,0.501,50,2.591,52,0.141,54,0.417,58,0.011,59,0.011,126,1.391,133,1.988,157,3.476,163,1.224,164,1.771,165,1.069,166,4.103,167,3.087,168,3.087,169,3.588,170,3.588,171,2.413,172,2.413,173,2.413,174,3.087,175,2.413,176,3.087,177,3.087,178,2.413,179,1.458,180,1.458,181,1.458,182,1.458,183,2.413,184,1.458,185,2.413,186,1.458,187,4.283,188,2.413,189,1.458,190,1.458,191,1.458,192,2.413,193,2.413,194,1.458,195,1.458,196,3.011,197,4.283,198,1.458,199,2.413,200,1.458,201,1.458,202,1.458,203,1.458,204,1.458,205,2.413,206,1.458,207,1.458,208,1.458,209,1.458,210,1.458,211,1.458,212,1.458,213,1.224,214,1.458,215,1.458,216,1.458,217,1.458,218,1.458,219,1.458,220,2.413,221,3.087,222,2.413,223,1.458,224,1.458,225,1.458,226,2.413,227,2.413,228,1.458,229,1.458]],["title/classes/Entity.html",[0,0.014,9,0.94]],["body/classes/Entity.html",[0,0.012,2,0.798,3,0.269,4,0.236,5,0.236,9,1.684,10,0.374,11,1.141,12,2.752,14,3.414,15,3.941,16,4.457,17,1.058,19,2.752,21,2.61,22,2.925,24,0.98,25,0.029,29,1.126,31,2.412,37,1.328,38,1.141,39,1.231,40,0.74,43,2.925,45,1.377,48,0.453,52,0.269,53,1.267,54,1.453,58,0.018,59,0.018,94,1.002,164,2.904,230,2.342,231,3.989,232,2.79,233,2.046,234,2.79,235,2.79,236,2.79,237,2.79,238,2.79,239,2.79,240,4.655,241,2.79,242,1.377,243,2.925,244,2.79,245,2.046]],["title/interfaces/EventHandler.html",[125,0.871,246,2.409]],["body/interfaces/EventHandler.html",[3,0.427,4,0.375,5,0.375,10,0.594,17,1.437,25,0.028,29,0.927,40,1.174,41,3.547,52,0.427,58,0.024,59,0.024,125,1.174,146,2.185,246,3.976,247,4.549,248,3.715,249,6.107,250,4.426]],["title/modules/HttpModule.html",[60,1.377,71,1.941]],["body/modules/HttpModule.html",[0,0.016,3,0.349,4,0.307,5,0.307,25,0.029,48,0.866,52,0.349,58,0.021,59,0.021,60,2.238,62,1.789,63,1.789,64,2.143,65,2.143,66,1.789,67,2.822,68,2.822,71,3.703,72,2.822,73,2.143,74,2.143,76,3.124,78,1.519,79,2.143,147,3.261,251,3.042,252,3.042,253,3.579,254,3.624,255,3.624,256,3.624]],["title/classes/Left.html",[0,0.014,112,1.492]],["body/classes/Left.html",[0,0.017,2,0.793,3,0.267,4,0.235,5,0.235,10,0.372,11,1.136,17,1.052,24,0.895,25,0.029,28,2.716,29,1.061,37,0.922,38,0.793,39,0.855,40,1.052,52,0.517,54,1.596,58,0.017,59,0.017,94,0.995,112,2.608,113,2.533,132,2.993,133,1.664,242,1.959,243,2.911,245,2.911,257,1.638,258,4.498,259,4.498,260,3.401,261,4.089,262,3.969,263,2.771,264,2.771,265,2.911,266,2.325,267,3.401,268,2.032,269,2.032]],["title/classes/NotAllowedError.html",[0,0.014,270,2.409]],["body/classes/NotAllowedError.html",[0,0.017,2,1.135,3,0.382,4,0.336,5,0.336,8,2.498,25,0.028,29,0.831,48,0.643,52,0.382,58,0.022,59,0.022,94,2.001,100,1.957,120,2.532,270,3.712,271,3.311,272,3.712,273,3.712,274,4.247,275,4.678,276,2.595,277,2.992,278,3.002,279,3.328,280,2.344,281,2.344,282,2.136,283,3.966]],["title/interfaces/PaginationParams.html",[125,0.871,284,2.409]],["body/interfaces/PaginationParams.html",[3,0.431,4,0.379,5,0.379,10,0.601,11,1.562,24,0.863,25,0.028,52,0.431,58,0.024,59,0.024,125,1.187,146,2.209,284,4.003,285,3.756,286,3.756,287,6.13,288,5.888]],["title/classes/PatientAbstractRepository.html",[0,0.014,104,1.621]],["body/classes/PatientAbstractRepository.html",[0,0.013,2,0.895,3,0.302,4,0.265,5,0.265,9,0.895,10,0.42,17,1.146,24,0.834,25,0.028,29,1.038,37,1.439,38,1.237,39,1.334,40,1.313,48,0.507,52,0.302,53,2.961,58,0.019,59,0.019,83,1.123,104,2.134,111,4.023,117,2.35,118,2.294,126,2.174,127,1.421,289,4.484,290,2.294,291,3.17,292,4.484,293,3.628,294,3.628,295,3.128,296,3.128,297,3.628,298,2.626,299,3.128,300,3.128,301,3.128]],["title/classes/PatientConcreteRepository.html",[0,0.014,154,1.941]],["body/classes/PatientConcreteRepository.html",[0,0.01,2,0.696,3,0.235,4,0.206,5,0.206,9,0.696,10,0.327,17,0.957,24,0.83,25,0.029,29,0.998,37,1.433,38,1.232,39,1.328,40,1.141,48,0.772,52,0.235,53,1.105,54,1.232,58,0.016,59,0.016,83,1.546,86,3.03,87,3.787,94,0.874,104,2.125,110,2.648,111,3.487,116,1.311,117,1.996,126,1.669,127,1.64,131,1.785,132,1.439,133,1.996,135,3.157,144,1.785,151,2.565,154,2.135,156,3.328,277,2.135,290,1.785,291,2.648,292,3.997,293,3.03,294,3.03,297,3.03,298,2.043,302,4.269,303,2.434,304,3.03,305,2.434,306,2.434,307,2.434,308,2.043,309,2.434,310,2.043,311,1.592,312,2.434,313,2.434,314,2.434,315,2.434,316,2.434,317,2.434,318,2.434,319,3.611,320,2.434,321,2.434]],["title/classes/PatientDataStructureMapper.html",[0,0.014,311,2.149]],["body/classes/PatientDataStructureMapper.html",[0,0.013,2,0.842,3,0.284,4,0.25,5,0.25,9,0.842,10,0.395,17,1.099,24,0.799,25,0.029,29,0.868,37,1.379,38,1.628,39,1.279,40,1.099,48,0.778,52,0.284,54,1.186,58,0.018,59,0.018,83,1.722,117,2.385,127,2.363,128,3.076,129,3.076,133,1.234,140,2.159,164,1.453,166,3.722,304,2.471,310,2.471,311,2.711,322,4.024,323,2.471,324,4.795,325,4.144,326,2.944,327,2.944,328,4.144,329,4.144,330,5.203,331,2.944,332,4.144,333,3.039,334,2.944,335,2.944,336,2.944,337,2.944,338,2.944]],["title/classes/PatientEntity.html",[0,0.014,117,1.377]],["body/classes/PatientEntity.html",[0,0.008,2,0.535,3,0.18,4,0.159,5,0.159,8,1.457,9,1.571,10,0.251,11,0.845,12,1.745,14,2.165,15,2.165,16,3.044,17,0.783,19,1.745,21,1.931,22,2.165,24,1.005,25,0.029,28,2.366,29,1.193,31,2.013,32,3.068,33,1.57,34,1.57,37,1.598,38,1.571,39,1.482,40,1.273,41,2.716,43,1.372,44,1.57,45,2.37,48,0.479,52,0.285,54,1.293,58,0.013,59,0.013,83,1.06,117,1.74,125,0.496,126,2.292,127,1.885,128,2.454,129,2.454,133,0.784,164,2.37,166,2.392,233,1.372,242,0.923,291,2.165,339,4.026,340,1.372,341,2.477,342,2.716,343,1.871,344,1.871,345,1.871,346,1.871,347,1.871,348,1.871,349,1.871,350,1.871,351,1.871,352,1.871,353,1.871,354,1.871,355,1.871,356,1.871,357,1.871,358,1.871,359,1.871,360,1.57,361,1.57,362,2.477,363,3.484,364,1.57,365,2.477,366,1.57,367,2.477,368,1.57,369,2.477,370,1.57,371,1.57]],["title/modules/PatientModule.html",[60,1.377,253,1.941]],["body/modules/PatientModule.html",[0,0.013,3,0.299,4,0.263,5,0.263,25,0.029,48,0.938,52,0.299,53,1.41,58,0.019,59,0.019,60,2.068,62,1.532,63,1.532,64,1.835,65,1.835,66,1.532,67,2.916,68,2.542,72,2.542,73,1.835,74,1.835,76,2.813,78,1.301,79,2.542,80,1.835,81,3.227,83,1.544,96,3.115,99,1.835,100,1.532,104,2.122,116,2.316,147,3.115,154,2.916,156,2.031,253,3.574,282,1.672,308,2.605,372,2.605,373,2.605,374,3.104,375,3.104,376,3.104,377,3.104,378,3.104,379,3.104,380,3.104,381,3.104]],["title/interfaces/PatientProps.html",[125,0.871,342,2.149]],["body/interfaces/PatientProps.html",[0,0.011,3,0.257,4,0.226,5,0.226,8,1.317,9,1.299,10,0.358,11,1.105,24,0.96,25,0.03,28,2.26,31,1.903,38,1.511,45,2.607,48,0.627,52,0.372,54,1.511,58,0.017,59,0.017,83,1.387,117,1.62,125,0.708,126,2.447,127,2.399,128,3.122,129,3.122,133,1.119,146,1.317,164,2.456,166,1.746,242,1.317,339,1.958,340,1.958,341,2.24,342,2.971,360,2.24,361,2.24,362,3.242,363,4.177,364,2.24,365,3.242,366,2.24,367,3.242,368,2.24,369,3.242,370,2.24,371,2.24]],["title/injectables/PrismaService.html",[95,1.769,151,1.769]],["body/injectables/PrismaService.html",[0,0.015,3,0.453,4,0.3,5,0.3,8,2.322,10,0.476,17,1.247,25,0.029,29,1.106,40,1.247,48,0.763,52,0.342,54,1.346,58,0.021,59,0.021,78,1.486,94,1.896,95,2.533,97,2.599,120,1.61,151,2.533,277,2.095,333,2.599,382,2.974,383,5.28,384,6.016,385,6.016,386,3.544,387,3.544,388,3.544,389,3.544,390,3.544,391,3.544,392,3.544,393,3.544]],["title/classes/ResourceNotFoundError.html",[0,0.014,394,2.409]],["body/classes/ResourceNotFoundError.html",[0,0.017,2,1.135,3,0.382,4,0.336,5,0.336,8,2.498,25,0.028,29,0.831,48,0.643,52,0.382,58,0.022,59,0.022,94,2.001,100,1.957,120,2.532,271,3.311,272,3.712,273,3.712,276,2.595,277,2.992,278,3.002,279,3.328,280,2.344,281,2.344,282,2.136,394,3.712,395,4.247,396,4.678,397,3.966]],["title/classes/Right.html",[0,0.014,113,1.492]],["body/classes/Right.html",[0,0.017,2,0.793,3,0.267,4,0.235,5,0.235,10,0.372,11,1.136,17,1.052,24,0.895,25,0.029,28,2.716,29,1.061,37,0.922,38,0.793,39,0.855,40,1.052,52,0.517,54,1.596,58,0.017,59,0.017,94,0.995,112,2.533,113,2.608,132,2.993,133,1.664,242,1.959,243,2.911,245,2.911,257,1.638,258,4.498,259,4.498,260,3.401,261,3.401,265,2.911,266,2.325,267,4.089,268,2.032,269,2.032,398,3.969,399,2.771,400,2.771]],["title/classes/UniqueEntityID.html",[0,0.014,31,1.377]],["body/classes/UniqueEntityID.html",[0,0.012,2,0.833,3,0.281,4,0.247,5,0.247,9,1.622,10,0.391,11,1.176,12,2.818,17,1.09,19,2.818,21,2.69,24,0.919,25,0.029,28,2.481,29,1.144,31,2.289,37,1.369,38,1.176,39,1.269,40,1.264,45,1.437,48,0.472,52,0.281,54,1.364,58,0.018,59,0.018,94,1.046,126,2.259,164,1.437,233,2.136,260,3.015,265,3.798,401,4.757,402,2.444,403,5.178,404,5.178,405,2.912,406,2.912,407,4.112,408,2.912,409,2.912,410,2.912,411,4.112,412,2.912,413,2.912]],["title/interfaces/UseCaseError.html",[125,0.871,278,1.769]],["body/interfaces/UseCaseError.html",[3,0.422,4,0.371,5,0.371,10,0.588,11,1.541,24,0.845,25,0.027,52,0.422,58,0.024,59,0.024,124,4.462,125,1.161,126,2.261,146,2.161,271,2.864,276,2.864,278,2.9,280,2.588,281,2.588,282,2.358,414,3.211]],["title/classes/UserAlreadyExistsErrorMessage.html",[0,0.014,119,1.941]],["body/classes/UserAlreadyExistsErrorMessage.html",[0,0.016,2,1.056,3,0.356,4,0.313,5,0.313,8,2.385,24,0.712,25,0.028,29,0.773,37,1.229,38,1.056,39,1.139,48,0.599,52,0.356,58,0.021,59,0.021,94,1.325,98,2.856,119,2.856,120,2.694,121,3.161,122,3.524,123,3.524,126,2.088,127,1.677,277,2.856,278,2.901,280,2.182,281,2.182,282,1.988,414,2.707,415,4.055,416,3.098,417,4.832,418,3.691,419,4.055,420,3.691,421,3.691]],["title/coverage.html",[422,3.278]],["body/coverage.html",[0,0.026,1,1.459,5,0.189,6,1.872,7,1.872,9,0.968,23,1.459,24,0.43,25,0.029,26,1.318,31,0.935,53,1.013,58,0.015,59,0.015,66,1.101,80,1.318,81,1.459,82,1.872,83,1.467,84,1.872,95,1.821,96,1.201,98,2.415,99,1.999,100,1.669,101,2.213,104,1.101,108,1.459,112,1.536,113,1.536,117,0.935,119,1.318,120,1.013,121,1.459,122,1.459,123,1.459,125,1.367,151,1.201,154,1.318,156,1.459,157,2.213,158,1.872,165,1.636,230,1.872,242,1.101,246,1.636,247,1.872,248,1.872,257,2.695,270,1.636,271,2.673,272,2.48,273,2.48,274,1.872,275,1.872,276,2.673,278,1.201,280,1.318,281,1.318,282,1.201,284,1.636,285,1.872,286,1.872,289,1.872,290,2.48,302,1.872,311,1.459,322,1.872,323,1.872,339,2.48,340,2.48,342,1.459,382,1.872,394,1.636,395,1.872,396,1.872,401,1.872,402,1.872,414,1.636,415,1.872,416,1.872,419,1.872,422,1.636,423,2.23,424,2.23,425,6.442,426,5.358,427,3.382,428,4.085,429,2.23,430,2.23,431,5.358,432,4.085,433,2.23,434,3.382,435,1.872,436,1.872,437,2.23,438,2.23]],["title/dependencies.html",[63,1.948,439,2.307]],["body/dependencies.html",[25,0.029,58,0.022,59,0.022,63,1.938,78,1.646,120,1.783,333,2.88,440,5.548,441,3.927,442,3.927,443,3.927,444,3.927,445,3.927,446,3.927,447,3.927,448,3.927,449,3.927,450,3.927,451,3.927,452,5.029,453,5.029,454,3.927,455,3.927,456,3.927,457,3.927,458,3.927,459,3.927,460,3.927,461,3.927,462,5.029,463,3.927,464,3.927,465,3.927]],["title/miscellaneous/functions.html",[466,1.481,467,3.312]],["body/miscellaneous/functions.html",[10,0.66,25,0.025,58,0.025,59,0.025,66,3.025,435,4.126,466,2.648,467,4.126,468,4.916]],["title/index.html",[10,0.369,469,2.749,470,2.749]],["body/index.html",[4,0.271,25,0.029,58,0.019,59,0.019,116,1.725,422,2.349,471,3.204,472,3.204,473,4.394,474,3.204,475,3.204,476,3.204,477,3.204,478,3.204,479,3.204,480,2.689,481,5.015,482,3.204,483,3.204,484,3.204,485,5.015,486,5.981,487,3.204,488,3.204,489,3.204,490,5.841,491,3.204,492,3.204,493,4.394,494,3.204,495,3.204,496,3.204,497,3.204,498,4.394,499,4.394,500,3.204,501,3.204,502,3.204,503,4.394,504,4.394,505,3.204,506,3.204,507,3.204,508,3.204,509,3.204,510,2.689,511,3.204,512,3.204,513,3.204,514,3.204,515,3.204,516,3.204,517,3.204,518,3.204,519,3.204,520,3.204,521,2.689,522,3.204,523,3.204,524,3.204,525,3.204,526,3.204,527,3.204,528,2.689]],["title/modules.html",[62,2.206]],["body/modules.html",[25,0.024,58,0.024,59,0.024,61,2.979,62,2.247,71,2.691,147,2.452,253,2.691,510,5.175,529,6.166,530,6.166,531,6.166]],["title/overview.html",[532,3.751]],["body/overview.html",[2,1.005,25,0.028,58,0.021,59,0.021,60,1.473,61,3.667,62,1.734,63,1.734,64,2.077,65,2.077,66,1.734,67,2.077,68,2.077,69,2.948,70,2.948,71,3.621,72,2.764,73,2.077,74,2.077,80,2.077,96,2.831,97,2.576,146,1.734,147,3.299,148,2.948,149,2.948,150,2.948,151,3.299,213,2.948,251,2.948,252,2.948,253,3.621,372,2.948,373,2.948,532,2.948,533,3.513,534,3.513,535,3.513,536,3.513]],["title/properties.html",[11,1.129,439,2.307]],["body/properties.html",[11,1.381,25,0.029,58,0.025,59,0.025,480,4.051,521,4.051,528,4.051,537,4.827,538,4.827,539,4.827]],["title/miscellaneous/typealiases.html",[466,1.481,540,3.946]],["body/miscellaneous/typealiases.html",[10,0.566,24,1.015,25,0.025,39,1.77,58,0.023,59,0.023,83,1.889,98,2.493,99,2.493,100,2.596,101,3.442,112,1.915,113,1.915,130,3.858,157,2.759,165,3.858,196,4.415,257,2.493,436,3.539,466,2.271,541,4.216,542,4.216,543,4.216,544,3.539,545,4.216,546,4.216,547,4.216,548,4.216]],["title/miscellaneous/variables.html",[466,1.481,549,3.312]],["body/miscellaneous/variables.html",[10,0.575,25,0.029,27,3.896,28,2.742,54,1.52,58,0.023,59,0.023,112,2.413,113,2.413,242,2.622,257,2.533,261,3.142,267,3.142,268,3.142,269,3.142,466,2.307,544,4.459,549,3.595]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":538,"title":{},"body":{"properties.html":{}}}],["0.2.2",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":213,"title":{},"body":{"classes/DomainEvents.html":{},"overview.html":{}}}],["10.0.3",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["10.3.8",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["13",{"_index":535,"title":{},"body":{"overview.html":{}}}],["2",{"_index":534,"title":{},"body":{"overview.html":{}}}],["2.4.3",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["3.23.8",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":533,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":453,"title":{},"body":{"dependencies.html":{}}}],["5.15.0",{"_index":450,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":536,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["_domainevents",{"_index":13,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["_id",{"_index":14,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{}}}],["a.equals(aggregate",{"_index":211,"title":{},"body":{"classes/DomainEvents.html":{}}}],["abstract",{"_index":53,"title":{},"body":{"classes/AggregateRoot.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/Entity.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"modules/PatientModule.html":{},"coverage.html":{}}}],["accessors",{"_index":22,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{}}}],["actions/create",{"_index":377,"title":{},"body":{"modules/PatientModule.html":{}}}],["adddomainevent",{"_index":18,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["adddomainevent(domainevent",{"_index":35,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["aggregate",{"_index":187,"title":{},"body":{"classes/DomainEvents.html":{}}}],["aggregate.clearevents",{"_index":218,"title":{},"body":{"classes/DomainEvents.html":{}}}],["aggregate.domainevents.foreach((event",{"_index":208,"title":{},"body":{"classes/DomainEvents.html":{}}}],["aggregate.id.equals(id",{"_index":215,"title":{},"body":{"classes/DomainEvents.html":{}}}],["aggregatefound",{"_index":205,"title":{},"body":{"classes/DomainEvents.html":{}}}],["aggregateroot",{"_index":1,"title":{"classes/AggregateRoot.html":{}},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"coverage.html":{}}}],["aliases",{"_index":541,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":275,"title":{},"body":{"classes/NotAllowedError.html":{},"coverage.html":{}}}],["already",{"_index":122,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["amazing",{"_index":511,"title":{},"body":{"index.html":{}}}],["app",{"_index":488,"title":{},"body":{"index.html":{}}}],["applications",{"_index":479,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":61,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":87,"title":{},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientConcreteRepository.html":{}}}],["author",{"_index":521,"title":{},"body":{"index.html":{},"properties.html":{}}}],["await",{"_index":135,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientConcreteRepository.html":{}}}],["backers",{"_index":512,"title":{},"body":{"index.html":{}}}],["bcryptjs",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["boolean",{"_index":45,"title":{},"body":{"classes/AggregateRoot.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UniqueEntityID.html":{}}}],["bootstrap",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":531,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":529,"title":{},"body":{"modules.html":{}}}],["building",{"_index":474,"title":{},"body":{"index.html":{}}}],["callback",{"_index":199,"title":{},"body":{"classes/DomainEvents.html":{}}}],["case",{"_index":282,"title":{},"body":{"classes/NotAllowedError.html":{},"modules/PatientModule.html":{},"classes/ResourceNotFoundError.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["case.ts",{"_index":101,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["case.ts:22",{"_index":105,"title":{},"body":{"injectables/CreatePatientUseCase.html":{}}}],["case.ts:25",{"_index":109,"title":{},"body":{"injectables/CreatePatientUseCase.html":{}}}],["cases",{"_index":280,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/ResourceNotFoundError.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["cases/create",{"_index":99,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/PatientModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cases/error",{"_index":415,"title":{},"body":{"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["class",{"_index":0,"title":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"classes/NotAllowedError.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UserAlreadyExistsErrorMessage.html":{}},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"classes/NotAllowedError.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"classes/NotAllowedError.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"overview.html":{}}}],["clearevents",{"_index":20,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["clearhandlers",{"_index":169,"title":{},"body":{"classes/DomainEvents.html":{}}}],["clearmarkedaggregates",{"_index":170,"title":{},"body":{"classes/DomainEvents.html":{}}}],["cluster_appmodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":148,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":149,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":150,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_httpmodule",{"_index":251,"title":{},"body":{"modules/HttpModule.html":{},"overview.html":{}}}],["cluster_httpmodule_imports",{"_index":252,"title":{},"body":{"modules/HttpModule.html":{},"overview.html":{}}}],["cluster_patientmodule",{"_index":372,"title":{},"body":{"modules/PatientModule.html":{},"overview.html":{}}}],["cluster_patientmodule_imports",{"_index":374,"title":{},"body":{"modules/PatientModule.html":{}}}],["cluster_patientmodule_providers",{"_index":373,"title":{},"body":{"modules/PatientModule.html":{},"overview.html":{}}}],["concrete",{"_index":156,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/PatientConcreteRepository.html":{},"modules/PatientModule.html":{},"coverage.html":{}}}],["const",{"_index":133,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/DomainEvents.html":{},"classes/Left.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/Right.html":{}}}],["constructor",{"_index":94,"title":{},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"classes/Entity.html":{},"classes/Left.html":{},"classes/NotAllowedError.html":{},"classes/PatientConcreteRepository.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UserAlreadyExistsErrorMessage.html":{}}}],["constructor(identifier",{"_index":417,"title":{},"body":{"classes/UserAlreadyExistsErrorMessage.html":{}}}],["constructor(patientrepository",{"_index":103,"title":{},"body":{"injectables/CreatePatientUseCase.html":{}}}],["constructor(prisma",{"_index":303,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["constructor(private",{"_index":131,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientConcreteRepository.html":{}}}],["constructor(props",{"_index":231,"title":{},"body":{"classes/Entity.html":{}}}],["constructor(value",{"_index":260,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{}}}],["contracts/patient",{"_index":115,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["controller",{"_index":80,"title":{"controllers/CreatePatientController.html":{}},"body":{"controllers/CreatePatientController.html":{},"modules/PatientModule.html":{},"coverage.html":{},"overview.html":{}}}],["controller('patients",{"_index":93,"title":{},"body":{"controllers/CreatePatientController.html":{}}}],["controller.ts",{"_index":84,"title":{},"body":{"controllers/CreatePatientController.html":{},"coverage.html":{}}}],["controller.ts:8",{"_index":91,"title":{},"body":{"controllers/CreatePatientController.html":{}}}],["controllers",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"controllers/CreatePatientController.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{}}}],["controllers/patient/patient.module",{"_index":256,"title":{},"body":{"modules/HttpModule.html":{}}}],["core/either",{"_index":114,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["core/entities/entity",{"_index":360,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["core/entities/unique",{"_index":361,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["core/errors/shared",{"_index":420,"title":{},"body":{"classes/UserAlreadyExistsErrorMessage.html":{}}}],["coverage",{"_index":422,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":291,"title":{},"body":{"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientEntity.html":{}}}],["create(patient",{"_index":294,"title":{},"body":{"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{}}}],["create(props",{"_index":341,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["createpatientcontroller",{"_index":81,"title":{"controllers/CreatePatientController.html":{}},"body":{"controllers/CreatePatientController.html":{},"modules/PatientModule.html":{},"coverage.html":{}}}],["createpatientusecase",{"_index":96,"title":{"injectables/CreatePatientUseCase.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/PatientModule.html":{},"coverage.html":{},"overview.html":{}}}],["createpatientusecaserequest",{"_index":108,"title":{"interfaces/CreatePatientUseCaseRequest.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"coverage.html":{}}}],["createpatientusecaseresponse",{"_index":130,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"miscellaneous/typealiases.html":{}}}],["data",{"_index":110,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientConcreteRepository.html":{}}}],["data.email",{"_index":137,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["data.isactive",{"_index":143,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["data.name",{"_index":141,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["data.phone",{"_index":142,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["databasemodule",{"_index":147,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules.html":{},"overview.html":{}}}],["databases/prisma/database.module",{"_index":255,"title":{},"body":{"modules/HttpModule.html":{}}}],["date",{"_index":162,"title":{},"body":{"interfaces/DomainEvent.html":{}}}],["declarations",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"overview.html":{}}}],["decorators",{"_index":89,"title":{},"body":{"controllers/CreatePatientController.html":{}}}],["default",{"_index":27,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":29,"title":{},"body":{"classes/AggregateRoot.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"classes/Left.html":{},"classes/NotAllowedError.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UserAlreadyExistsErrorMessage.html":{}}}],["delete(id",{"_index":300,"title":{},"body":{"classes/PatientAbstractRepository.html":{}}}],["dependencies",{"_index":63,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":480,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":489,"title":{},"body":{"index.html":{}}}],["dispatch",{"_index":171,"title":{},"body":{"classes/DomainEvents.html":{}}}],["dispatch(event",{"_index":183,"title":{},"body":{"classes/DomainEvents.html":{}}}],["dispatchaggregateevents",{"_index":172,"title":{},"body":{"classes/DomainEvents.html":{}}}],["dispatchaggregateevents(aggregate",{"_index":185,"title":{},"body":{"classes/DomainEvents.html":{}}}],["dispatcheventsforaggregate",{"_index":173,"title":{},"body":{"classes/DomainEvents.html":{}}}],["dispatcheventsforaggregate(id",{"_index":188,"title":{},"body":{"classes/DomainEvents.html":{}}}],["documentation",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["domain",{"_index":204,"title":{},"body":{"classes/DomainEvents.html":{}}}],["domain/patient/contracts/patient",{"_index":308,"title":{},"body":{"classes/PatientConcreteRepository.html":{},"modules/PatientModule.html":{}}}],["domain/patient/entities/patient",{"_index":310,"title":{},"body":{"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{}}}],["domain/patient/use",{"_index":378,"title":{},"body":{"modules/PatientModule.html":{}}}],["domainevent",{"_index":26,"title":{"interfaces/DomainEvent.html":{}},"body":{"classes/AggregateRoot.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"coverage.html":{}}}],["domaineventcallback",{"_index":196,"title":{},"body":{"classes/DomainEvents.html":{},"miscellaneous/typealiases.html":{}}}],["domainevents",{"_index":23,"title":{"classes/DomainEvents.html":{}},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"coverage.html":{}}}],["domainevents.markaggregatefordispatch(this",{"_index":57,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["e2e",{"_index":500,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":475,"title":{},"body":{"index.html":{}}}],["email",{"_index":127,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserAlreadyExistsErrorMessage.html":{}}}],["email(value",{"_index":366,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["entities/aggregate",{"_index":202,"title":{},"body":{"classes/DomainEvents.html":{}}}],["entities/patient",{"_index":118,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientAbstractRepository.html":{}}}],["entities/unique",{"_index":163,"title":{},"body":{"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{}}}],["entity",{"_index":9,"title":{"classes/Entity.html":{}},"body":{"classes/AggregateRoot.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UniqueEntityID.html":{},"coverage.html":{}}}],["entity.id",{"_index":244,"title":{},"body":{"classes/Entity.html":{}}}],["entity.ts",{"_index":340,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"coverage.html":{}}}],["entity.ts:13",{"_index":345,"title":{},"body":{"classes/PatientEntity.html":{}}}],["entity.ts:16",{"_index":347,"title":{},"body":{"classes/PatientEntity.html":{}}}],["entity.ts:20",{"_index":349,"title":{},"body":{"classes/PatientEntity.html":{}}}],["entity.ts:23",{"_index":351,"title":{},"body":{"classes/PatientEntity.html":{}}}],["entity.ts:27",{"_index":353,"title":{},"body":{"classes/PatientEntity.html":{}}}],["entity.ts:30",{"_index":355,"title":{},"body":{"classes/PatientEntity.html":{}}}],["entity.ts:34",{"_index":357,"title":{},"body":{"classes/PatientEntity.html":{}}}],["entity.ts:37",{"_index":359,"title":{},"body":{"classes/PatientEntity.html":{}}}],["entity.ts:41",{"_index":343,"title":{},"body":{"classes/PatientEntity.html":{}}}],["entity:16",{"_index":44,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/PatientEntity.html":{}}}],["entity:4",{"_index":33,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/PatientEntity.html":{}}}],["entity:5",{"_index":34,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/PatientEntity.html":{}}}],["equals",{"_index":21,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{},"classes/UniqueEntityID.html":{}}}],["equals(entity",{"_index":43,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{}}}],["equals(id",{"_index":407,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["error",{"_index":120,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/NotAllowedError.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{},"dependencies.html":{}}}],["error.ts",{"_index":276,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/ResourceNotFoundError.html":{},"interfaces/UseCaseError.html":{},"coverage.html":{}}}],["error.ts:3",{"_index":279,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/ResourceNotFoundError.html":{}}}],["errors/not",{"_index":274,"title":{},"body":{"classes/NotAllowedError.html":{},"coverage.html":{}}}],["errors/resource",{"_index":395,"title":{},"body":{"classes/ResourceNotFoundError.html":{},"coverage.html":{}}}],["errors/use",{"_index":281,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/ResourceNotFoundError.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["event",{"_index":50,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{}}}],["event.constructor.name",{"_index":225,"title":{},"body":{"classes/DomainEvents.html":{}}}],["event.ts",{"_index":158,"title":{},"body":{"interfaces/DomainEvent.html":{},"coverage.html":{}}}],["event.ts:5",{"_index":161,"title":{},"body":{"interfaces/DomainEvent.html":{}}}],["eventclassname",{"_index":197,"title":{},"body":{"classes/DomainEvents.html":{}}}],["eventhandler",{"_index":246,"title":{"interfaces/EventHandler.html":{}},"body":{"interfaces/EventHandler.html":{},"coverage.html":{}}}],["events",{"_index":51,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["events.ts",{"_index":165,"title":{},"body":{"classes/DomainEvents.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["events.ts:11",{"_index":194,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:19",{"_index":186,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:25",{"_index":201,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:33",{"_index":191,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:39",{"_index":189,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:49",{"_index":198,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:62",{"_index":181,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:66",{"_index":182,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:70",{"_index":184,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:8",{"_index":179,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:9",{"_index":180,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events/domain",{"_index":49,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["example",{"_index":485,"title":{},"body":{"index.html":{}}}],["execute",{"_index":102,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["execute(data",{"_index":107,"title":{},"body":{"injectables/CreatePatientUseCase.html":{}}}],["exists",{"_index":123,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["export",{"_index":52,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{}}}],["exports",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"overview.html":{}}}],["express",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":8,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/NotAllowedError.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{}}}],["false",{"_index":245,"title":{},"body":{"classes/Entity.html":{},"classes/Left.html":{},"classes/Right.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["findall",{"_index":292,"title":{},"body":{"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{}}}],["findbyemail",{"_index":293,"title":{},"body":{"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{}}}],["findbyemail(email",{"_index":297,"title":{},"body":{"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{}}}],["findbyid(id",{"_index":301,"title":{},"body":{"classes/PatientAbstractRepository.html":{}}}],["findmarkedaggregatebyid",{"_index":174,"title":{},"body":{"classes/DomainEvents.html":{}}}],["findmarkedaggregatebyid(id",{"_index":190,"title":{},"body":{"classes/DomainEvents.html":{}}}],["found",{"_index":396,"title":{},"body":{"classes/ResourceNotFoundError.html":{},"coverage.html":{}}}],["framework",{"_index":473,"title":{},"body":{"index.html":{}}}],["fromdomaintopersistance",{"_index":324,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["fromdomaintopersistance(patient",{"_index":326,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["frompersistancetodomain",{"_index":325,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["frompersistancetodomain(raw",{"_index":329,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["function",{"_index":436,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":467,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["getaggregateid",{"_index":160,"title":{},"body":{"interfaces/DomainEvent.html":{}}}],["getdomainevents",{"_index":46,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["getemail",{"_index":348,"title":{},"body":{"classes/PatientEntity.html":{}}}],["getid",{"_index":237,"title":{},"body":{"classes/Entity.html":{}}}],["getisactive",{"_index":356,"title":{},"body":{"classes/PatientEntity.html":{}}}],["getname",{"_index":344,"title":{},"body":{"classes/PatientEntity.html":{}}}],["getphone",{"_index":352,"title":{},"body":{"classes/PatientEntity.html":{}}}],["getting",{"_index":469,"title":{"index.html":{}},"body":{}}],["global/global",{"_index":272,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/ResourceNotFoundError.html":{},"coverage.html":{}}}],["global/use",{"_index":414,"title":{},"body":{"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["grow",{"_index":507,"title":{},"body":{"index.html":{}}}],["handle",{"_index":88,"title":{},"body":{"controllers/CreatePatientController.html":{}}}],["handler",{"_index":228,"title":{},"body":{"classes/DomainEvents.html":{}}}],["handler(event",{"_index":229,"title":{},"body":{"classes/DomainEvents.html":{}}}],["handler.ts",{"_index":248,"title":{},"body":{"interfaces/EventHandler.html":{},"coverage.html":{}}}],["handler.ts:2",{"_index":250,"title":{},"body":{"interfaces/EventHandler.html":{}}}],["handlers",{"_index":227,"title":{},"body":{"classes/DomainEvents.html":{}}}],["handlersmap",{"_index":167,"title":{},"body":{"classes/DomainEvents.html":{}}}],["here",{"_index":518,"title":{},"body":{"index.html":{}}}],["httpmodule",{"_index":71,"title":{"modules/HttpModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HttpModule.html":{},"modules.html":{},"overview.html":{}}}],["https://nestjs.com",{"_index":525,"title":{},"body":{"index.html":{}}}],["id",{"_index":164,"title":{},"body":{"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UniqueEntityID.html":{}}}],["id.tovalue",{"_index":413,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["id.ts",{"_index":402,"title":{},"body":{"classes/UniqueEntityID.html":{},"coverage.html":{}}}],["id.ts:10",{"_index":410,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["id.ts:12",{"_index":405,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["id.ts:18",{"_index":408,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["id.ts:4",{"_index":406,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["id.ts:6",{"_index":409,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["identifier",{"_index":419,"title":{},"body":{"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["implements",{"_index":277,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/PatientConcreteRepository.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{}}}],["import",{"_index":48,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"modules/HttpModule.html":{},"classes/NotAllowedError.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/UniqueEntityID.html":{},"classes/UserAlreadyExistsErrorMessage.html":{}}}],["imports",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AggregateRoot.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"classes/Left.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"interfaces/UseCaseError.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{}}}],["infra/databases/prisma/database.module",{"_index":376,"title":{},"body":{"modules/PatientModule.html":{}}}],["infra/databases/repositories/patient/patient",{"_index":379,"title":{},"body":{"modules/PatientModule.html":{}}}],["infra/http/http.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["inherited",{"_index":32,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/PatientEntity.html":{}}}],["injectable",{"_index":95,"title":{"injectables/CreatePatientUseCase.html":{},"injectables/PrismaService.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/PrismaService.html":{},"coverage.html":{}}}],["injectables",{"_index":97,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"injectables/PrismaService.html":{},"overview.html":{}}}],["installation",{"_index":484,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":487,"title":{},"body":{"index.html":{}}}],["interface",{"_index":125,"title":{"interfaces/CreatePatientUseCaseRequest.html":{},"interfaces/DomainEvent.html":{},"interfaces/EventHandler.html":{},"interfaces/PaginationParams.html":{},"interfaces/PatientProps.html":{},"interfaces/UseCaseError.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"interfaces/DomainEvent.html":{},"interfaces/EventHandler.html":{},"interfaces/PaginationParams.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"interfaces/UseCaseError.html":{},"coverage.html":{}}}],["interfaces",{"_index":146,"title":{},"body":{"interfaces/CreatePatientUseCaseRequest.html":{},"interfaces/DomainEvent.html":{},"interfaces/EventHandler.html":{},"interfaces/PaginationParams.html":{},"interfaces/PatientProps.html":{},"interfaces/UseCaseError.html":{},"overview.html":{}}}],["isactive",{"_index":129,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["isactive(value",{"_index":370,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["iseventregistered",{"_index":226,"title":{},"body":{"classes/DomainEvents.html":{}}}],["isleft",{"_index":258,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{}}}],["isright",{"_index":259,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{}}}],["join",{"_index":514,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["kamil",{"_index":522,"title":{},"body":{"index.html":{}}}],["l",{"_index":261,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"miscellaneous/variables.html":{}}}],["left",{"_index":112,"title":{"classes/Left.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/Left.html":{},"classes/Right.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["left(new",{"_index":138,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["left(value",{"_index":268,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"overview.html":{}}}],["license",{"_index":528,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":504,"title":{},"body":{"index.html":{}}}],["log",{"_index":390,"title":{},"body":{"injectables/PrismaService.html":{}}}],["make",{"_index":547,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["mapper",{"_index":313,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["mapper.ts",{"_index":323,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"coverage.html":{}}}],["mapper.ts:17",{"_index":327,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["mapper.ts:6",{"_index":331,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["mappers/patient",{"_index":312,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["markaggregatefordispatch",{"_index":175,"title":{},"body":{"classes/DomainEvents.html":{}}}],["markaggregatefordispatch(aggregate",{"_index":193,"title":{},"body":{"classes/DomainEvents.html":{}}}],["markedaggregates",{"_index":168,"title":{},"body":{"classes/DomainEvents.html":{}}}],["matching",{"_index":59,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":124,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"interfaces/UseCaseError.html":{}}}],["message.ts",{"_index":416,"title":{},"body":{"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["message.ts:6",{"_index":418,"title":{},"body":{"classes/UserAlreadyExistsErrorMessage.html":{}}}],["messages/patient",{"_index":121,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["metadata",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":17,"title":{},"body":{"classes/AggregateRoot.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"classes/Left.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"injectables/PrismaService.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{}}}],["miscellaneous",{"_index":466,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":503,"title":{},"body":{"index.html":{}}}],["mode",{"_index":493,"title":{},"body":{"index.html":{}}}],["module",{"_index":60,"title":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"overview.html":{}}}],["modules",{"_index":62,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":517,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":523,"title":{},"body":{"index.html":{}}}],["name",{"_index":38,"title":{},"body":{"classes/AggregateRoot.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UserAlreadyExistsErrorMessage.html":{}}}],["name(value",{"_index":364,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["nest",{"_index":481,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":527,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":448,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":242,"title":{},"body":{"classes/Entity.html":{},"classes/Left.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/Right.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":472,"title":{},"body":{"index.html":{}}}],["node:crypto",{"_index":412,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["notallowederror",{"_index":270,"title":{"classes/NotAllowedError.html":{}},"body":{"classes/NotAllowedError.html":{},"coverage.html":{}}}],["null",{"_index":321,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["number",{"_index":288,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["ocurredat",{"_index":159,"title":{},"body":{"interfaces/DomainEvent.html":{}}}],["onmoduledestroy",{"_index":384,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":385,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":505,"title":{},"body":{"index.html":{}}}],["optional",{"_index":39,"title":{},"body":{"classes/AggregateRoot.html":{},"injectables/CreatePatientUseCase.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"miscellaneous/typealiases.html":{}}}],["out",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"overview.html":{}}}],["overview",{"_index":532,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":439,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":287,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["paginationparams",{"_index":284,"title":{"interfaces/PaginationParams.html":{}},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{}}}],["parameters",{"_index":37,"title":{},"body":{"classes/AggregateRoot.html":{},"injectables/CreatePatientUseCase.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UserAlreadyExistsErrorMessage.html":{}}}],["params.ts",{"_index":286,"title":{},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{}}}],["passport",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["patient",{"_index":83,"title":{},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"interfaces/PatientProps.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["patient.email",{"_index":336,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["patient.id.tostring",{"_index":334,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["patient.isactive",{"_index":338,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["patient.name",{"_index":335,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["patient.phone",{"_index":337,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["patientabstractrepository",{"_index":104,"title":{"classes/PatientAbstractRepository.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"modules/PatientModule.html":{},"coverage.html":{}}}],["patientalreadyexists",{"_index":134,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["patientconcreterepository",{"_index":154,"title":{"classes/PatientConcreteRepository.html":{}},"body":{"modules/DatabaseModule.html":{},"classes/PatientConcreteRepository.html":{},"modules/PatientModule.html":{},"coverage.html":{}}}],["patientdatastructuremapper",{"_index":311,"title":{"classes/PatientDataStructureMapper.html":{}},"body":{"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"coverage.html":{}}}],["patientdatastructuremapper.fromdomaintopersistance(patient",{"_index":314,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["patientdatastructuremapper.frompersistancetodomain(patient",{"_index":319,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["patientdatastructuremapper.frompersistancetodomain(result",{"_index":316,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["patiententity",{"_index":117,"title":{"classes/PatientEntity.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"coverage.html":{}}}],["patiententity(props",{"_index":371,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["patiententity.create",{"_index":140,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientDataStructureMapper.html":{}}}],["patientmodule",{"_index":253,"title":{"modules/PatientModule.html":{}},"body":{"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules.html":{},"overview.html":{}}}],["patientpersistence",{"_index":330,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["patientprops",{"_index":342,"title":{"interfaces/PatientProps.html":{}},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"coverage.html":{}}}],["patientrepository",{"_index":106,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["patients",{"_index":86,"title":{},"body":{"controllers/CreatePatientController.html":{},"classes/PatientConcreteRepository.html":{}}}],["patients.map((patient",{"_index":318,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["phone",{"_index":128,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["phone(value",{"_index":368,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["please",{"_index":515,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":486,"title":{},"body":{"index.html":{}}}],["post",{"_index":92,"title":{},"body":{"controllers/CreatePatientController.html":{}}}],["post('create",{"_index":90,"title":{},"body":{"controllers/CreatePatientController.html":{}}}],["prefix",{"_index":85,"title":{},"body":{"controllers/CreatePatientController.html":{}}}],["prisma",{"_index":304,"title":{},"body":{"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{}}}],["prisma.patientuncheckedcreateinput",{"_index":328,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["prisma/client",{"_index":333,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["prisma/service/prisma.service",{"_index":309,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["prismaclient",{"_index":383,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaservice",{"_index":151,"title":{"injectables/PrismaService.html":{}},"body":{"modules/DatabaseModule.html":{},"classes/PatientConcreteRepository.html":{},"injectables/PrismaService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":12,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{},"classes/UniqueEntityID.html":{}}}],["production",{"_index":495,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":471,"title":{},"body":{"index.html":{}}}],["project",{"_index":506,"title":{},"body":{"index.html":{}}}],["promise",{"_index":111,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"classes/AggregateRoot.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"interfaces/PaginationParams.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"interfaces/UseCaseError.html":{},"properties.html":{}}}],["property",{"_index":548,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["props",{"_index":16,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{}}}],["protected",{"_index":15,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{}}}],["provide",{"_index":380,"title":{},"body":{"modules/PatientModule.html":{}}}],["providers",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"overview.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{},"classes/UniqueEntityID.html":{}}}],["r",{"_index":267,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"miscellaneous/variables.html":{}}}],["randomuuid",{"_index":411,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["raw",{"_index":332,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["read",{"_index":516,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":132,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/Left.html":{},"classes/PatientConcreteRepository.html":{},"classes/Right.html":{}}}],["record",{"_index":178,"title":{},"body":{"classes/DomainEvents.html":{}}}],["reflect",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":176,"title":{},"body":{"classes/DomainEvents.html":{}}}],["register(callback",{"_index":195,"title":{},"body":{"classes/DomainEvents.html":{}}}],["removeaggregatefrommarkeddispatchlist",{"_index":177,"title":{},"body":{"classes/DomainEvents.html":{}}}],["removeaggregatefrommarkeddispatchlist(aggregate",{"_index":200,"title":{},"body":{"classes/DomainEvents.html":{}}}],["repositories/patient/patient",{"_index":155,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["repository",{"_index":116,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"classes/PatientConcreteRepository.html":{},"modules/PatientModule.html":{},"index.html":{}}}],["repository.ts",{"_index":290,"title":{},"body":{"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"coverage.html":{}}}],["repository.ts:19",{"_index":306,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["repository.ts:29",{"_index":307,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["repository.ts:4",{"_index":295,"title":{},"body":{"classes/PatientAbstractRepository.html":{}}}],["repository.ts:5",{"_index":296,"title":{},"body":{"classes/PatientAbstractRepository.html":{}}}],["repository.ts:6",{"_index":298,"title":{},"body":{"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{}}}],["repository.ts:9",{"_index":305,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["reset",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"overview.html":{}}}],["resourcenotfounderror",{"_index":394,"title":{"classes/ResourceNotFoundError.html":{}},"body":{"classes/ResourceNotFoundError.html":{},"coverage.html":{}}}],["resources",{"_index":273,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/ResourceNotFoundError.html":{},"coverage.html":{}}}],["result",{"_index":144,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientConcreteRepository.html":{}}}],["results",{"_index":58,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":54,"title":{},"body":{"classes/AggregateRoot.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":40,"title":{},"body":{"classes/AggregateRoot.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"classes/Left.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"injectables/PrismaService.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{}}}],["right",{"_index":113,"title":{"classes/Right.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/Left.html":{},"classes/Right.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["right(value",{"_index":269,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"miscellaneous/variables.html":{}}}],["root",{"_index":203,"title":{},"body":{"classes/DomainEvents.html":{}}}],["root.ts",{"_index":7,"title":{},"body":{"classes/AggregateRoot.html":{},"coverage.html":{}}}],["root.ts:12",{"_index":36,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["root.ts:17",{"_index":42,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["root.ts:6",{"_index":30,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["root.ts:8",{"_index":47,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["run",{"_index":490,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":476,"title":{},"body":{"index.html":{}}}],["server",{"_index":477,"title":{},"body":{"index.html":{}}}],["service/prisma.service",{"_index":153,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["set",{"_index":363,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["setemail(value",{"_index":350,"title":{},"body":{"classes/PatientEntity.html":{}}}],["setisactive(value",{"_index":358,"title":{},"body":{"classes/PatientEntity.html":{}}}],["setname(value",{"_index":346,"title":{},"body":{"classes/PatientEntity.html":{}}}],["setphone(value",{"_index":354,"title":{},"body":{"classes/PatientEntity.html":{}}}],["setupsubscriptions",{"_index":249,"title":{},"body":{"interfaces/EventHandler.html":{}}}],["side",{"_index":478,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"index.html":{}}}],["sponsors",{"_index":509,"title":{},"body":{"index.html":{}}}],["src/.../create",{"_index":542,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../domain",{"_index":543,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../either.ts",{"_index":544,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":468,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../optional.ts",{"_index":545,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/core/either.ts",{"_index":257,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/either.ts:13",{"_index":263,"title":{},"body":{"classes/Left.html":{}}}],["src/core/either.ts:20",{"_index":398,"title":{},"body":{"classes/Right.html":{}}}],["src/core/either.ts:26",{"_index":400,"title":{},"body":{"classes/Right.html":{}}}],["src/core/either.ts:3",{"_index":262,"title":{},"body":{"classes/Left.html":{}}}],["src/core/either.ts:30",{"_index":399,"title":{},"body":{"classes/Right.html":{}}}],["src/core/either.ts:9",{"_index":264,"title":{},"body":{"classes/Left.html":{}}}],["src/core/entities/aggregate",{"_index":6,"title":{},"body":{"classes/AggregateRoot.html":{},"coverage.html":{}}}],["src/core/entities/entity.ts",{"_index":230,"title":{},"body":{"classes/Entity.html":{},"coverage.html":{}}}],["src/core/entities/entity.ts:16",{"_index":236,"title":{},"body":{"classes/Entity.html":{}}}],["src/core/entities/entity.ts:4",{"_index":234,"title":{},"body":{"classes/Entity.html":{}}}],["src/core/entities/entity.ts:5",{"_index":235,"title":{},"body":{"classes/Entity.html":{}}}],["src/core/entities/entity.ts:7",{"_index":238,"title":{},"body":{"classes/Entity.html":{}}}],["src/core/entities/entity.ts:9",{"_index":232,"title":{},"body":{"classes/Entity.html":{}}}],["src/core/entities/unique",{"_index":401,"title":{},"body":{"classes/UniqueEntityID.html":{},"coverage.html":{}}}],["src/core/errors/shared",{"_index":271,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/ResourceNotFoundError.html":{},"interfaces/UseCaseError.html":{},"coverage.html":{}}}],["src/core/events/domain",{"_index":157,"title":{},"body":{"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/events/event",{"_index":247,"title":{},"body":{"interfaces/EventHandler.html":{},"coverage.html":{}}}],["src/core/repositories/pagination/pagination",{"_index":285,"title":{},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{}}}],["src/core/types/optional.ts",{"_index":546,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/domain/patient/contracts/patient",{"_index":289,"title":{},"body":{"classes/PatientAbstractRepository.html":{},"coverage.html":{}}}],["src/domain/patient/entities/patient",{"_index":339,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"coverage.html":{}}}],["src/domain/patient/use",{"_index":98,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/infra/databases/mappers/patient",{"_index":322,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"coverage.html":{}}}],["src/infra/databases/prisma/database.module.ts",{"_index":152,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/infra/databases/prisma/service/prisma.service.ts",{"_index":382,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/infra/databases/prisma/service/prisma.service.ts:15",{"_index":387,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infra/databases/prisma/service/prisma.service.ts:18",{"_index":388,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infra/databases/prisma/service/prisma.service.ts:8",{"_index":386,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infra/databases/repositories/patient/patient",{"_index":302,"title":{},"body":{"classes/PatientConcreteRepository.html":{},"coverage.html":{}}}],["src/infra/frameworks/nest/app.module.ts",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["src/infra/frameworks/nest/main.ts",{"_index":435,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infra/http/controllers/patient/actions/create",{"_index":82,"title":{},"body":{"controllers/CreatePatientController.html":{},"coverage.html":{}}}],["src/infra/http/controllers/patient/patient.module.ts",{"_index":375,"title":{},"body":{"modules/PatientModule.html":{}}}],["src/infra/http/http.module.ts",{"_index":254,"title":{},"body":{"modules/HttpModule.html":{}}}],["start",{"_index":491,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":494,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":496,"title":{},"body":{"index.html":{}}}],["started",{"_index":470,"title":{"index.html":{}},"body":{}}],["starter",{"_index":483,"title":{},"body":{"index.html":{}}}],["statements",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":166,"title":{},"body":{"classes/DomainEvents.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["stay",{"_index":519,"title":{},"body":{"index.html":{}}}],["string",{"_index":126,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/DomainEvents.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UniqueEntityID.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{}}}],["success",{"_index":266,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{}}}],["super",{"_index":389,"title":{},"body":{"injectables/PrismaService.html":{}}}],["super('not",{"_index":283,"title":{},"body":{"classes/NotAllowedError.html":{}}}],["super('resource",{"_index":397,"title":{},"body":{"classes/ResourceNotFoundError.html":{}}}],["super(`patient",{"_index":421,"title":{},"body":{"classes/UserAlreadyExistsErrorMessage.html":{}}}],["support",{"_index":510,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":530,"title":{},"body":{"modules.html":{}}}],["table",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":499,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":502,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":501,"title":{},"body":{"index.html":{}}}],["tests",{"_index":498,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":508,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":393,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":392,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._domainevents",{"_index":55,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["this._domainevents.push(domainevent",{"_index":56,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["this._id",{"_index":240,"title":{},"body":{"classes/Entity.html":{}}}],["this.dispatch(event",{"_index":209,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.dispatchaggregateevents(aggregate",{"_index":217,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.findmarkedaggregatebyid(aggregate.id",{"_index":206,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.findmarkedaggregatebyid(id",{"_index":216,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.handlersmap",{"_index":221,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.handlersmap[eventclassname",{"_index":222,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.handlersmap[eventclassname].push(callback",{"_index":223,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.markedaggregates",{"_index":224,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.markedaggregates.find((aggregate",{"_index":214,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.markedaggregates.findindex((a",{"_index":210,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.markedaggregates.push(aggregate",{"_index":207,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.markedaggregates.splice(index",{"_index":212,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.patientrepository.create(patient",{"_index":145,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["this.patientrepository.findbyemail",{"_index":136,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["this.prisma.patient.create",{"_index":315,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["this.prisma.patient.findmany",{"_index":317,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["this.prisma.patient.findunique",{"_index":320,"title":{},"body":{"classes/PatientConcreteRepository.html":{}}}],["this.props",{"_index":241,"title":{},"body":{"classes/Entity.html":{}}}],["this.props.email",{"_index":365,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["this.props.isactive",{"_index":369,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["this.props.name",{"_index":362,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["this.props.phone",{"_index":367,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["this.removeaggregatefrommarkeddispatchlist(aggregate",{"_index":219,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.value",{"_index":265,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{}}}],["tostring",{"_index":403,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["touch",{"_index":520,"title":{},"body":{"index.html":{}}}],["tovalue",{"_index":404,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["true",{"_index":243,"title":{},"body":{"classes/Entity.html":{},"classes/Left.html":{},"classes/Right.html":{}}}],["twitter",{"_index":526,"title":{},"body":{"index.html":{}}}],["type",{"_index":24,"title":{},"body":{"classes/AggregateRoot.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAbstractRepository.html":{},"classes/PatientConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":540,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types/passport",{"_index":451,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":482,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":192,"title":{},"body":{"classes/DomainEvents.html":{}}}],["unique",{"_index":239,"title":{},"body":{"classes/Entity.html":{}}}],["uniqueentityid",{"_index":31,"title":{"classes/UniqueEntityID.html":{}},"body":{"classes/AggregateRoot.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UniqueEntityID.html":{},"coverage.html":{}}}],["unit",{"_index":497,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":539,"title":{},"body":{"properties.html":{}}}],["update(patient",{"_index":299,"title":{},"body":{"classes/PatientAbstractRepository.html":{}}}],["use",{"_index":100,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/NotAllowedError.html":{},"modules/PatientModule.html":{},"classes/ResourceNotFoundError.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["usecaseerror",{"_index":278,"title":{"interfaces/UseCaseError.html":{}},"body":{"classes/NotAllowedError.html":{},"classes/ResourceNotFoundError.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["useclass",{"_index":381,"title":{},"body":{"modules/PatientModule.html":{}}}],["useralreadyexistserrormessage",{"_index":119,"title":{"classes/UserAlreadyExistsErrorMessage.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/UserAlreadyExistsErrorMessage.html":{},"coverage.html":{}}}],["useralreadyexistserrormessage(data.email",{"_index":139,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["validation",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["value",{"_index":28,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"classes/Left.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":549,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":537,"title":{},"body":{"properties.html":{}}}],["void",{"_index":41,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"interfaces/EventHandler.html":{},"classes/PatientEntity.html":{}}}],["warn",{"_index":391,"title":{},"body":{"injectables/PrismaService.html":{}}}],["waseventregisteredbefore",{"_index":220,"title":{},"body":{"classes/DomainEvents.html":{}}}],["watch",{"_index":492,"title":{},"body":{"index.html":{}}}],["website",{"_index":524,"title":{},"body":{"index.html":{}}}],["yes",{"_index":233,"title":{},"body":{"classes/Entity.html":{},"classes/PatientEntity.html":{},"classes/UniqueEntityID.html":{}}}],["you'd",{"_index":513,"title":{},"body":{"index.html":{}}}],["zod",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AggregateRoot.html":{"url":"classes/AggregateRoot.html","title":"class - AggregateRoot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AggregateRoot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/aggregate-root.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Entity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _domainEvents\n                            \n                            \n                                    Private\n                                _id\n                            \n                            \n                                    Protected\n                                props\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                addDomainEvent\n                            \n                            \n                                    Public\n                                clearEvents\n                            \n                            \n                                    Public\n                                equals\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    domainEvents\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _domainEvents\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DomainEvent[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/core/entities/aggregate-root.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UniqueEntityID\n\n                    \n                \n                        \n                            \n                                Inherited from         Entity\n\n                            \n                        \n                    \n                        \n                                Defined in         Entity:4\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Props\n\n                    \n                \n                        \n                            \n                                Inherited from         Entity\n\n                            \n                        \n                    \n                        \n                                Defined in         Entity:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        addDomainEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    addDomainEvent(domainEvent: DomainEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/entities/aggregate-root.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                domainEvent\n                                            \n                                                            DomainEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearEvents()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/entities/aggregate-root.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        equals\n                        \n                    \n                \n            \n            \n                \n                        \n                    equals(entity: Entity)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Entity\n\n                        \n                    \n                    \n                        \n                                Defined in         Entity:16\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            Entity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        domainEvents\n                    \n                \n\n                \n                    \n                        getdomainEvents()\n                    \n                \n                            \n                                \n                                    Defined in src/core/entities/aggregate-root.ts:8\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DomainEvent } from '../events/domain-event';\nimport { DomainEvents } from '../events/domain-events';\nimport { Entity } from './entity';\n\nexport abstract class AggregateRoot extends Entity {\n  private _domainEvents: DomainEvent[] = [];\n\n  get domainEvents(): DomainEvent[] {\n    return this._domainEvents;\n  }\n\n  protected addDomainEvent(domainEvent: DomainEvent): void {\n    this._domainEvents.push(domainEvent);\n    DomainEvents.markAggregateForDispatch(this);\n  }\n\n  public clearEvents() {\n    this._domainEvents = [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nHttpModule\n\nHttpModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nHttpModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/frameworks/nest/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            HttpModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@/infra/http/http.module';\nimport { Module } from '@nestjs/common';\n\n@Module({\n  imports: [HttpModule],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CreatePatientController.html":{"url":"controllers/CreatePatientController.html","title":"controller - CreatePatientController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CreatePatientController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/patient/actions/create-patient-controller.ts\n        \n\n            \n                Prefix\n            \n            \n                patients\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handle\n                        \n                    \n                \n            \n            \n                \n                        \n                    handle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/infra/http/controllers/patient/actions/create-patient-controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post } from '@nestjs/common';\n\n@Controller('patients')\nexport class CreatePatientController {\n  constructor() {}\n\n  @Post('create')\n  async handle() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreatePatientUseCase.html":{"url":"injectables/CreatePatientUseCase.html","title":"injectable - CreatePatientUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreatePatientUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/use-cases/create-patient-use-case.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(patientRepository: PatientAbstractRepository)\n                    \n                \n                        \n                            \n                                Defined in src/domain/patient/use-cases/create-patient-use-case.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        patientRepository\n                                                  \n                                                        \n                                                                        PatientAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(data: CreatePatientUseCaseRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/use-cases/create-patient-use-case.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreatePatientUseCaseRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Either, left, right } from '@/core/either';\nimport { PatientAbstractRepository } from '../contracts/patient-abstract-repository';\nimport { PatientEntity } from '../entities/patient-entity';\nimport { UserAlreadyExistsErrorMessage } from './error-messages/patient-already-exists-error-message';\nimport { Injectable } from '@nestjs/common';\n\ninterface CreatePatientUseCaseRequest {\n  name: string;\n  email: string;\n  phone: string;\n  isActive: boolean;\n}\n\ntype createPatientUseCaseResponse = Either;\n\n@Injectable()\nexport class CreatePatientUseCase {\n  constructor(private readonly patientRepository: PatientAbstractRepository) {}\n\n  async execute(\n    data: CreatePatientUseCaseRequest,\n  ): Promise {\n    const patientAlreadyExists = await this.patientRepository.findByEmail(\n      data.email,\n    );\n\n    if (patientAlreadyExists) {\n      return left(new UserAlreadyExistsErrorMessage(data.email));\n    }\n\n    const patient = PatientEntity.create({\n      name: data.name,\n      email: data.email,\n      phone: data.phone,\n      isActive: data.isActive,\n    });\n\n    const result = await this.patientRepository.create(patient);\n\n    return right({ patient: result });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreatePatientUseCaseRequest.html":{"url":"interfaces/CreatePatientUseCaseRequest.html","title":"interface - CreatePatientUseCaseRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreatePatientUseCaseRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/use-cases/create-patient-use-case.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Either, left, right } from '@/core/either';\nimport { PatientAbstractRepository } from '../contracts/patient-abstract-repository';\nimport { PatientEntity } from '../entities/patient-entity';\nimport { UserAlreadyExistsErrorMessage } from './error-messages/patient-already-exists-error-message';\nimport { Injectable } from '@nestjs/common';\n\ninterface CreatePatientUseCaseRequest {\n  name: string;\n  email: string;\n  phone: string;\n  isActive: boolean;\n}\n\ntype createPatientUseCaseResponse = Either;\n\n@Injectable()\nexport class CreatePatientUseCase {\n  constructor(private readonly patientRepository: PatientAbstractRepository) {}\n\n  async execute(\n    data: CreatePatientUseCaseRequest,\n  ): Promise {\n    const patientAlreadyExists = await this.patientRepository.findByEmail(\n      data.email,\n    );\n\n    if (patientAlreadyExists) {\n      return left(new UserAlreadyExistsErrorMessage(data.email));\n    }\n\n    const patient = PatientEntity.create({\n      name: data.name,\n      email: data.email,\n      phone: data.phone,\n      isActive: data.isActive,\n    });\n\n    const result = await this.patientRepository.create(patient);\n\n    return right({ patient: result });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nPrismaService  -->\n\nDatabaseModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDatabaseModule -->\n\nPrismaService->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/databases/prisma/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './service/prisma.service';\nimport { PatientConcreteRepository } from '../repositories/patient/patient-concrete-repository';\n\n@Module({\n  imports: [],\n  controllers: [],\n  providers: [PrismaService, PatientConcreteRepository],\n  exports: [PrismaService],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DomainEvent.html":{"url":"interfaces/DomainEvent.html","title":"interface - DomainEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DomainEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/events/domain-event.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ocurredAt\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getAggregateId\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAggregateId\n                        \n                    \n                \n            \n            \n                \ngetAggregateId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-event.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         UniqueEntityID\n\n                        \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ocurredAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ocurredAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UniqueEntityID } from '../entities/unique-entity-id';\n\nexport interface DomainEvent {\n  ocurredAt: Date;\n  getAggregateId(): UniqueEntityID;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DomainEvents.html":{"url":"classes/DomainEvents.html","title":"class - DomainEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DomainEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/events/domain-events.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                handlersMap\n                            \n                            \n                                    Private\n                                    Static\n                                markedAggregates\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                clearHandlers\n                            \n                            \n                                    Static\n                                clearMarkedAggregates\n                            \n                            \n                                    Private\n                                    Static\n                                dispatch\n                            \n                            \n                                    Private\n                                    Static\n                                dispatchAggregateEvents\n                            \n                            \n                                    Static\n                                dispatchEventsForAggregate\n                            \n                            \n                                    Private\n                                    Static\n                                findMarkedAggregateByID\n                            \n                            \n                                    Static\n                                markAggregateForDispatch\n                            \n                            \n                                    Static\n                                register\n                            \n                            \n                                    Private\n                                    Static\n                                removeAggregateFromMarkedDispatchList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        handlersMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/core/events/domain-events.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        markedAggregates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AggregateRoot[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/core/events/domain-events.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        clearHandlers\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearHandlers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:62\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        clearMarkedAggregates\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearMarkedAggregates()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:66\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        dispatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispatch(event: DomainEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            DomainEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        dispatchAggregateEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispatchAggregateEvents(aggregate: AggregateRoot)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                aggregate\n                                            \n                                                            AggregateRoot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        dispatchEventsForAggregate\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispatchEventsForAggregate(id: UniqueEntityID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            UniqueEntityID\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        findMarkedAggregateByID\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMarkedAggregateByID(id: UniqueEntityID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            UniqueEntityID\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AggregateRoot | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        markAggregateForDispatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAggregateForDispatch(aggregate: AggregateRoot)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                aggregate\n                                            \n                                                            AggregateRoot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(callback: DomainEventCallback, eventClassName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            DomainEventCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                eventClassName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        removeAggregateFromMarkedDispatchList\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeAggregateFromMarkedDispatchList(aggregate: AggregateRoot)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                aggregate\n                                            \n                                                            AggregateRoot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AggregateRoot } from '../entities/aggregate-root';\nimport { UniqueEntityID } from '../entities/unique-entity-id';\nimport { DomainEvent } from './domain-event';\n\ntype DomainEventCallback = (event: any) => void;\n\nexport class DomainEvents {\n  private static handlersMap: Record = {};\n  private static markedAggregates: AggregateRoot[] = [];\n\n  public static markAggregateForDispatch(aggregate: AggregateRoot) {\n    const aggregateFound = !!this.findMarkedAggregateByID(aggregate.id);\n\n    if (!aggregateFound) {\n      this.markedAggregates.push(aggregate);\n    }\n  }\n\n  private static dispatchAggregateEvents(aggregate: AggregateRoot) {\n    aggregate.domainEvents.forEach((event: DomainEvent) =>\n      this.dispatch(event),\n    );\n  }\n\n  private static removeAggregateFromMarkedDispatchList(\n    aggregate: AggregateRoot,\n  ) {\n    const index = this.markedAggregates.findIndex((a) => a.equals(aggregate));\n\n    this.markedAggregates.splice(index, 1);\n  }\n\n  private static findMarkedAggregateByID(\n    id: UniqueEntityID,\n  ): AggregateRoot | undefined {\n    return this.markedAggregates.find((aggregate) => aggregate.id.equals(id));\n  }\n\n  public static dispatchEventsForAggregate(id: UniqueEntityID) {\n    const aggregate = this.findMarkedAggregateByID(id);\n\n    if (aggregate) {\n      this.dispatchAggregateEvents(aggregate);\n      aggregate.clearEvents();\n      this.removeAggregateFromMarkedDispatchList(aggregate);\n    }\n  }\n\n  public static register(\n    callback: DomainEventCallback,\n    eventClassName: string,\n  ) {\n    const wasEventRegisteredBefore = eventClassName in this.handlersMap;\n\n    if (!wasEventRegisteredBefore) {\n      this.handlersMap[eventClassName] = [];\n    }\n\n    this.handlersMap[eventClassName].push(callback);\n  }\n\n  public static clearHandlers() {\n    this.handlersMap = {};\n  }\n\n  public static clearMarkedAggregates() {\n    this.markedAggregates = [];\n  }\n\n  private static dispatch(event: DomainEvent) {\n    const eventClassName: string = event.constructor.name;\n\n    const isEventRegistered = eventClassName in this.handlersMap;\n\n    if (isEventRegistered) {\n      const handlers = this.handlersMap[eventClassName];\n\n      for (const handler of handlers) {\n        handler(event);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Entity.html":{"url":"classes/Entity.html","title":"class - Entity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Entity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _id\n                            \n                            \n                                    Protected\n                                props\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                equals\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    id\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(props: Props, id?: UniqueEntityID)\n                    \n                \n                        \n                            \n                                Defined in src/core/entities/entity.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        props\n                                                  \n                                                        \n                                                                    Props\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        UniqueEntityID\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UniqueEntityID\n\n                    \n                \n                    \n                        \n                                Defined in src/core/entities/entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Props\n\n                    \n                \n                    \n                        \n                                Defined in src/core/entities/entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        equals\n                        \n                    \n                \n            \n            \n                \n                        \n                    equals(entity: Entity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/entities/entity.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            Entity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n\n                \n                    \n                        getid()\n                    \n                \n                            \n                                \n                                    Defined in src/core/entities/entity.ts:7\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { UniqueEntityID } from './unique-entity-id';\n\nexport abstract class Entity {\n  private _id: UniqueEntityID;\n  protected props: Props;\n\n  get id() {\n    return this._id;\n  }\n\n  protected constructor(props: Props, id?: UniqueEntityID) {\n    this.props = props;\n    this._id = id ?? new UniqueEntityID();\n  }\n\n  public equals(entity: Entity) {\n    if (entity === this) {\n      return true;\n    }\n\n    if (entity.id === this._id) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventHandler.html":{"url":"interfaces/EventHandler.html","title":"interface - EventHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/events/event-handler.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        setupSubscriptions\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setupSubscriptions\n                        \n                    \n                \n            \n            \n                \nsetupSubscriptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/event-handler.ts:2\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface EventHandler {\n  setupSubscriptions(): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HttpModule.html":{"url":"modules/HttpModule.html","title":"module - HttpModule","body":"\n                   \n\n\n\n\n    Modules\n    HttpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HttpModule\n\n\n\ncluster_HttpModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nHttpModule\n\nHttpModule\n\nHttpModule -->\n\nDatabaseModule->HttpModule\n\n\n\n\n\nPatientModule\n\nPatientModule\n\nHttpModule -->\n\nPatientModule->HttpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/http/http.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            PatientModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseModule } from '../databases/prisma/database.module';\nimport { PatientModule } from './controllers/patient/patient.module';\n\n@Module({\n  imports: [DatabaseModule, PatientModule],\n  controllers: [],\n  providers: [],\n  exports: [],\n})\nexport class HttpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Left.html":{"url":"classes/Left.html","title":"class - Left","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Left\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/either.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isLeft\n                            \n                            \n                                isRight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: L)\n                    \n                \n                        \n                            \n                                Defined in src/core/either.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    L\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L\n\n                    \n                \n                    \n                        \n                                Defined in src/core/either.ts:3\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isLeft\n                        \n                    \n                \n            \n            \n                \nisLeft()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/either.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Left\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isRight\n                        \n                    \n                \n            \n            \n                \nisRight()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/either.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Right\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Left {\n  readonly value: L;\n\n  constructor(value: L) {\n    this.value = value;\n  }\n\n  isRight(): this is Right {\n    return false;\n  }\n\n  isLeft(): this is Left {\n    return true;\n  }\n}\n\n// Success\nexport class Right {\n  readonly value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  isRight(): this is Right {\n    return true;\n  }\n\n  isLeft(): this is Left {\n    return false;\n  }\n}\n\nexport type Either = Left | Right;\n\nexport const left = (value: L): Either => {\n  return new Left(value);\n};\n\nexport const right = (value: R): Either => {\n  return new Right(value);\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotAllowedError.html":{"url":"classes/NotAllowedError.html","title":"class - NotAllowedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotAllowedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/errors/shared-global/global-resources-errors/not-allowed-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n            \n                Implements\n            \n            \n                            UseCaseError\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/errors/shared-global/global-resources-errors/not-allowed-error.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UseCaseError } from '../use-cases-errors/use-case-error';\n\nexport class NotAllowedError extends Error implements UseCaseError {\n  constructor() {\n    super('Not allowed');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationParams.html":{"url":"interfaces/PaginationParams.html","title":"interface - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/repositories/pagination/pagination-params.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            page\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationParams {\n  page: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatientAbstractRepository.html":{"url":"classes/PatientAbstractRepository.html","title":"class - PatientAbstractRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatientAbstractRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/contracts/patient-abstract-repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                create\n                            \n                            \n                                    Abstract\n                                findAll\n                            \n                            \n                                    Abstract\n                                findByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(patient: PatientEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/contracts/patient-abstract-repository.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patient\n                                            \n                                                            PatientEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/contracts/patient-abstract-repository.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/contracts/patient-abstract-repository.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PatientEntity } from '../entities/patient-entity';\n\nexport abstract class PatientAbstractRepository {\n  abstract create(patient: PatientEntity): Promise;\n  abstract findAll(): Promise;\n  abstract findByEmail(email: string): Promise;\n  // abstract update(patient: PatientEntity): Promise;\n  // abstract delete(id: string): Promise;\n  // abstract findById(id: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatientConcreteRepository.html":{"url":"classes/PatientConcreteRepository.html","title":"class - PatientConcreteRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatientConcreteRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/databases/repositories/patient/patient-concrete-repository.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            PatientAbstractRepository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/databases/repositories/patient/patient-concrete-repository.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(patient: PatientEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/patient/patient-concrete-repository.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patient\n                                            \n                                                            PatientEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/patient/patient-concrete-repository.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/patient/patient-concrete-repository.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PatientAbstractRepository } from '@/domain/patient/contracts/patient-abstract-repository';\nimport { PrismaService } from '../../prisma/service/prisma.service';\nimport { PatientEntity } from '@/domain/patient/entities/patient-entity';\nimport { PatientDataStructureMapper } from '../../mappers/patient-mapper';\n\nexport class PatientConcreteRepository implements PatientAbstractRepository {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(patient: PatientEntity): Promise {\n    const data = PatientDataStructureMapper.fromDomainToPersistance(patient);\n\n    const result = await this.prisma.patient.create({\n      data,\n    });\n\n    return PatientDataStructureMapper.fromPersistanceToDomain(result);\n  }\n\n  async findAll(): Promise {\n    const patients = await this.prisma.patient.findMany();\n\n    return patients\n      ? patients.map((patient) =>\n          PatientDataStructureMapper.fromPersistanceToDomain(patient),\n        )\n      : [];\n  }\n\n  async findByEmail(email: string): Promise {\n    const patient = await this.prisma.patient.findUnique({\n      where: {\n        email,\n      },\n    });\n\n    return patient\n      ? PatientDataStructureMapper.fromPersistanceToDomain(patient)\n      : null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatientDataStructureMapper.html":{"url":"classes/PatientDataStructureMapper.html","title":"class - PatientDataStructureMapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatientDataStructureMapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/databases/mappers/patient-mapper.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                fromDomainToPersistance\n                            \n                            \n                                    Static\n                                fromPersistanceToDomain\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromDomainToPersistance\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromDomainToPersistance(patient: PatientEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/mappers/patient-mapper.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patient\n                                            \n                                                            PatientEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Prisma.PatientUncheckedCreateInput\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromPersistanceToDomain\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromPersistanceToDomain(raw: PatientPersistence)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/mappers/patient-mapper.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                raw\n                                            \n                                                        PatientPersistence\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatientEntity\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\nimport { PatientEntity } from '@/domain/patient/entities/patient-entity';\nimport { Patient as PatientPersistence } from '@prisma/client';\n\nexport class PatientDataStructureMapper {\n  static fromPersistanceToDomain(raw: PatientPersistence): PatientEntity {\n    const { name, email, phone, isActive } = raw;\n\n    return PatientEntity.create({\n      name: name,\n      email: email,\n      phone: phone,\n      isActive: isActive,\n    });\n  }\n\n  static fromDomainToPersistance(\n    patient: PatientEntity,\n  ): Prisma.PatientUncheckedCreateInput {\n    return {\n      id: patient.id.toString(),\n      name: patient.name,\n      email: patient.email,\n      phone: patient.phone,\n      isActive: patient.isActive,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatientEntity.html":{"url":"classes/PatientEntity.html","title":"class - PatientEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatientEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/entities/patient-entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Entity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _id\n                            \n                            \n                                    Protected\n                                props\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                            \n                                    Public\n                                equals\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                                \n                                    email\n                                \n                                \n                                    phone\n                                \n                                \n                                    isActive\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UniqueEntityID\n\n                    \n                \n                        \n                            \n                                Inherited from         Entity\n\n                            \n                        \n                    \n                        \n                                Defined in         Entity:4\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Props\n\n                    \n                \n                        \n                            \n                                Inherited from         Entity\n\n                            \n                        \n                    \n                        \n                                Defined in         Entity:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(props: PatientProps, id?: UniqueEntityID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/entities/patient-entity.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            PatientProps\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            UniqueEntityID\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatientEntity\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        equals\n                        \n                    \n                \n            \n            \n                \n                        \n                    equals(entity: Entity)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Entity\n\n                        \n                    \n                    \n                        \n                                Defined in         Entity:16\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            Entity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:13\n                                \n                            \n\n                \n                    \n                        setname(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:16\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        email\n                    \n                \n\n                \n                    \n                        getemail()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:20\n                                \n                            \n\n                \n                    \n                        setemail(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:23\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        phone\n                    \n                \n\n                \n                    \n                        getphone()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:27\n                                \n                            \n\n                \n                    \n                        setphone(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:30\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        isActive\n                    \n                \n\n                \n                    \n                        getisActive()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:34\n                                \n                            \n\n                \n                    \n                        setisActive(value: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:37\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Entity } from '@/core/entities/entity';\nimport { UniqueEntityID } from '@/core/entities/unique-entity-id';\n\nexport interface PatientProps {\n  // id: UniqueEntityID;\n  name: string;\n  email: string;\n  phone: string;\n  isActive: boolean;\n}\n\nexport class PatientEntity extends Entity {\n  get name(): string {\n    return this.props.name;\n  }\n  set name(value: string) {\n    this.props.name = value;\n  }\n\n  get email(): string {\n    return this.props.email;\n  }\n  set email(value: string) {\n    this.props.email = value;\n  }\n\n  get phone(): string {\n    return this.props.phone;\n  }\n  set phone(value: string) {\n    this.props.phone = value;\n  }\n\n  get isActive(): boolean {\n    return this.props.isActive;\n  }\n  set isActive(value: boolean) {\n    this.props.isActive = value;\n  }\n\n  static create(props: PatientProps, id?: UniqueEntityID): PatientEntity {\n    const patient = new PatientEntity(props, id);\n\n    return patient;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PatientModule.html":{"url":"modules/PatientModule.html","title":"module - PatientModule","body":"\n                   \n\n\n\n\n    Modules\n    PatientModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PatientModule\n\n\n\ncluster_PatientModule_providers\n\n\n\ncluster_PatientModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nPatientModule\n\nPatientModule\n\nPatientModule -->\n\nDatabaseModule->PatientModule\n\n\n\n\n\nCreatePatientUseCase\n\nCreatePatientUseCase\n\nPatientModule -->\n\nCreatePatientUseCase->PatientModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/http/controllers/patient/patient.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreatePatientUseCase\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CreatePatientController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { DatabaseModule } from '@/infra/databases/prisma/database.module';\nimport { Module } from '@nestjs/common';\nimport { CreatePatientController } from './actions/create-patient-controller';\nimport { CreatePatientUseCase } from '@/domain/patient/use-cases/create-patient-use-case';\nimport { PatientConcreteRepository } from '@/infra/databases/repositories/patient/patient-concrete-repository';\nimport { PatientAbstractRepository } from '@/domain/patient/contracts/patient-abstract-repository';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [CreatePatientController],\n  providers: [\n    CreatePatientUseCase,\n    PatientConcreteRepository,\n    {\n      provide: PatientAbstractRepository,\n      useClass: PatientConcreteRepository,\n    },\n  ],\n  exports: [],\n})\nexport class PatientModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PatientProps.html":{"url":"interfaces/PatientProps.html","title":"interface - PatientProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PatientProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/entities/patient-entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Entity } from '@/core/entities/entity';\nimport { UniqueEntityID } from '@/core/entities/unique-entity-id';\n\nexport interface PatientProps {\n  // id: UniqueEntityID;\n  name: string;\n  email: string;\n  phone: string;\n  isActive: boolean;\n}\n\nexport class PatientEntity extends Entity {\n  get name(): string {\n    return this.props.name;\n  }\n  set name(value: string) {\n    this.props.name = value;\n  }\n\n  get email(): string {\n    return this.props.email;\n  }\n  set email(value: string) {\n    this.props.email = value;\n  }\n\n  get phone(): string {\n    return this.props.phone;\n  }\n  set phone(value: string) {\n    this.props.phone = value;\n  }\n\n  get isActive(): boolean {\n    return this.props.isActive;\n  }\n  set isActive(value: boolean) {\n    this.props.isActive = value;\n  }\n\n  static create(props: PatientProps, id?: UniqueEntityID): PatientEntity {\n    const patient = new PatientEntity(props, id);\n\n    return patient;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/databases/prisma/service/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onModuleDestroy\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infra/databases/prisma/service/prisma.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \nonModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/prisma/service/prisma.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/prisma/service/prisma.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleDestroy, OnModuleInit\n{\n  constructor() {\n    super({\n      log: ['info', 'warn', 'error'],\n    });\n  }\n\n  onModuleDestroy() {\n    return this.$disconnect();\n  }\n  onModuleInit() {\n    return this.$connect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResourceNotFoundError.html":{"url":"classes/ResourceNotFoundError.html","title":"class - ResourceNotFoundError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceNotFoundError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/errors/shared-global/global-resources-errors/resource-not-found-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n            \n                Implements\n            \n            \n                            UseCaseError\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/errors/shared-global/global-resources-errors/resource-not-found-error.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UseCaseError } from '../use-cases-errors/use-case-error';\n\nexport class ResourceNotFoundError extends Error implements UseCaseError {\n  constructor() {\n    super('Resource not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Right.html":{"url":"classes/Right.html","title":"class - Right","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Right\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/either.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isLeft\n                            \n                            \n                                isRight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: R)\n                    \n                \n                        \n                            \n                                Defined in src/core/either.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    R\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     R\n\n                    \n                \n                    \n                        \n                                Defined in src/core/either.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isLeft\n                        \n                    \n                \n            \n            \n                \nisLeft()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/either.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Left\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isRight\n                        \n                    \n                \n            \n            \n                \nisRight()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/either.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Right\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Left {\n  readonly value: L;\n\n  constructor(value: L) {\n    this.value = value;\n  }\n\n  isRight(): this is Right {\n    return false;\n  }\n\n  isLeft(): this is Left {\n    return true;\n  }\n}\n\n// Success\nexport class Right {\n  readonly value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  isRight(): this is Right {\n    return true;\n  }\n\n  isLeft(): this is Left {\n    return false;\n  }\n}\n\nexport type Either = Left | Right;\n\nexport const left = (value: L): Either => {\n  return new Left(value);\n};\n\nexport const right = (value: R): Either => {\n  return new Right(value);\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UniqueEntityID.html":{"url":"classes/UniqueEntityID.html","title":"class - UniqueEntityID","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UniqueEntityID\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/unique-entity-id.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                equals\n                            \n                            \n                                toString\n                            \n                            \n                                toValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/entities/unique-entity-id.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/entities/unique-entity-id.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        equals\n                        \n                    \n                \n            \n            \n                \n                        \n                    equals(id: UniqueEntityID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/entities/unique-entity-id.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            UniqueEntityID\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/entities/unique-entity-id.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toValue\n                        \n                    \n                \n            \n            \n                \ntoValue()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/entities/unique-entity-id.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\n\nexport class UniqueEntityID {\n  private value: string;\n\n  toString() {\n    return this.value;\n  }\n\n  toValue() {\n    return this.value;\n  }\n\n  constructor(value?: string) {\n    this.value = value ?? randomUUID();\n  }\n\n  public equals(id: UniqueEntityID) {\n    return id.toValue() === this.value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UseCaseError.html":{"url":"interfaces/UseCaseError.html","title":"interface - UseCaseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UseCaseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/errors/shared-global/use-cases-errors/use-case-error.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UseCaseError {\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserAlreadyExistsErrorMessage.html":{"url":"classes/UserAlreadyExistsErrorMessage.html","title":"class - UserAlreadyExistsErrorMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserAlreadyExistsErrorMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/use-cases/error-messages/patient-already-exists-error-message.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n            \n                Implements\n            \n            \n                            UseCaseError\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(identifier: string)\n                    \n                \n                        \n                            \n                                Defined in src/domain/patient/use-cases/error-messages/patient-already-exists-error-message.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        identifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UseCaseError } from '@/core/errors/shared-global/use-cases-errors/use-case-error';\n\nexport class UserAlreadyExistsErrorMessage\n  extends Error\n  implements UseCaseError\n{\n  constructor(identifier: string) {\n    super(`Patient with email \"${identifier}\" already exists.`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/core/either.ts\n            \n            class\n            Left\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/either.ts\n            \n            class\n            Right\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/either.ts\n            \n            variable\n            left\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/either.ts\n            \n            variable\n            right\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/entities/aggregate-root.ts\n            \n            class\n            AggregateRoot\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/entities/entity.ts\n            \n            class\n            Entity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/entities/unique-entity-id.ts\n            \n            class\n            UniqueEntityID\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/errors/shared-global/global-resources-errors/not-allowed-error.ts\n            \n            class\n            NotAllowedError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/errors/shared-global/global-resources-errors/resource-not-found-error.ts\n            \n            class\n            ResourceNotFoundError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/errors/shared-global/use-cases-errors/use-case-error.ts\n            \n            interface\n            UseCaseError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/events/domain-event.ts\n            \n            interface\n            DomainEvent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/events/domain-events.ts\n            \n            class\n            DomainEvents\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/core/events/event-handler.ts\n            \n            interface\n            EventHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/repositories/pagination/pagination-params.ts\n            \n            interface\n            PaginationParams\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/domain/patient/contracts/patient-abstract-repository.ts\n            \n            class\n            PatientAbstractRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/domain/patient/entities/patient-entity.ts\n            \n            class\n            PatientEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/domain/patient/entities/patient-entity.ts\n            \n            interface\n            PatientProps\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/domain/patient/use-cases/create-patient-use-case.ts\n            \n            injectable\n            CreatePatientUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/patient/use-cases/create-patient-use-case.ts\n            \n            interface\n            CreatePatientUseCaseRequest\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/domain/patient/use-cases/error-messages/patient-already-exists-error-message.ts\n            \n            class\n            UserAlreadyExistsErrorMessage\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/databases/mappers/patient-mapper.ts\n            \n            class\n            PatientDataStructureMapper\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infra/databases/prisma/service/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infra/databases/repositories/patient/patient-concrete-repository.ts\n            \n            class\n            PatientConcreteRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infra/frameworks/nest/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/patient/actions/create-patient-controller.ts\n            \n            controller\n            CreatePatientController\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.3.8\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.8\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.3.8\n        \n            @prisma/client : ^5.15.0\n        \n            @types/passport-jwt : ^4.0.1\n        \n            bcryptjs : ^2.4.3\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            zod : ^3.23.8\n        \n            zod-validation-error : ^3.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infra/frameworks/nest/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ pnpm installRunning the app\nExample :# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodTest\nExample :# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HttpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PatientModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_HttpModule\n\n\n\ncluster_HttpModule_imports\n\n\n\ncluster_PatientModule\n\n\n\ncluster_PatientModule_providers\n\n\n\n\nHttpModule\n\nHttpModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nHttpModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nHttpModule -->\n\nDatabaseModule->HttpModule\n\n\n\nPrismaService  -->\n\nDatabaseModule->PrismaService \n\n\n\n\n\nPatientModule\n\nPatientModule\n\nPatientModule -->\n\nDatabaseModule->PatientModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDatabaseModule -->\n\nPrismaService->DatabaseModule\n\n\n\nHttpModule -->\n\nPatientModule->HttpModule\n\n\n\n\n\nCreatePatientUseCase\n\nCreatePatientUseCase\n\nPatientModule -->\n\nCreatePatientUseCase->PatientModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            createPatientUseCaseResponse   (src/.../create-patient-use-case.ts)\n                        \n                        \n                            DomainEventCallback   (src/.../domain-events.ts)\n                        \n                        \n                            Either   (src/.../either.ts)\n                        \n                        \n                            Optional   (src/.../optional.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/domain/patient/use-cases/create-patient-use-case.ts\n    \n    \n        \n            \n                \n                    \n                    createPatientUseCaseResponse\n                \n            \n            \n                \n                            Either\n\n                \n            \n        \n    \n    src/core/events/domain-events.ts\n    \n    \n        \n            \n                \n                    \n                    DomainEventCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/core/either.ts\n    \n    \n        \n            \n                \n                    \n                    Either\n                \n            \n            \n                \n                        Left | Right\n\n                \n            \n        \n    \n    src/core/types/optional.ts\n    \n    \n        \n            \n                \n                    \n                    Optional\n                \n            \n            \n                \n                    Make some property optional on type\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            left   (src/.../either.ts)\n                        \n                        \n                            right   (src/.../either.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/either.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        left\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: L): Either => {\n  return new Left(value);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        right\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: R): Either => {\n  return new Right(value);\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
