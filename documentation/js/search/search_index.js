var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AggregateRoot.html",[0,0.11,1,2.288]],["body/classes/AggregateRoot.html",[0,0.103,1,2.978,2,1.055,3,0.118,4,0.105,5,0.105,6,6.043,7,3.283,8,2.468,9,1.298,10,0.23,11,1.815,12,2.078,13,4.788,14,3.818,15,5.022,16,3.844,17,0.624,18,4.15,19,4.383,20,5.186,21,3.553,22,3.818,23,4.771,24,0.536,25,0.013,26,4.488,27,1.502,28,1.842,29,0.666,30,3.765,31,1.691,32,4.788,33,2.965,34,2.965,35,4.15,36,3.765,37,0.705,38,0.499,39,0.624,40,0.72,41,4.099,42,3.765,43,2.728,44,2.965,45,1.691,46,3.765,47,3.765,48,0.347,49,5.269,50,3.283,51,3.765,52,0.118,53,0.891,54,0.484,55,5.269,56,3.765,57,3.765,58,0.008,59,0.008]],["title/modules/AppModule.html",[60,1.819,61,2.934]],["body/modules/AppModule.html",[0,0.128,3,0.147,4,0.131,5,0.131,25,0.013,48,0.427,52,0.147,58,0.01,59,0.01,60,3.062,61,5.74,62,2.532,63,2.663,64,2.98,65,2.98,66,2.663,67,3.878,68,2.98,69,4.109,70,4.109,71,5.174,72,5.174,73,3.878,74,2.98,75,2.98,76,4.712,77,4.135,78,3.711,79,4.712,80,4.712,81,0.819,82,4.712,83,4.109,84,4.712,85,4.712,86,4.712,87,4.109,88,4.712,89,4.712,90,2.98,91,1.81]],["title/modules/AuthModule.html",[60,1.819,71,2.73]],["body/modules/AuthModule.html",[0,0.166,3,0.191,4,0.17,5,0.17,25,0.013,48,0.349,52,0.191,58,0.011,59,0.011,60,3.234,62,3.28,71,4.855,81,1.061,92,6.105]],["title/classes/CreatePatientAbstractRepository.html",[0,0.11,93,2.415]],["body/classes/CreatePatientAbstractRepository.html",[0,0.137,2,1.41,3,0.157,4,0.14,5,0.14,9,0.844,10,0.307,17,0.758,24,0.389,25,0.013,29,0.578,37,0.673,38,0.477,39,0.596,40,0.758,48,0.287,52,0.157,53,1.934,58,0.01,59,0.01,93,3.816,94,6.132,95,1.583,96,2.261,97,3.615,98,6.452,99,4.635,100,2.549,101,3.647,102,2.073,103,3.394,104,2.463]],["title/injectables/CreatePatientConcreteRepository.html",[105,0.704,106,2.73]],["body/injectables/CreatePatientConcreteRepository.html",[0,0.096,3,0.11,4,0.098,5,0.098,9,0.59,10,0.215,17,0.595,24,0.453,25,0.013,29,0.577,37,0.784,38,0.555,39,0.694,40,0.694,48,0.386,52,0.11,53,0.833,54,0.753,58,0.008,59,0.008,81,0.612,93,2.997,95,1.61,96,1.581,97,2.839,98,5.572,99,3.64,100,2.201,102,1.968,105,0.873,106,3.388,107,1.256,108,5.892,109,3.631,110,1.782,111,5.024,112,0.703,113,2.226,114,3.127,115,2.772,116,2.839,117,2.772,118,2.55,119,5.024,120,1.341,121,3.52,122,1.131,123,3.069,124,1.13,125,2.226,126,2.373,127,2.226,128,2.772,129,2.226,130,1.518,131,1.518,132,0.779,133,1.15,134,1.671,135,3.52,136,1.352,137,1.387,138,3.52,139,3.52,140,2.257,141,3.069,142,3.069,143,3.957,144,3.069,145,2.1]],["title/controllers/CreatePatientController.html",[146,1.173,147,2.934]],["body/controllers/CreatePatientController.html",[0,0.101,3,0.116,4,0.103,5,0.103,10,0.226,17,0.616,24,0.402,25,0.013,27,1.474,29,0.334,37,0.494,38,0.619,39,0.438,40,0.438,48,0.408,52,0.116,54,0.774,58,0.008,59,0.008,81,0.642,91,1.42,95,1.288,110,1.425,122,1.162,131,1.594,132,0.818,133,1.176,134,1.229,136,1.42,137,0.875,140,1.66,146,1.071,147,3.769,148,3.769,149,1.594,150,1.808,151,2.545,152,2.492,153,4.641,154,1.808,155,4.535,156,3.695,157,4.404,158,1.808,159,3.59,160,2.939,161,1.893,162,0.875,163,1.729,164,3.102,165,1.474,166,2.337,167,1.893,168,1.893,169,1.076,170,1.001,171,1.731,172,2.911,173,2.492,174,1.985,175,1.985,176,2.337,177,1.893,178,1.731,179,1.985,180,1.808,181,1.985,182,1.985,183,1.808,184,1.893,185,3.769,186,2.337,187,2.703,188,2.073,189,2.911,190,1.893,191,3.222,192,1.985,193,3.222,194,2.492,195,3.695,196,1.808,197,1.808,198,1.808,199,1.808,200,1.613,201,2.911,202,1.808,203,3.695,204,3.222]],["title/injectables/CreatePatientUseCase.html",[105,0.704,159,2.415]],["body/injectables/CreatePatientUseCase.html",[0,0.098,3,0.112,4,0.1,5,0.1,9,0.601,10,0.219,12,1.525,17,0.603,24,0.458,25,0.013,29,0.459,37,0.681,38,0.61,39,0.603,40,0.424,45,1.609,48,0.404,52,0.112,53,1.205,54,0.654,58,0.008,59,0.008,81,0.622,93,4.216,95,1.556,100,1.234,102,1.425,104,1.753,105,0.884,107,1.279,110,1.401,112,1.017,120,1.355,122,1.142,124,1.634,132,1.126,133,1.16,134,1.967,136,1.954,137,1.205,159,3.035,161,3.03,162,1.401,164,2.137,166,2.266,167,1.835,168,1.835,169,1.052,170,0.97,187,2.285,188,1.753,205,2.772,206,1.429,207,2.552,208,3.582,209,3.266,210,3.582,211,3.124,212,4.667,213,3.582,214,1.234,215,1.753,216,1.545,217,2.596,218,1.545,219,0.938,220,2.266,221,4.436,222,3.124,223,1.545,224,3.124,225,3.124,226,2.596,227,2.596,228,3.124,229,3.124,230,3.124]],["title/interfaces/CreatePatientUseCaseRequest.html",[212,2.934,219,1.06]],["body/interfaces/CreatePatientUseCaseRequest.html",[0,0.101,3,0.116,4,0.103,5,0.103,9,0.623,10,0.227,11,1.798,12,1.565,24,0.533,25,0.013,38,0.654,45,2.711,48,0.408,52,0.116,53,1.236,54,0.671,58,0.008,59,0.008,81,0.646,93,3.6,95,1.476,100,1.28,102,1.041,104,1.818,105,0.907,110,0.88,112,0.742,120,1.745,122,1.381,124,1.676,132,1.155,133,1.179,134,1.736,136,2.005,137,1.236,159,2.216,161,1.903,162,0.88,164,2.216,166,2.349,167,1.903,168,1.903,169,1.08,170,1.006,187,3.098,188,2.376,205,1.74,206,1.482,207,1.602,209,2.711,212,4.373,214,1.28,215,1.798,216,1.602,217,2.692,218,1.602,219,0.973,220,2.349,221,4.552,222,3.239,223,1.602,224,3.239,225,3.239,226,2.692,227,2.692,228,3.239,229,3.239,230,3.239,231,1.74]],["title/classes/CreateUserAbstractRepository.html",[0,0.11,232,2.415]],["body/classes/CreateUserAbstractRepository.html",[0,0.145,2,1.495,3,0.167,4,0.148,5,0.148,9,0.895,10,0.326,17,0.786,24,0.413,25,0.013,29,0.482,37,0.714,38,0.506,39,0.632,40,0.632,48,0.305,52,0.167,53,1.877,58,0.01,59,0.01,95,1.142,96,2.398,97,3.752,99,4.811,101,3.869,102,1.86,232,3.96,233,5.789,234,1.924,235,2.798,236,3.017]],["title/injectables/CreateUserConcreteRepository.html",[105,0.704,237,2.73]],["body/injectables/CreateUserConcreteRepository.html",[0,0.118,3,0.136,4,0.12,5,0.12,9,0.727,10,0.264,17,0.687,24,0.449,25,0.013,29,0.524,37,0.776,38,0.55,39,0.687,40,0.513,48,0.416,52,0.136,53,1.026,54,0.557,58,0.009,59,0.009,81,0.753,95,0.927,96,1.947,97,3.279,99,4.204,102,1.625,105,1.008,107,1.547,109,3.514,110,1.549,112,0.866,113,2.741,114,3.419,115,3.414,116,3.279,117,3.414,124,1.392,125,2.741,129,2.741,130,1.869,131,1.869,132,0.959,133,1.045,134,1.929,136,1.665,137,1.026,232,3.461,234,2.024,235,2.586,237,3.913,238,5.704,239,3.779,240,2.741,241,2.741,242,3.414,243,4.334,244,4.334,245,4.334]],["title/controllers/CreateUserController.html",[146,1.173,246,2.934]],["body/controllers/CreateUserController.html",[0,0.103,3,0.118,4,0.105,5,0.105,10,0.23,17,0.624,24,0.407,25,0.013,27,1.502,29,0.34,37,0.504,38,0.624,39,0.446,40,0.446,48,0.396,52,0.118,54,0.782,58,0.008,59,0.008,81,0.654,91,1.446,110,1.439,122,1.174,131,1.624,132,0.833,133,1.185,136,1.446,137,0.891,146,1.091,149,1.624,150,1.842,151,2.579,152,2.539,154,1.842,155,4.594,157,4.44,158,1.842,161,1.928,162,0.891,163,1.752,165,1.502,167,1.928,168,1.928,169,1.09,170,1.02,171,1.764,172,2.965,173,2.539,174,2.023,178,1.764,179,2.023,180,1.842,181,2.023,182,2.023,183,1.842,184,1.928,185,3.818,186,2.381,190,1.928,192,2.023,194,2.539,196,1.842,197,1.842,198,1.842,199,1.842,200,1.635,201,2.965,202,1.842,234,1.761,246,3.818,247,3.818,248,1.842,249,5.022,250,2.728,251,3.626,252,3.332,253,3.332,254,1.691,255,3.266,256,3.113,257,3.283,258,3.283,259,3.765,260,3.765,261,3.765,262,2.728]],["title/injectables/CreateUserUseCase.html",[105,0.704,251,2.415]],["body/injectables/CreateUserUseCase.html",[0,0.098,3,0.112,4,0.1,5,0.1,9,0.601,10,0.219,12,1.525,17,0.603,24,0.458,25,0.013,29,0.459,37,0.681,38,0.61,39,0.603,40,0.424,48,0.404,52,0.112,53,1.205,54,0.654,58,0.008,59,0.008,81,0.622,90,2.266,102,1.425,105,0.884,107,1.279,110,1.401,112,1.017,120,1.475,122,1.142,124,1.634,132,1.126,133,1.16,134,1.967,136,1.954,137,1.205,161,3.03,162,1.401,167,1.835,168,1.835,169,1.052,170,0.97,188,1.234,206,1.429,207,2.552,211,3.124,214,1.234,215,1.753,216,1.545,217,2.596,218,1.545,219,0.938,223,1.545,226,2.596,227,2.596,232,4.216,234,2.106,235,1.326,236,2.025,251,3.035,253,2.266,254,1.609,255,2.734,256,2.606,263,3.03,264,3.582,265,3.558,266,3.582,267,4.667,268,3.582,269,2.821,270,4.436,271,2.821,272,3.124,273,3.124,274,3.124,275,3.124,276,3.124]],["title/interfaces/CreateUserUseCaseRequest.html",[219,1.06,267,2.934]],["body/interfaces/CreateUserUseCaseRequest.html",[0,0.101,3,0.116,4,0.103,5,0.103,9,0.623,10,0.227,11,1.798,12,1.565,24,0.533,25,0.013,38,0.654,48,0.408,52,0.116,53,1.236,54,0.671,58,0.008,59,0.008,81,0.646,90,2.349,102,1.041,105,0.907,110,0.88,112,0.742,120,1.804,122,1.381,124,1.676,132,1.155,133,1.179,134,1.736,136,2.005,137,1.236,161,1.903,162,0.88,167,1.903,168,1.903,169,1.08,170,1.006,188,1.28,206,1.482,207,1.602,214,1.28,215,1.798,216,1.602,217,2.692,218,1.602,219,0.973,223,1.602,226,2.692,227,2.692,231,1.74,232,3.6,234,1.998,235,1.375,236,2.1,251,2.216,253,2.349,254,1.669,255,3.705,256,3.532,263,1.903,265,2.954,267,4.373,269,2.926,270,4.552,271,2.926,272,3.239,273,3.239,274,3.239,275,3.239,276,3.239]],["title/modules/DatabaseModule.html",[60,1.819,277,2.415]],["body/modules/DatabaseModule.html",[0,0.139,3,0.159,4,0.141,5,0.141,25,0.013,48,0.368,52,0.159,58,0.01,59,0.01,60,3.175,62,2.733,63,2.875,64,3.217,65,3.217,66,2.875,67,4.47,68,4.47,73,4.073,74,3.217,75,3.217,77,3.431,81,0.884,91,1.954,114,4.05,277,4.744,278,4.436,279,4.436,280,4.436,281,5.088,282,5.088]],["title/controllers/DeletePatientController.html",[146,1.173,283,2.934]],["body/controllers/DeletePatientController.html",[0,0.103,3,0.118,4,0.105,5,0.105,10,0.231,17,0.626,24,0.409,25,0.013,27,1.51,29,0.342,37,0.506,38,0.359,39,0.448,40,0.448,48,0.411,52,0.118,54,0.784,58,0.008,59,0.008,81,0.658,91,1.454,95,1.486,110,1.443,131,1.632,132,0.838,133,1.25,134,1.259,136,1.454,137,0.896,146,1.097,149,1.632,150,1.852,151,2.588,154,1.852,158,1.852,160,2.989,162,0.896,163,1.759,165,1.51,169,1.094,170,1.025,171,1.773,174,2.034,175,2.034,176,2.394,177,1.939,178,1.773,179,2.034,180,1.852,181,2.034,182,2.034,183,1.852,184,1.939,190,1.939,192,2.034,196,1.852,197,1.852,198,1.852,199,1.852,200,1.641,202,1.852,283,3.832,284,3.832,285,1.231,286,2.743,287,4.683,288,4.612,289,2.981,290,4.417,291,2.281,292,1.7,293,1.215,294,1.7,295,2.139,296,2.743,297,3.855,298,2.139,299,2.394,300,2.743,301,3.3,302,2.743,303,3.785,304,2.139,305,2.743,306,3.785,307,3.3]],["title/injectables/DeletePatientUseCase.html",[105,0.704,297,2.561]],["body/injectables/DeletePatientUseCase.html",[0,0.107,3,0.123,4,0.109,5,0.109,9,0.658,10,0.239,12,1.625,17,0.642,24,0.48,25,0.013,29,0.49,37,0.725,38,0.514,39,0.642,40,0.465,48,0.415,52,0.123,53,1.284,54,0.697,58,0.008,59,0.008,81,0.682,95,1.505,100,1.351,102,1.519,104,1.92,105,0.942,107,1.4,110,1.471,112,1.083,120,1.422,124,1.741,132,1.2,133,0.976,137,1.284,162,1.471,169,1.121,170,1.062,205,2.911,206,1.565,207,2.338,209,3.011,214,1.351,215,1.868,216,1.692,218,1.692,223,1.692,285,0.731,291,2.338,292,1.762,293,1.26,294,1.762,297,3.429,298,3.511,308,3.42,309,4.894,310,3.788,311,3.42,312,4.27,313,3.929,314,3.42,315,2.842,316,3.42,317,4.27,318,3.089,319,3.929,320,3.923]],["title/controllers/DeleteUserController.html",[146,1.173,321,2.934]],["body/controllers/DeleteUserController.html",[0,0.103,3,0.118,4,0.105,5,0.105,10,0.23,17,0.624,24,0.407,25,0.013,27,1.502,29,0.34,37,0.504,38,0.357,39,0.446,40,0.446,48,0.41,52,0.118,54,0.782,58,0.008,59,0.008,81,0.654,91,1.446,110,1.439,131,1.624,132,0.833,133,1.248,134,1.252,136,1.446,137,0.891,146,1.091,149,1.624,150,1.842,151,2.579,154,1.842,158,1.842,162,0.891,163,1.752,165,1.502,169,1.09,170,1.02,171,1.764,174,2.023,177,1.928,178,1.764,179,2.023,180,1.842,181,2.023,182,2.023,183,1.842,184,1.928,190,1.928,192,2.023,196,1.842,197,1.842,198,1.842,199,1.842,200,1.635,202,1.842,234,2.008,252,3.332,254,1.691,262,2.728,285,1.228,286,2.728,288,4.594,289,2.965,290,4.405,293,1.209,294,1.691,295,2.128,296,2.728,298,2.128,299,2.381,302,2.728,304,2.128,321,3.818,322,3.818,323,5.022,324,3.844,325,2.699,326,2.246,327,2.728,328,2.965,329,2.965,330,3.765,331,3.765,332,3.765,333,2.965]],["title/injectables/DeleteUserUseCase.html",[105,0.704,324,2.561]],["body/injectables/DeleteUserUseCase.html",[0,0.107,3,0.122,4,0.109,5,0.109,9,0.656,10,0.239,12,1.622,17,0.641,24,0.48,25,0.013,29,0.489,37,0.724,38,0.513,39,0.641,40,0.463,48,0.415,52,0.122,53,1.281,54,0.696,58,0.008,59,0.008,81,0.68,102,1.516,105,0.94,107,1.396,110,1.469,112,1.081,120,1.42,124,1.738,132,1.198,133,0.974,137,1.281,162,1.469,169,1.119,170,1.059,206,1.56,207,2.334,214,1.347,215,1.864,216,1.687,218,1.687,223,1.687,234,2.106,235,1.448,236,2.211,254,1.757,263,3.178,265,3.557,285,0.729,293,1.256,294,1.757,298,3.506,311,3.411,313,3.921,314,3.411,315,2.834,319,3.921,324,3.422,325,2.772,334,3.081,335,4.713,336,3.411,337,5.411,338,3.411,339,3.912]],["title/interfaces/DomainEvent.html",[26,2.415,219,1.06]],["body/interfaces/DomainEvent.html",[3,0.17,4,0.151,5,0.151,9,0.912,10,0.332,11,2.314,17,0.796,24,0.421,25,0.013,26,4.008,29,0.491,31,3.274,40,0.645,48,0.311,52,0.17,58,0.01,59,0.01,219,1.425,231,2.55,285,1.015,340,4.868,341,4.746,342,7.611,343,7.611,344,5.443,345,4.609,346,4.746]],["title/classes/DomainEvents.html",[0,0.11,23,2.934]],["body/classes/DomainEvents.html",[0,0.063,1,4.133,2,0.647,3,0.072,4,0.064,5,0.064,9,0.387,10,0.223,11,1.26,12,2.277,17,0.433,19,3.558,23,2.65,24,0.53,25,0.013,26,3.356,27,1.459,28,1.79,29,0.632,31,2.816,37,0.839,38,0.594,39,0.743,40,0.793,41,4.513,48,0.259,50,3.958,52,0.072,54,0.297,58,0.006,59,0.006,120,1.182,133,1.17,285,0.963,340,5.156,346,2.014,347,1.819,348,4.346,349,4.54,350,4.54,351,5.163,352,5.163,353,3.657,354,3.657,355,3.657,356,4.54,357,3.657,358,4.54,359,4.54,360,3.657,361,2.31,362,2.31,363,2.31,364,2.31,365,3.657,366,2.31,367,3.657,368,2.31,369,4.713,370,3.657,371,2.31,372,2.31,373,2.31,374,3.657,375,3.657,376,2.31,377,2.31,378,4.502,379,5.984,380,2.31,381,3.657,382,2.31,383,2.31,384,2.31,385,1.557,386,2.31,387,3.657,388,2.31,389,2.31,390,2.31,391,2.31,392,2.31,393,2.31,394,2.31,395,2.31,396,2.31,397,2.31,398,2.31,399,2.31,400,2.31,401,2.31,402,3.657,403,4.54,404,3.657,405,2.31,406,2.31,407,2.31,408,3.657,409,3.657,410,2.31,411,2.31]],["title/classes/Entity.html",[0,0.11,9,0.679]],["body/classes/Entity.html",[0,0.111,2,1.137,3,0.127,4,0.113,5,0.113,9,1.285,10,0.248,11,1.912,12,1.896,14,4.583,15,5.159,16,4.972,17,0.657,19,4,21,3.742,22,4.022,24,0.526,25,0.013,29,0.643,31,3.381,37,0.743,38,0.526,39,0.657,40,0.481,43,4.022,45,1.823,48,0.232,52,0.127,53,0.961,54,0.874,58,0.009,59,0.009,90,3.51,112,0.811,200,1.259,285,1.429,412,3.539,413,5.55,414,4.059,415,2.941,416,4.059,417,4.059,418,4.059,419,4.059,420,4.059,421,4.059,422,6.325,423,4.059,424,4.059,425,3.196]],["title/interfaces/EventHandler.html",[219,1.06,426,3.189]],["body/interfaces/EventHandler.html",[3,0.183,4,0.163,5,0.163,10,0.357,17,0.832,25,0.012,29,0.528,40,0.693,41,4.734,52,0.183,58,0.011,59,0.011,219,1.532,231,2.741,426,5.529,427,6.122,428,5.101,429,7.801,430,5.851]],["title/modules/HttpModule.html",[60,1.819,72,2.73]],["body/modules/HttpModule.html",[0,0.131,3,0.15,4,0.133,5,0.133,25,0.013,48,0.415,52,0.15,58,0.01,59,0.01,60,3.087,62,2.575,63,2.709,64,3.031,65,3.031,66,2.709,67,3.921,68,3.921,72,5.463,73,3.921,74,3.031,75,3.031,77,4.18,81,0.833,91,1.841,277,4.598,431,4.179,432,4.179,433,5.197,434,5.197,435,4.793,436,4.793,437,4.793,438,4.793]],["title/classes/Left.html",[0,0.11,214,1.395]],["body/classes/Left.html",[0,0.151,2,1.13,3,0.126,4,0.112,5,0.112,10,0.246,11,1.904,17,0.655,24,0.488,25,0.013,28,3.799,29,0.613,37,0.54,38,0.382,39,0.478,40,0.655,52,0.222,54,0.944,58,0.009,59,0.009,90,3.496,112,0.806,132,1.501,133,0.995,200,1.715,214,2.588,215,2.528,425,4.354,439,2.721,440,6.196,441,6.196,442,4.967,443,5.78,444,5.528,445,4.035,446,4.035,447,4.354,448,3.519,449,4.967,450,3.178,451,3.178]],["title/controllers/ListAllPatientsController.html",[146,1.173,452,2.934]],["body/controllers/ListAllPatientsController.html",[0,0.117,3,0.134,4,0.119,5,0.119,10,0.262,12,1.287,17,0.683,25,0.013,27,1.713,29,0.388,40,0.509,48,0.397,52,0.134,54,0.837,58,0.009,59,0.009,81,0.746,91,1.65,95,1.393,110,1.542,112,0.858,132,0.95,133,1.172,134,1.428,136,1.65,137,1.017,140,2.59,146,1.244,149,1.852,150,2.102,151,3.406,154,2.102,158,2.102,160,3.259,162,1.017,163,1.918,165,1.713,169,1.193,170,1.163,171,2.012,175,2.307,176,2.716,177,2.199,196,2.102,197,2.102,198,2.102,199,2.102,200,1.789,202,2.102,291,2.487,292,1.929,293,1.379,295,2.427,300,3.112,304,2.427,305,3.112,452,4.179,453,3.647,454,4.179,455,4.294,456,4.118,457,1.713,458,4.294,459,4.294,460,4.294]],["title/injectables/ListAllPatientsUseCase.html",[105,0.704,456,2.561]],["body/injectables/ListAllPatientsUseCase.html",[0,0.117,3,0.134,4,0.119,5,0.119,9,0.718,10,0.261,12,1.283,17,0.682,24,0.445,25,0.013,29,0.52,37,0.573,38,0.406,39,0.507,40,0.507,48,0.414,52,0.134,53,1.014,54,0.74,58,0.009,59,0.009,81,0.744,95,1.231,100,1.475,102,1.612,104,2.095,105,1,107,1.528,110,1.539,112,1.15,124,1.375,132,0.948,133,0.771,137,1.014,140,2.92,162,1.539,169,1.19,170,1.159,205,3.045,206,1.708,207,2.998,209,3.122,214,1.475,215,1.982,216,1.846,218,1.846,220,2.707,223,1.846,291,2.482,292,1.923,293,1.375,456,3.639,457,2.593,461,3.372,462,2.707,463,4.533,464,3.102,465,6.501,466,4.281]],["title/controllers/ListAllUsersController.html",[146,1.173,467,2.934]],["body/controllers/ListAllUsersController.html",[0,0.118,3,0.135,4,0.12,5,0.12,10,0.264,17,0.686,25,0.013,27,1.723,29,0.39,40,0.512,48,0.398,52,0.135,54,0.84,58,0.009,59,0.009,81,0.751,91,1.66,110,1.546,131,1.863,132,0.956,133,1.176,134,1.437,136,1.66,137,1.023,146,1.252,149,1.863,150,2.114,151,3.414,154,2.114,158,2.114,160,2.442,162,1.023,163,1.925,165,1.723,169,1.197,170,1.17,171,2.024,177,2.213,196,2.114,197,2.114,198,2.114,199,2.114,200,1.796,202,2.114,248,3.56,252,2.732,258,3.767,291,2.497,292,1.941,293,1.387,295,2.442,304,2.442,326,2.577,327,3.131,454,4.196,457,1.723,467,4.196,468,3.662,469,4.321,470,4.13,471,4.321,472,4.321,473,4.321,474,4.321]],["title/injectables/ListAllUsersUseCase.html",[105,0.704,470,2.561]],["body/injectables/ListAllUsersUseCase.html",[0,0.117,3,0.134,4,0.119,5,0.119,9,0.718,10,0.261,12,1.283,17,0.682,24,0.445,25,0.013,29,0.52,37,0.573,38,0.406,39,0.507,40,0.507,48,0.414,52,0.134,53,1.014,54,0.74,58,0.009,59,0.009,81,0.744,102,1.612,105,1,107,1.528,110,1.539,112,1.15,124,1.375,132,0.948,133,0.771,137,1.014,162,1.539,169,1.19,170,1.159,206,1.708,207,2.998,214,1.475,215,1.982,216,1.846,218,1.846,223,1.846,234,1.24,235,1.585,240,2.707,248,3.402,254,1.923,263,3.33,265,3.402,293,1.375,325,2.948,457,2.593,462,2.707,464,3.102,470,3.639,475,4.281,476,5.755,477,3.733,478,6.501,479,4.281]],["title/classes/ListPatientAbstractRepository.html",[0,0.11,209,1.819]],["body/classes/ListPatientAbstractRepository.html",[0,0.126,2,1.294,3,0.144,4,0.128,5,0.128,9,0.774,10,0.282,17,0.717,24,0.468,25,0.013,29,0.61,37,0.81,38,0.574,39,0.717,40,0.8,48,0.264,52,0.144,53,1.952,58,0.009,59,0.009,95,1.533,96,2.075,100,1.591,101,3.347,102,2.138,103,3.115,104,2.261,120,1.747,122,0.892,209,2.719,285,0.861,480,6.247,481,5.191,482,4.386,483,4.386,484,4.386,485,3.347,486,4.386]],["title/controllers/ListPatientByEmailController.html",[146,1.173,487,2.934]],["body/controllers/ListPatientByEmailController.html",[0,0.102,3,0.117,4,0.104,5,0.104,10,0.228,12,1.12,17,0.621,24,0.405,25,0.013,27,1.49,29,0.337,37,0.5,38,0.354,39,0.442,40,0.442,48,0.409,52,0.117,54,0.778,58,0.008,59,0.008,81,0.649,91,1.435,95,1.404,110,1.433,112,0.746,122,1.42,132,0.827,133,1.244,134,1.242,136,1.435,137,0.884,140,2.354,146,1.082,149,1.611,150,1.828,151,2.564,152,2.518,153,4.66,154,1.828,157,4.424,158,1.828,160,2.961,162,0.884,163,1.742,165,1.49,169,1.084,170,1.011,171,1.75,173,2.518,174,2.007,175,2.007,176,2.362,177,1.913,178,1.75,179,2.007,180,1.828,181,2.007,182,2.007,183,1.828,184,1.913,186,2.362,190,1.913,192,2.007,193,3.257,194,2.518,196,1.828,197,1.828,198,1.828,199,1.828,200,1.625,202,1.828,250,2.706,291,2.26,292,1.678,293,1.199,295,2.111,300,2.706,304,2.111,305,2.706,453,3.314,457,1.49,487,3.797,488,4.569,489,3.828,490,3.735,491,3.735]],["title/injectables/ListPatientByEmailUseCase.html",[105,0.704,489,2.561]],["body/injectables/ListPatientByEmailUseCase.html",[0,0.113,3,0.13,4,0.115,5,0.115,9,0.694,10,0.253,12,1.242,17,0.667,24,0.494,25,0.013,29,0.508,37,0.753,38,0.533,39,0.667,40,0.491,48,0.41,52,0.13,53,0.981,54,0.724,58,0.009,59,0.009,81,0.72,95,1.467,100,1.427,102,1.576,104,2.027,105,0.978,107,1.479,110,1.514,112,1.125,120,1.463,122,1.324,124,1.33,132,0.917,133,0.746,137,0.981,140,2.871,162,1.514,169,1.164,170,1.122,205,2.995,206,1.652,207,2.427,209,3.08,214,1.427,215,1.939,216,1.786,218,1.786,220,2.62,223,1.786,291,2.427,292,1.861,293,1.33,457,2.55,461,3.262,462,2.62,463,4.433,464,3.002,489,3.559,492,4.907,493,4.142]],["title/controllers/ListPatientByIdController.html",[146,1.173,494,2.934]],["body/controllers/ListPatientByIdController.html",[0,0.102,3,0.117,4,0.104,5,0.104,10,0.228,12,1.12,17,0.621,24,0.405,25,0.013,27,1.49,29,0.337,37,0.5,38,0.354,39,0.442,40,0.442,48,0.409,52,0.117,54,0.778,58,0.008,59,0.008,81,0.649,91,1.435,95,1.479,110,1.433,112,0.746,132,0.827,133,1.244,134,1.242,136,1.435,137,0.884,140,1.678,146,1.082,149,1.611,150,1.828,151,2.564,154,1.828,158,1.828,160,2.961,162,0.884,163,1.742,165,1.49,169,1.084,170,1.011,171,1.75,173,2.518,174,2.007,175,2.007,176,2.362,177,1.913,178,1.75,179,2.007,180,1.828,181,2.007,182,2.007,183,1.828,184,1.913,190,1.913,192,2.007,196,1.828,197,1.828,198,1.828,199,1.828,200,1.625,202,1.828,250,2.706,285,1.372,286,2.706,287,4.66,290,4.386,291,2.26,292,1.678,293,1.199,295,2.111,296,2.706,299,2.362,300,2.706,301,3.257,302,2.706,304,2.111,305,2.706,307,3.257,453,3.314,457,1.49,488,4.569,494,3.797,495,3.828,496,3.735]],["title/injectables/ListPatientByIdUseCase.html",[105,0.704,495,2.561]],["body/injectables/ListPatientByIdUseCase.html",[0,0.113,3,0.13,4,0.115,5,0.115,9,0.694,10,0.253,12,1.242,17,0.667,24,0.494,25,0.013,29,0.508,37,0.753,38,0.533,39,0.667,40,0.491,48,0.41,52,0.13,53,0.981,54,0.724,58,0.009,59,0.009,81,0.72,95,1.467,100,1.427,102,1.576,104,2.027,105,0.978,107,1.479,110,1.514,112,1.125,120,1.463,124,1.33,132,0.917,133,0.746,137,0.981,140,2.871,162,1.514,169,1.164,170,1.122,205,2.995,206,1.652,207,2.427,209,3.08,214,1.427,215,1.939,216,1.786,218,1.786,220,2.62,223,1.786,285,1.279,291,2.427,292,1.861,293,1.33,313,4.078,457,2.55,461,3.262,462,2.62,463,4.433,464,3.002,495,3.559,497,4.142]],["title/injectables/ListPatientsConcreteRepository.html",[105,0.704,498,2.73]],["body/injectables/ListPatientsConcreteRepository.html",[0,0.095,3,0.109,4,0.097,5,0.097,9,0.586,10,0.213,17,0.592,24,0.451,25,0.013,29,0.575,37,0.781,38,0.553,39,0.691,40,0.691,48,0.385,52,0.109,53,0.827,54,0.75,58,0.008,59,0.008,81,0.607,95,1.442,96,1.569,100,1.203,102,1.963,105,0.868,107,1.247,109,3.62,110,1.779,112,0.698,113,2.209,114,3.116,115,2.751,116,2.824,117,2.751,118,2.531,120,1.605,122,1.126,124,1.122,125,2.209,126,2.355,127,2.209,128,2.751,129,2.209,130,1.507,131,1.507,132,0.773,133,1.05,137,1.381,140,3.242,141,3.046,142,3.046,143,4.595,144,3.046,145,2.981,209,2.245,285,1.088,481,4.614,482,3.621,483,3.621,484,3.621,486,3.621,498,3.37,499,5.875,500,3.493,501,3.046,502,3.493]],["title/classes/ListUserAbstractRepository.html",[0,0.11,265,1.981]],["body/classes/ListUserAbstractRepository.html",[0,0.126,2,1.294,3,0.144,4,0.128,5,0.128,9,0.774,10,0.282,17,0.717,24,0.468,25,0.013,29,0.61,37,0.81,38,0.574,39,0.717,40,0.8,48,0.264,52,0.144,53,1.952,58,0.009,59,0.009,96,2.075,101,3.347,102,2.138,103,3.115,120,1.747,122,0.892,234,2.076,235,1.71,236,2.611,265,2.962,285,0.861,481,5.191,482,4.386,483,4.386,484,4.386,485,3.347,486,4.386,503,6.247]],["title/controllers/ListUserByEmailController.html",[146,1.173,504,2.934]],["body/controllers/ListUserByEmailController.html",[0,0.102,3,0.117,4,0.104,5,0.104,10,0.229,12,1.123,17,0.622,24,0.406,25,0.013,27,1.494,29,0.338,37,0.501,38,0.355,39,0.444,40,0.444,48,0.409,52,0.117,54,0.779,58,0.008,59,0.008,81,0.651,91,1.438,110,1.435,112,0.748,122,1.421,132,0.829,133,1.245,134,1.245,136,1.438,137,0.887,146,1.085,149,1.615,150,1.833,151,2.569,152,2.525,154,1.833,157,4.43,158,1.833,162,0.887,163,1.746,165,1.494,169,1.086,170,1.014,171,1.754,174,2.012,177,1.918,178,1.754,179,2.012,180,1.833,181,2.012,182,2.012,183,1.833,184,1.918,186,2.368,190,1.918,192,2.012,194,2.525,196,1.833,197,1.833,198,1.833,199,1.833,200,1.628,202,1.833,234,2.004,248,1.833,250,2.713,252,3.32,254,1.682,262,2.713,293,1.203,295,2.116,304,2.116,325,2.689,326,2.234,327,2.713,329,2.949,333,2.949,454,3.804,457,1.494,468,3.32,504,3.804,505,5.012,506,3.833,507,3.745,508,3.745]],["title/injectables/ListUserByEmailUseCase.html",[105,0.704,506,2.561]],["body/injectables/ListUserByEmailUseCase.html",[0,0.113,3,0.13,4,0.115,5,0.115,9,0.694,10,0.253,12,1.242,17,0.667,24,0.494,25,0.013,29,0.508,37,0.753,38,0.533,39,0.667,40,0.491,48,0.41,52,0.13,53,0.981,54,0.724,58,0.009,59,0.009,81,0.72,102,1.576,105,0.978,107,1.479,110,1.514,112,1.125,120,1.463,122,1.324,124,1.33,132,0.917,133,0.746,137,0.981,162,1.514,169,1.164,170,1.122,206,1.652,207,2.427,214,1.427,215,1.939,216,1.786,218,1.786,223,1.786,234,1.987,235,1.533,236,2.341,248,3.128,254,1.861,263,3.274,265,3.62,271,3.262,293,1.33,325,2.883,334,3.262,457,2.55,462,2.62,492,4.907,506,3.559,509,3.612,510,3.262]],["title/controllers/ListUserByIdController.html",[146,1.173,511,2.934]],["body/controllers/ListUserByIdController.html",[0,0.102,3,0.117,4,0.104,5,0.104,10,0.229,17,0.622,24,0.406,25,0.013,27,1.494,29,0.338,37,0.501,38,0.355,39,0.444,40,0.444,48,0.409,52,0.117,54,0.779,58,0.008,59,0.008,81,0.651,91,1.438,110,1.435,131,1.615,132,0.829,133,1.245,134,1.245,136,1.438,137,0.887,146,1.085,149,1.615,150,1.833,151,2.569,154,1.833,158,1.833,162,0.887,163,1.746,165,1.494,169,1.086,170,1.014,171,1.754,174,2.012,177,1.918,178,1.754,179,2.012,180,1.833,181,2.012,182,2.012,183,1.833,184,1.918,190,1.918,192,2.012,196,1.833,197,1.833,198,1.833,199,1.833,200,1.628,202,1.833,234,2.004,248,1.833,252,3.32,254,1.682,262,2.713,285,1.29,286,2.713,289,2.949,290,4.392,293,1.203,295,2.116,296,2.713,299,2.368,302,2.713,304,2.116,325,2.689,326,2.234,327,2.713,328,2.949,329,2.949,333,2.949,454,3.804,457,1.494,468,3.32,511,3.804,512,5.012,513,5.249,514,3.833,515,3.745,516,3.745]],["title/injectables/ListUserByIdUseCase.html",[105,0.704,514,2.561]],["body/injectables/ListUserByIdUseCase.html",[0,0.113,3,0.13,4,0.115,5,0.115,9,0.694,10,0.253,12,1.242,17,0.667,24,0.494,25,0.013,29,0.508,37,0.753,38,0.533,39,0.667,40,0.491,48,0.41,52,0.13,53,0.981,54,0.724,58,0.009,59,0.009,81,0.72,102,1.576,105,0.978,107,1.479,110,1.514,112,1.125,120,1.463,124,1.33,132,0.917,133,0.746,137,0.981,162,1.514,169,1.164,170,1.122,206,1.652,207,2.427,214,1.427,215,1.939,216,1.786,218,1.786,223,1.786,234,1.987,235,1.533,236,2.341,248,3.128,254,1.861,263,3.274,265,3.62,285,1.279,293,1.33,313,4.078,325,2.883,334,3.262,338,3.612,457,2.55,462,2.62,509,3.612,510,3.262,514,3.559]],["title/injectables/ListUserConcreteRepository.html",[105,0.704,517,2.73]],["body/injectables/ListUserConcreteRepository.html",[0,0.095,3,0.109,4,0.097,5,0.097,9,0.586,10,0.213,17,0.592,24,0.451,25,0.013,29,0.575,37,0.781,38,0.553,39,0.691,40,0.691,48,0.385,52,0.109,53,0.827,54,0.75,58,0.008,59,0.008,81,0.607,96,1.569,102,1.963,105,0.868,107,1.247,109,3.62,110,1.779,112,0.698,113,2.209,114,3.116,116,2.824,120,1.605,122,1.126,124,1.122,125,2.209,129,2.209,130,1.507,131,1.507,132,0.773,133,1.05,137,1.381,145,2.981,234,1.952,235,1.293,240,2.209,241,2.209,242,2.751,248,3.532,265,2.446,285,1.088,481,4.614,482,3.621,483,3.621,484,3.621,486,3.621,517,3.37,518,5.875,519,3.493,520,3.493,521,2.751,522,3.493,523,3.046,524,4.997,525,5.088,526,3.493,527,3.493]],["title/classes/NotAllowedError.html",[0,0.11,528,3.189]],["body/classes/NotAllowedError.html",[0,0.147,2,1.507,3,0.168,4,0.15,5,0.15,8,3.125,25,0.013,29,0.486,48,0.307,52,0.168,58,0.01,59,0.01,112,1.449,130,2.877,162,1.274,163,1.789,169,1.499,528,5.254,529,4.833,530,5.254,531,5.254,532,5.816,533,6.322,534,3.898,535,3.895,536,4.691,537,3.041,538,3.041,539,5.38]],["title/interfaces/PaginationParams.html",[219,1.06,540,3.189]],["body/interfaces/PaginationParams.html",[3,0.185,4,0.164,5,0.164,10,0.36,11,2.43,24,0.456,25,0.012,52,0.185,58,0.011,59,0.011,219,1.545,231,2.764,540,5.557,541,5.144,542,5.144,543,7.822,544,7.549]],["title/classes/PatientAlreadyExistsError.html",[0,0.11,164,2.415]],["body/classes/PatientAlreadyExistsError.html",[0,0.139,2,1.425,3,0.159,4,0.141,5,0.141,8,3.018,24,0.393,25,0.013,29,0.459,37,0.681,38,0.482,39,0.603,48,0.291,52,0.159,58,0.01,59,0.01,112,1.017,120,1.618,122,0.982,130,2.778,163,1.692,164,3.842,165,2.569,166,4.073,167,3.62,168,3.62,169,1.585,205,3.018,535,3.797,537,2.875,538,2.875,545,3.431,546,5.616,547,3.687,548,5.073,549,3.687,550,3.217,551,5.088]],["title/classes/PatientDataStructureMapper.html",[0,0.11,127,2.561]],["body/classes/PatientDataStructureMapper.html",[0,0.113,2,1.164,3,0.13,4,0.115,5,0.115,9,0.945,10,0.254,17,0.668,24,0.436,25,0.013,29,0.509,31,1.866,37,0.755,38,0.651,39,0.668,40,0.668,48,0.392,52,0.13,54,0.725,58,0.009,59,0.009,95,1.37,100,1.431,116,2.348,122,1.089,126,2.801,127,3.566,187,2.533,188,1.943,200,1.289,285,1.052,348,3.978,552,5.582,553,3.272,554,5.582,555,4.917,556,4.155,557,7.403,558,3.623,559,5.639,560,4.917,561,6.866,562,4.155,563,3.623,564,4.086,565,2.627,566,4.155,567,3.623,568,3.623,569,4.155,570,3.623,571,2.627,572,3.623,573,2.627,574,3.623,575,3.623,576,4.155,577,3.272,578,3.272,579,3.272,580,3.623]],["title/classes/PatientEntity.html",[0,0.11,100,1.395]],["body/classes/PatientEntity.html",[0,0.066,1,3.453,2,0.679,3,0.076,4,0.067,5,0.067,8,1.78,9,1.071,10,0.148,11,1.309,12,1.59,13,2.993,14,2.754,15,3.843,16,3.864,17,0.45,18,2.993,19,3.354,20,3.691,21,2.563,22,2.754,24,0.538,25,0.013,26,3.164,27,0.967,28,3.327,29,0.687,31,2.587,32,4.812,33,1.91,34,1.91,35,1.91,37,0.855,38,0.672,39,0.84,40,0.783,41,4.12,43,1.757,44,1.91,45,2.744,48,0.268,52,0.119,54,0.821,58,0.006,59,0.006,95,0.813,97,2.648,100,1.827,120,1.711,122,1.024,133,0.437,145,2.267,187,2.382,188,1.827,200,1.179,219,0.635,285,1.074,345,2.964,348,2.518,385,1.635,415,1.757,565,1.534,571,3.643,573,3.643,581,5.674,582,1.447,583,2.115,584,2.115,585,2.425,586,2.115,587,2.115,588,2.115,589,2.425,590,2.115,591,2.425,592,2.115,593,2.115,594,2.115,595,2.115,596,2.425,597,2.115,598,2.425,599,2.115,600,2.115,601,2.115,602,2.115,603,2.115,604,2.115,605,2.115,606,2.115,607,2.425,608,1.757,609,1.757,610,1.757,611,2.754,612,3.843,613,1.757,614,2.754,615,1.757,616,3.314,617,2.115,618,2.754,619,1.757,620,1.757,621,1.757,622,1.757,623,1.757]],["title/modules/PatientModule.html",[60,1.819,433,2.73]],["body/modules/PatientModule.html",[0,0.073,3,0.084,4,0.075,5,0.075,25,0.013,48,0.45,52,0.084,53,1.183,58,0.006,59,0.006,60,2.245,62,1.443,63,1.518,64,1.698,65,1.698,66,1.518,67,3.16,68,2.601,73,2.601,74,1.698,75,1.698,77,2.773,81,0.467,91,1.58,93,2.453,95,1.579,106,4.469,109,2.685,122,0.794,123,2.341,124,2.045,140,2.515,146,1.845,147,3.621,159,3.799,160,3.599,161,1.375,162,1.508,163,2.118,209,1.847,277,3.799,283,3.621,285,0.932,294,1.847,297,4.027,298,1.518,310,2.324,433,5.406,452,3.621,456,4.027,457,1.993,487,3.621,489,4.027,494,3.621,495,4.027,498,4.469,501,2.341,624,2.341,625,2.685,626,2.341,627,4.192,628,3.799,629,2.685,630,3.621,631,2.341,632,2.685,633,2.685,634,4.357,635,2.685,636,2.341,637,2.341,638,2.341,639,1.698,640,2.685,641,4.357,642,4.357]],["title/classes/PatientPresenter.html",[0,0.11,175,2.175]],["body/classes/PatientPresenter.html",[0,0.138,2,1.42,3,0.159,4,0.141,5,0.141,9,0.85,10,0.309,17,0.761,24,0.392,25,0.013,29,0.458,37,0.678,38,0.669,39,0.6,40,0.6,48,0.289,52,0.159,54,0.652,58,0.01,59,0.01,95,1.085,100,2.556,122,1.241,126,3.418,134,2.137,175,3.453,187,2.887,285,1.198,348,3.791,577,3.993,578,3.993,579,3.993,643,5.603,644,3.993,645,5.603,646,6.426,647,4.42,648,5.069]],["title/interfaces/PatientProps.html",[219,1.06,610,2.934]],["body/interfaces/PatientProps.html",[0,0.093,1,2.775,3,0.107,4,0.095,5,0.095,8,1.597,9,0.571,10,0.208,11,1.691,16,3.105,24,0.538,25,0.013,28,3.082,31,2.205,38,0.633,39,0.746,45,2.998,48,0.329,52,0.154,54,0.921,58,0.008,59,0.008,95,1.051,97,1.926,100,1.691,120,1.818,122,1.288,133,0.614,145,3.756,187,2.998,188,2.299,200,1.523,219,0.893,231,1.597,285,1.073,345,4.531,348,1.831,385,2.298,565,2.156,571,4.396,573,4.396,581,2.685,582,2.033,608,2.47,609,2.47,610,3.558,611,3.558,612,4.563,613,2.47,614,3.558,615,2.47,616,4.281,617,2.972,618,3.558,619,2.47,620,2.47,621,2.47,622,2.47,623,2.47]],["title/classes/PatientsNotFound.html",[0,0.11,291,1.746]],["body/classes/PatientsNotFound.html",[0,0.141,2,1.451,3,0.162,4,0.144,5,0.144,8,3.053,25,0.013,29,0.468,48,0.296,52,0.162,58,0.01,59,0.01,95,1.109,112,1.424,130,2.81,163,1.723,165,2.599,169,1.594,205,3.053,291,2.81,292,2.927,293,2.092,535,3.83,537,2.928,538,2.928,545,3.494,547,3.755,549,3.755,550,3.277,649,4.081,650,4.518,651,4.518,652,4.518,653,4.081,654,4.081,655,4.081,656,4.518,657,4.518]],["title/injectables/PrismaService.html",[105,0.704,114,1.981]],["body/injectables/PrismaService.html",[0,0.134,3,0.197,4,0.137,5,0.137,8,2.956,10,0.301,17,0.748,25,0.013,29,0.629,40,0.748,48,0.36,52,0.154,54,0.811,58,0.01,59,0.01,81,0.856,105,1.097,107,1.759,112,1.391,114,3.088,130,2.125,169,1.019,564,3.57,649,3.881,658,4.296,659,6.963,660,7.765,661,7.765,662,4.927,663,4.927,664,4.927,665,4.927,666,4.927,667,4.927,668,4.927]],["title/classes/ResourceNotFoundError.html",[0,0.11,669,3.189]],["body/classes/ResourceNotFoundError.html",[0,0.147,2,1.507,3,0.168,4,0.15,5,0.15,8,3.125,25,0.013,29,0.486,48,0.307,52,0.168,58,0.01,59,0.01,112,1.449,130,2.877,162,1.274,163,1.789,169,1.499,293,2.328,529,4.833,530,5.254,531,5.254,534,3.898,535,3.895,536,4.691,537,3.041,538,3.041,669,5.254,670,5.816,671,5.38]],["title/classes/Right.html",[0,0.11,215,1.395]],["body/classes/Right.html",[0,0.151,2,1.13,3,0.126,4,0.112,5,0.112,10,0.246,11,1.904,17,0.655,24,0.488,25,0.013,28,3.799,29,0.613,37,0.54,38,0.382,39,0.478,40,0.655,52,0.222,54,0.944,58,0.009,59,0.009,90,3.496,112,0.806,132,1.501,133,0.995,200,1.715,214,2.528,215,2.588,425,4.354,439,2.721,440,6.196,441,6.196,442,4.967,443,4.967,447,4.354,448,3.519,449,5.78,450,3.178,451,3.178,672,5.528,673,4.035,674,4.035]],["title/classes/UniqueEntityID.html",[0,0.11,31,1.819]],["body/classes/UniqueEntityID.html",[0,0.114,2,1.178,3,0.131,4,0.117,5,0.117,9,1.246,10,0.257,11,1.958,12,1.931,17,0.673,19,4.073,21,3.833,24,0.498,25,0.013,28,3.528,29,0.651,31,3.238,37,0.761,38,0.539,39,0.673,40,0.763,45,1.889,48,0.24,52,0.131,54,0.828,58,0.009,59,0.009,112,0.84,120,1.739,285,0.784,415,3.046,442,4.478,447,5.434,675,6.478,676,3.666,677,6.9,678,6.9,679,4.204,680,4.204,681,5.685,682,4.204,683,4.204,684,4.204,685,5.685,686,4.204,687,4.204]],["title/classes/UpdateAndDeleteAbstractRepository.html",[0,0.11,310,2.288]],["body/classes/UpdateAndDeleteAbstractRepository.html",[0,0.13,2,1.333,3,0.149,4,0.132,5,0.132,9,1.035,10,0.29,17,0.731,24,0.477,25,0.013,29,0.557,37,0.826,38,0.585,39,0.731,40,0.731,48,0.352,52,0.149,53,1.916,58,0.01,59,0.01,95,1.321,96,2.138,100,1.64,102,2.03,103,3.21,104,2.329,120,1.568,285,0.888,294,3.373,310,3.488,485,3.449,688,5.972,689,4.472,690,4.472,691,4.861,692,4.887,693,4.151]],["title/injectables/UpdateAndDeleteConcreteRepository.html",[105,0.704,627,2.561]],["body/injectables/UpdateAndDeleteConcreteRepository.html",[0,0.099,3,0.114,4,0.101,5,0.101,9,0.862,10,0.222,17,0.609,24,0.461,25,0.013,29,0.539,37,0.798,38,0.615,39,0.707,40,0.609,48,0.406,52,0.114,53,0.861,54,0.661,58,0.008,59,0.008,81,0.632,95,1.388,96,1.634,100,1.253,102,1.817,105,0.894,107,1.299,109,3.485,110,1.682,112,0.727,113,2.301,114,3.174,116,2.907,118,2.636,120,1.366,122,0.702,124,1.168,125,2.301,126,2.453,127,2.301,128,2.865,129,2.301,130,1.569,131,1.569,132,0.805,133,1.074,134,1.21,137,1.218,143,2.865,187,1.634,188,1.253,285,1.325,294,3.28,310,2.907,521,2.865,577,2.865,578,2.865,579,2.865,580,3.172,627,3.253,636,3.172,689,3.727,690,3.727,691,4.051,692,4.373,694,5.655,695,3.172,696,3.638,697,3.638,698,3.638,699,3.638,700,3.638]],["title/classes/UpdateAndDeleteUserAbstractRepository.html",[0,0.11,335,2.561]],["body/classes/UpdateAndDeleteUserAbstractRepository.html",[0,0.128,2,1.32,3,0.147,4,0.131,5,0.131,9,1.028,10,0.288,17,0.726,24,0.474,25,0.013,29,0.554,37,0.82,38,0.581,39,0.726,40,0.726,48,0.35,52,0.147,53,1.913,58,0.01,59,0.01,95,1.008,96,2.117,102,2.022,103,3.177,120,1.56,234,2.092,235,1.744,236,2.663,285,0.879,294,3.362,335,3.878,485,3.414,689,4.443,690,4.443,691,4.829,693,4.109,701,5.943,702,4.868]],["title/injectables/UpdateAndDeleteUserConcreteRepository.html",[105,0.704,703,2.934]],["body/injectables/UpdateAndDeleteUserConcreteRepository.html",[0,0.097,3,0.112,4,0.099,5,0.099,9,0.851,10,0.218,17,0.602,24,0.457,25,0.013,29,0.534,37,0.791,38,0.61,39,0.7,40,0.602,48,0.403,52,0.112,53,0.846,54,0.653,58,0.008,59,0.008,81,0.621,96,1.605,102,1.802,105,0.882,107,1.276,109,3.457,110,1.672,112,0.714,113,2.26,114,3.149,116,2.87,118,2.589,120,1.353,122,0.69,124,1.147,125,2.26,129,2.26,130,1.541,131,1.541,132,0.791,133,1.064,134,1.188,137,1.202,188,1.231,234,2.189,235,1.323,240,2.26,241,2.26,242,2.814,255,1.92,256,1.83,285,1.317,294,3.263,335,3.212,521,2.814,525,3.116,689,3.68,690,3.68,695,3.116,702,4.338,703,3.68,704,5.61,705,5.079,706,3.116,707,3.573,708,3.573,709,3.573,710,3.573,711,2.814,712,2.814,713,3.116,714,2.814,715,2.814,716,3.573]],["title/controllers/UpdatePatientController.html",[146,1.173,630,2.934]],["body/controllers/UpdatePatientController.html",[0,0.1,3,0.114,4,0.102,5,0.102,10,0.223,17,0.611,24,0.399,25,0.013,27,1.459,29,0.33,37,0.489,38,0.616,39,0.433,40,0.433,48,0.406,52,0.114,54,0.769,58,0.008,59,0.008,81,0.635,91,1.405,95,1.28,110,1.417,122,1.155,131,1.577,132,0.809,133,1.17,134,1.216,136,1.405,137,0.866,140,1.643,146,1.06,149,1.577,150,1.79,151,2.526,152,2.466,154,1.79,157,4.383,158,1.79,160,2.918,162,0.866,163,1.717,164,3.08,165,1.459,166,2.313,167,1.873,168,1.873,169,1.068,170,0.99,171,1.713,172,2.88,173,2.466,174,1.965,175,1.965,176,2.313,177,1.873,178,1.713,179,1.965,180,1.79,181,1.965,182,1.965,183,1.79,184,1.873,185,3.741,186,2.313,187,2.688,188,2.061,189,2.88,190,1.873,191,3.189,192,1.965,194,2.466,196,1.79,197,1.79,198,1.79,199,1.79,200,1.602,201,2.88,202,1.79,204,3.189,285,1.116,299,2.313,628,3.57,630,3.741,639,2.313,717,3.741,718,4.968,719,5.163,720,3.657,721,3.657,722,3.657,723,3.657]],["title/interfaces/UpdatePatientEntity.html",[219,1.06,692,2.73]],["body/interfaces/UpdatePatientEntity.html",[3,0.16,4,0.142,5,0.142,10,0.312,11,2.224,24,0.593,25,0.013,38,0.705,45,3.18,52,0.16,58,0.01,59,0.01,95,1.093,120,1.896,122,1.436,187,3.342,188,2.562,219,1.337,231,2.392,285,1.387,582,3.046,692,4.353,724,4.452]],["title/injectables/UpdatePatientUseCase.html",[105,0.704,628,2.415]],["body/injectables/UpdatePatientUseCase.html",[0,0.101,3,0.116,4,0.103,5,0.103,9,0.62,10,0.226,12,1.559,17,0.616,24,0.465,25,0.013,29,0.47,37,0.696,38,0.57,39,0.616,40,0.438,45,1.66,48,0.408,52,0.116,53,1.231,54,0.669,58,0.008,59,0.008,81,0.642,95,1.602,100,1.273,102,1.457,104,1.808,105,0.904,107,1.319,110,1.425,112,1.039,120,1.495,122,0.713,124,1.67,132,1.151,133,1.083,137,1.231,162,1.425,169,1.076,170,1.001,187,1.66,188,1.273,205,2.819,206,1.474,207,2.595,209,2.934,214,1.273,215,1.791,216,1.594,218,1.594,219,0.968,223,1.594,285,0.97,291,2.243,292,1.66,293,1.187,294,1.66,308,3.222,309,4.74,310,3.691,312,4.096,315,2.678,317,4.096,318,2.911,319,3.769,628,3.102,639,3.806,725,3.695,726,3.695,727,4.732,728,3.695,729,2.911,730,3.222]],["title/interfaces/UpdatePatientUseCaseRequest.html",[219,1.06,727,2.934]],["body/interfaces/UpdatePatientUseCaseRequest.html",[0,0.103,3,0.118,4,0.105,5,0.105,9,0.631,10,0.23,11,1.815,12,1.58,24,0.555,25,0.013,38,0.624,45,2.73,48,0.41,52,0.118,53,1.248,54,0.677,58,0.008,59,0.008,81,0.654,95,1.483,100,1.297,102,1.055,104,1.842,105,0.916,110,0.891,112,0.752,120,1.808,122,1.271,124,1.692,132,1.166,133,1.094,137,1.248,162,0.891,169,1.09,170,1.02,187,2.958,188,2.268,205,1.764,206,1.502,207,1.624,209,2.367,214,1.297,215,1.815,216,1.624,218,1.624,219,0.986,223,1.624,231,1.764,285,1.292,291,2.272,292,1.691,293,1.209,294,1.691,309,2.965,310,2.978,312,2.965,315,2.728,317,4.15,318,2.965,319,3.818,628,2.246,639,2.381,727,4.405,729,2.965,730,3.283]],["title/interfaces/UpdateUserEntity.html",[219,1.06,702,2.73]],["body/interfaces/UpdateUserEntity.html",[3,0.155,4,0.137,5,0.137,10,0.302,11,2.179,24,0.601,25,0.013,38,0.697,45,3.133,52,0.155,58,0.01,59,0.01,120,1.91,122,1.419,188,2.532,219,1.295,231,2.316,234,1.433,255,3.95,256,3.765,285,1.371,582,2.95,702,4.265,731,4.311]],["title/interfaces/UseCaseError.html",[219,1.06,535,2.175]],["body/interfaces/UseCaseError.html",[3,0.181,4,0.161,5,0.161,10,0.354,11,2.406,24,0.449,25,0.012,52,0.181,58,0.011,59,0.011,120,1.716,163,1.929,170,2.107,219,1.519,231,2.718,529,4.204,534,4.204,535,3.753,537,3.279,538,3.279,550,3.669]],["title/classes/UserAlreadyExistsError.html",[0,0.11,253,2.561]],["body/classes/UserAlreadyExistsError.html",[0,0.139,2,1.425,3,0.159,4,0.141,5,0.141,8,3.018,24,0.393,25,0.013,29,0.459,37,0.681,38,0.482,39,0.603,48,0.291,52,0.159,58,0.01,59,0.01,112,1.017,120,1.618,122,0.982,130,2.778,163,1.692,165,2.569,167,3.62,168,3.62,169,1.585,253,4.073,254,2.893,263,3.299,535,3.797,537,2.875,538,2.875,545,3.431,546,5.616,547,3.687,548,5.073,549,3.687,550,3.217,732,5.088]],["title/classes/UserDataStructureMapper.html",[0,0.11,241,2.561]],["body/classes/UserDataStructureMapper.html",[0,0.113,2,1.164,3,0.13,4,0.115,5,0.115,9,0.945,10,0.254,17,0.668,24,0.436,25,0.013,29,0.509,31,1.866,37,0.755,38,0.651,39,0.668,40,0.668,48,0.366,52,0.13,54,0.725,58,0.009,59,0.009,116,2.348,122,1.089,188,1.943,200,1.289,234,1.855,235,1.538,240,2.627,241,3.566,255,3.03,256,2.888,285,1.052,348,3.978,553,3.272,554,5.582,555,4.917,558,3.623,560,4.917,563,3.623,564,3.01,565,2.627,567,3.623,568,3.623,570,3.623,571,2.627,572,3.623,573,2.627,574,3.623,575,3.623,711,3.272,712,3.272,713,3.623,714,3.272,715,3.272,733,5.582,734,4.155,735,7.403,736,5.639,737,6.866,738,4.155,739,4.155,740,4.155,741,4.155,742,4.155]],["title/classes/UserEntity.html",[0,0.11,235,1.499]],["body/classes/UserEntity.html",[0,0.148,1,3.579,2,0.601,3,0.067,4,0.06,5,0.06,8,2.32,9,1.149,10,0.131,11,1.706,12,1.485,13,2.718,14,2.5,15,3.589,16,3.665,17,0.409,18,2.718,19,3.132,20,3.407,21,2.327,22,2.5,24,0.53,25,0.013,26,2.955,27,0.857,28,3.354,29,0.682,31,2.437,32,4.564,33,1.691,34,1.691,35,1.691,37,0.847,38,0.662,39,0.827,40,0.774,41,4.107,43,1.556,44,1.691,45,2.603,48,0.247,52,0.108,54,0.814,58,0.005,59,0.005,97,2.444,120,1.74,122,0.956,133,0.387,145,2.058,188,1.706,200,1.07,219,1.133,234,1.679,235,2.145,255,2.661,256,2.537,285,1.012,345,2.735,348,2.324,369,2.718,385,2.916,415,1.556,565,1.358,571,3.431,573,3.431,582,1.281,583,1.872,584,1.872,586,1.872,587,1.872,588,1.872,590,1.872,592,1.872,593,1.872,594,1.872,595,1.872,597,1.872,599,1.872,600,1.872,601,1.872,602,1.872,603,1.872,604,1.872,605,1.872,606,1.872,608,1.556,609,1.556,611,2.5,612,3.932,613,1.556,614,2.5,615,1.556,618,2.5,619,1.556,620,1.556,621,1.556,622,1.556,623,1.556,743,5.663,744,1.691,745,3.009,746,3.134,747,3.009,748,2.147,749,2.147,750,2.147,751,2.147,752,2.147,753,2.147,754,2.147,755,2.147,756,2.147,757,2.147,758,3.009,759,1.872,760,3.009,761,1.872]],["title/modules/UserModule.html",[60,1.819,434,2.73]],["body/modules/UserModule.html",[0,0.075,3,0.087,4,0.077,5,0.077,25,0.013,48,0.45,52,0.087,53,1.206,58,0.007,59,0.007,60,2.288,62,1.488,63,1.565,64,1.752,65,1.752,66,1.565,67,3.221,68,2.663,73,2.663,74,1.752,75,1.752,77,2.839,81,0.481,91,1.617,109,3.058,122,0.813,124,2.152,146,1.774,161,1.419,162,1.449,163,2.035,232,2.512,234,2.124,237,4.518,239,2.415,246,3.691,248,2.996,251,3.845,252,3.871,265,2.061,277,3.845,285,0.95,294,2.288,298,1.565,321,3.691,324,4.077,335,2.663,434,5.386,457,2.032,467,3.691,470,4.077,504,3.691,506,4.077,511,3.691,514,4.077,517,4.518,523,2.415,627,4.077,631,2.415,634,4.442,637,2.415,638,2.415,641,4.442,642,4.442,703,3.051,706,2.415,762,2.415,763,2.415,764,2.77,765,2.77,766,2.77,767,2.77,768,2.77,769,2.77]],["title/classes/UserPresenter.html",[0,0.11,326,2.415]],["body/classes/UserPresenter.html",[0,0.137,2,1.405,3,0.157,4,0.139,5,0.139,9,0.841,10,0.306,17,0.756,24,0.388,25,0.013,29,0.453,37,0.671,38,0.665,39,0.594,40,0.594,48,0.286,52,0.157,54,0.645,58,0.01,59,0.01,122,1.232,134,2.122,188,2.199,234,1.453,235,2.736,240,3.172,256,3.269,285,1.19,326,3.807,348,3.772,644,3.95,645,5.565,647,4.373,711,3.95,712,3.95,714,3.95,715,3.95,770,5.565,771,6.383,772,5.015]],["title/interfaces/UserProps.html",[219,1.06,746,2.934]],["body/interfaces/UserProps.html",[0,0.148,1,3.068,3,0.096,4,0.086,5,0.086,8,2.136,9,0.91,10,0.188,11,1.87,16,2.883,24,0.537,25,0.013,28,3.135,31,2.048,38,0.607,39,0.711,45,2.877,48,0.31,52,0.143,54,0.916,58,0.007,59,0.007,97,1.74,120,1.839,122,1.237,133,0.554,145,3.58,188,2.207,200,1.414,219,1.194,231,1.443,234,1.739,235,2.01,255,3.442,256,3.281,285,1.012,345,4.39,348,1.655,369,2.426,385,3.074,565,1.948,571,4.242,573,4.242,582,1.837,608,2.231,609,2.231,611,3.304,612,4.642,613,2.231,614,3.304,615,2.231,618,3.304,619,2.231,620,2.231,621,2.231,622,2.231,623,2.231,743,2.426,745,2.685,746,3.934,747,2.685,758,3.975,759,2.685,760,3.975,761,2.685]],["title/classes/UsersNotFound.html",[0,0.11,325,2.074]],["body/classes/UsersNotFound.html",[0,0.141,2,1.451,3,0.162,4,0.144,5,0.144,8,3.053,25,0.013,29,0.468,48,0.296,52,0.162,58,0.01,59,0.01,95,1.109,112,1.424,130,2.81,163,1.723,165,2.599,169,1.594,254,2.927,263,3.337,293,2.092,325,3.337,535,3.83,537,2.928,538,2.928,545,3.494,547,3.755,549,3.755,550,3.277,649,4.081,650,4.518,651,4.518,652,4.518,653,4.081,654,4.081,655,4.081,656,4.518,657,4.518]],["title/classes/ZodPipeValidator.html",[0,0.11,178,1.897]],["body/classes/ZodPipeValidator.html",[0,0.115,2,1.185,3,0.132,4,0.118,5,0.118,10,0.258,17,0.676,24,0.441,25,0.013,28,2.793,29,0.515,37,0.764,38,0.541,39,0.676,40,0.501,48,0.369,52,0.132,54,0.734,58,0.009,59,0.009,81,0.735,112,0.845,130,2.462,131,1.824,133,0.761,169,1.336,170,1.145,171,2.674,178,2.674,180,3.162,183,2.793,200,1.771,655,3.331,773,5.634,774,3.688,775,6.461,776,5.708,777,4.23,778,7.443,779,4.23,780,5.708,781,5.634,782,6.917,783,4.23,784,5.708,785,4.23,786,4.977,787,4.23,788,4.23,789,5.708,790,4.23,791,4.23,792,4.23,793,5.708,794,5.708,795,4.23,796,4.23,797,4.23,798,4.23,799,4.23]],["title/coverage.html",[800,4.364]],["body/coverage.html",[0,0.202,1,0.881,5,0.043,6,1.359,7,1.359,9,0.444,23,1.129,24,0.121,25,0.013,26,0.93,31,0.7,53,1.173,58,0.004,59,0.004,66,0.881,78,1.228,93,0.93,94,1.359,95,1.525,96,2.844,100,0.537,105,1.213,106,1.051,108,1.359,109,2.661,114,0.763,122,0.956,127,0.986,134,0.88,140,1.827,146,1.789,147,1.129,148,1.918,149,3.073,153,1.785,159,0.93,161,2.083,162,1.561,163,0.518,164,0.93,165,1.622,166,0.986,167,1.356,168,1.356,169,0.841,175,0.837,178,0.73,180,0.763,200,0.484,205,2.81,206,2.63,209,0.7,212,1.129,214,0.912,215,0.912,219,1.617,232,0.93,233,1.359,234,1.998,235,0.577,237,1.051,238,1.359,241,0.986,246,1.129,247,1.918,248,2.23,249,1.129,251,0.93,253,0.986,254,1.189,263,2.847,265,0.763,267,1.129,283,1.129,284,1.918,285,1.118,287,1.785,291,0.672,292,0.7,293,1.108,294,1.827,297,0.986,298,1.496,310,0.881,321,1.129,322,1.918,323,1.129,324,0.986,325,0.798,326,0.93,335,0.986,340,1.918,341,1.359,347,1.228,412,1.359,426,1.228,427,1.359,428,1.359,439,2.743,452,1.129,453,2.881,456,0.986,457,1.976,467,1.129,468,2.881,470,0.986,480,1.359,487,1.129,489,0.986,494,1.129,495,0.986,498,1.051,499,1.359,503,1.359,504,1.129,505,1.129,506,0.986,511,1.129,512,1.129,514,0.986,517,1.051,518,1.359,528,1.228,529,2.5,530,2.085,531,2.085,532,1.359,533,1.359,534,2.5,535,0.837,537,0.881,538,0.881,540,1.228,541,1.359,542,1.359,545,2.743,548,1.228,550,0.986,552,1.359,553,2.085,581,2.085,582,2.955,610,1.129,627,0.986,628,0.93,630,1.129,639,1.674,643,1.359,644,2.085,658,1.359,669,1.228,670,1.359,675,1.359,676,1.359,688,1.359,692,1.051,694,1.359,701,1.359,702,1.051,703,1.129,704,1.359,717,1.918,718,1.129,724,1.359,727,1.129,731,1.359,733,1.359,743,2.085,746,1.129,770,1.359,773,1.359,774,1.359,800,1.228,801,1.559,802,1.559,803,1.228,804,6.332,805,8.278,806,6.471,807,5.559,808,3.45,809,3.45,810,7.305,811,7.056,812,1.559,813,4.556,814,2.647,815,1.559,816,1.559,817,1.359,818,1.359,819,1.559,820,1.559]],["title/dependencies.html",[63,2.754,821,2.942]],["body/dependencies.html",[25,0.013,58,0.01,59,0.01,63,2.972,81,0.914,83,4.586,169,1.088,183,3.219,345,3.326,564,3.811,781,4.586,786,4.586,822,7.176,823,5.259,824,5.259,825,5.259,826,5.259,827,5.259,828,5.259,829,5.259,830,5.259,831,5.259,832,5.259,833,6.577,834,6.577,835,5.259,836,5.259,837,5.259,838,5.259,839,5.259,840,5.259,841,5.259,842,5.259,843,5.259,844,5.259,845,5.259]],["title/miscellaneous/functions.html",[846,2.134,847,4.25]],["body/miscellaneous/functions.html",[10,0.386,25,0.011,58,0.011,59,0.011,66,4.392,817,5.515,846,4,847,5.515,848,6.325]],["title/index.html",[10,0.206,849,3.374,850,3.374]],["body/index.html",[4,0.127,25,0.013,58,0.009,59,0.009,653,3.591,654,3.591,744,3.591,800,3.591,851,4.559,852,4.559,853,6.001,854,4.559,855,4.559,856,4.559,857,4.559,858,4.559,859,4.559,860,4.559,861,4.559,862,7.752,863,6.708,864,7.752,865,4.559,866,4.559,867,4.559,868,4.559,869,4.559,870,6.001,871,4.559,872,4.559,873,4.559,874,4.559,875,6.001,876,6.001,877,4.559,878,4.559,879,4.559,880,6.001,881,6.001,882,6.001,883,4.559,884,4.559,885,4.559,886,4.559,887,4.559,888,3.975,889,4.559,890,4.559,891,4.559,892,4.559,893,4.559,894,4.559,895,4.559,896,4.559,897,4.559,898,3.975,899,4.559,900,4.559,901,4.559,902,4.559,903,4.559,904,4.559,905,3.975]],["title/modules.html",[62,2.977]],["body/modules.html",[25,0.011,58,0.011,59,0.011,61,4.17,62,3.092,71,3.88,72,3.88,277,3.433,433,3.88,434,3.88,888,6.925,906,7.942,907,7.942,908,8.07,909,5.755,910,5.755]],["title/overview.html",[911,4.832]],["body/overview.html",[2,0.986,25,0.013,58,0.008,59,0.008,60,1.581,61,5.092,62,1.891,63,1.989,64,2.226,65,2.226,66,1.989,67,2.226,68,2.226,69,3.069,70,3.069,71,3.951,72,5.075,73,3.177,74,2.226,75,2.226,91,1.352,106,3.951,107,1.256,114,3.539,159,3.495,231,1.649,237,3.951,251,3.495,277,4.411,278,3.069,279,3.069,280,3.069,297,3.705,324,3.705,431,3.069,432,3.069,433,5.557,434,5.524,456,3.705,470,3.705,489,3.705,495,3.705,498,3.951,506,3.705,514,3.705,517,3.951,624,3.069,626,3.069,627,4.041,628,3.495,762,3.069,763,3.069,911,3.069,912,3.52,913,5.024,914,3.52,915,3.52]],["title/properties.html",[11,1.679,821,2.942]],["body/properties.html",[11,2.15,25,0.013,58,0.011,59,0.011,744,4.915,898,5.441,905,5.441,916,6.241,917,6.241,918,6.241]],["title/miscellaneous/typealiases.html",[846,2.134,919,4.874]],["body/miscellaneous/typealiases.html",[10,0.184,24,0.348,25,0.008,39,0.636,58,0.007,59,0.007,87,3.918,95,1.678,122,1.368,140,2.992,148,2.188,149,3.422,153,4.008,161,2.302,162,1.912,190,3.775,205,3.12,206,3.221,214,1.04,215,1.04,220,4.482,234,2.194,247,2.188,248,3.259,249,3.256,263,3.254,269,3.539,284,2.188,285,1.412,287,4.008,298,2.54,316,3.918,322,2.188,323,3.256,336,3.918,340,2.188,347,3.539,378,3.918,439,2.036,453,2.842,457,2.657,468,2.842,477,3.918,505,3.256,510,4.681,512,3.256,639,1.91,717,2.188,718,3.256,729,3.539,803,2.379,818,2.633,846,1.91,920,3.02,921,4.679,922,6.427,923,2.633,924,5.183,925,3.02,926,2.633,927,2.633,928,3.02,929,3.02,930,2.633,931,3.02,932,3.02,933,3.02]],["title/miscellaneous/variables.html",[846,2.134,934,4.25]],["body/miscellaneous/variables.html",[10,0.196,25,0.013,27,3.058,28,3.821,38,0.527,54,0.604,58,0.007,59,0.007,78,3.699,95,1.6,122,1.42,148,2.323,149,3.452,153,4.126,184,3.83,185,5.418,186,4.119,187,2.11,188,1.618,189,3.699,200,1.457,214,1.618,215,1.618,234,2.089,247,2.323,249,3.403,255,1.723,256,1.642,257,2.796,284,2.323,285,1.443,287,4.126,299,4.119,322,2.323,323,3.403,328,3.699,439,2.162,443,2.525,449,2.525,450,2.525,451,2.525,453,2.97,468,2.97,505,3.403,512,3.403,717,2.323,718,3.403,803,2.525,846,2.028,921,2.796,922,5.335,923,2.796,924,4.095,926,4.095,927,2.796,930,2.796,934,2.796,935,3.206,936,3.206,937,3.206,938,3.206,939,3.206,940,3.206,941,3.206,942,3.206]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":805,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":917,"title":{},"body":{"properties.html":{}}}],["0.2.2",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":806,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":812,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":810,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":811,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":813,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":807,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":809,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":808,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":814,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":395,"title":{},"body":{"classes/DomainEvents.html":{}}}],["1/8",{"_index":816,"title":{},"body":{"coverage.html":{}}}],["10.0.3",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["10.3.8",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":913,"title":{},"body":{"overview.html":{}}}],["12",{"_index":815,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":914,"title":{},"body":{"overview.html":{}}}],["2.4.3",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["25",{"_index":915,"title":{},"body":{"overview.html":{}}}],["3.2.2",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["3.23.8",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["3.6.0",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":796,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["5.15.0",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":912,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["_domainevents",{"_index":13,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["_id",{"_index":14,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["a.equals(aggregate",{"_index":393,"title":{},"body":{"classes/DomainEvents.html":{}}}],["abstract",{"_index":53,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"classes/Entity.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"modules/PatientModule.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["accessors",{"_index":22,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["actions/create",{"_index":632,"title":{},"body":{"modules/PatientModule.html":{}}}],["actions/crete",{"_index":768,"title":{},"body":{"modules/UserModule.html":{}}}],["actions/delete",{"_index":638,"title":{},"body":{"modules/PatientModule.html":{},"modules/UserModule.html":{}}}],["actions/list",{"_index":634,"title":{},"body":{"modules/PatientModule.html":{},"modules/UserModule.html":{}}}],["actions/update",{"_index":640,"title":{},"body":{"modules/PatientModule.html":{}}}],["adddomainevent",{"_index":18,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["adddomainevent(domainevent",{"_index":35,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["again",{"_index":656,"title":{},"body":{"classes/PatientsNotFound.html":{},"classes/UsersNotFound.html":{}}}],["aggregate",{"_index":369,"title":{},"body":{"classes/DomainEvents.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["aggregate.clearevents",{"_index":400,"title":{},"body":{"classes/DomainEvents.html":{}}}],["aggregate.domainevents.foreach((event",{"_index":390,"title":{},"body":{"classes/DomainEvents.html":{}}}],["aggregate.id.equals(id",{"_index":397,"title":{},"body":{"classes/DomainEvents.html":{}}}],["aggregatefound",{"_index":387,"title":{},"body":{"classes/DomainEvents.html":{}}}],["aggregateroot",{"_index":1,"title":{"classes/AggregateRoot.html":{}},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{},"coverage.html":{}}}],["aggregateroot:12",{"_index":586,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["aggregateroot:17",{"_index":587,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["aggregateroot:6",{"_index":583,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["aliases",{"_index":920,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":533,"title":{},"body":{"classes/NotAllowedError.html":{},"coverage.html":{}}}],["allpatients",{"_index":465,"title":{},"body":{"injectables/ListAllPatientsUseCase.html":{}}}],["already",{"_index":167,"title":{},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"classes/PatientAlreadyExistsError.html":{},"controllers/UpdatePatientController.html":{},"classes/UserAlreadyExistsError.html":{},"coverage.html":{}}}],["amazing",{"_index":889,"title":{},"body":{"index.html":{}}}],["api",{"_index":853,"title":{},"body":{"index.html":{}}}],["app",{"_index":866,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":61,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":782,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["async",{"_index":110,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["authmodule",{"_index":71,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":898,"title":{},"body":{"index.html":{},"properties.html":{}}}],["available",{"_index":910,"title":{},"body":{"modules.html":{}}}],["await",{"_index":137,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["backend",{"_index":857,"title":{},"body":{"index.html":{}}}],["backers",{"_index":890,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":171,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{},"classes/ZodPipeValidator.html":{}}}],["badrequestexception('validation",{"_index":799,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["badrequestexception(error.message",{"_index":202,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["basic",{"_index":860,"title":{},"body":{"index.html":{}}}],["bcryptjs",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["body",{"_index":157,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/UpdatePatientController.html":{}}}],["boolean",{"_index":45,"title":{},"body":{"classes/AggregateRoot.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UniqueEntityID.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["bootstrap",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":908,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":906,"title":{},"body":{"modules.html":{}}}],["callback",{"_index":381,"title":{},"body":{"classes/DomainEvents.html":{}}}],["can't",{"_index":650,"title":{},"body":{"classes/PatientsNotFound.html":{},"classes/UsersNotFound.html":{}}}],["case",{"_index":163,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"classes/NotAllowedError.html":{},"classes/PatientAlreadyExistsError.html":{},"modules/PatientModule.html":{},"classes/PatientsNotFound.html":{},"classes/ResourceNotFoundError.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"modules/UserModule.html":{},"classes/UsersNotFound.html":{},"coverage.html":{}}}],["case.ts",{"_index":206,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["case.ts:15",{"_index":462,"title":{},"body":{"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{}}}],["case.ts:16",{"_index":311,"title":{},"body":{"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{}}}],["case.ts:19",{"_index":464,"title":{},"body":{"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{}}}],["case.ts:20",{"_index":509,"title":{},"body":{"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{}}}],["case.ts:21",{"_index":266,"title":{},"body":{"injectables/CreateUserUseCase.html":{}}}],["case.ts:22",{"_index":314,"title":{},"body":{"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{}}}],["case.ts:23",{"_index":210,"title":{},"body":{"injectables/CreatePatientUseCase.html":{}}}],["case.ts:24",{"_index":725,"title":{},"body":{"injectables/UpdatePatientUseCase.html":{}}}],["case.ts:27",{"_index":268,"title":{},"body":{"injectables/CreateUserUseCase.html":{}}}],["case.ts:29",{"_index":213,"title":{},"body":{"injectables/CreatePatientUseCase.html":{}}}],["case.ts:30",{"_index":728,"title":{},"body":{"injectables/UpdatePatientUseCase.html":{}}}],["cases",{"_index":537,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientsNotFound.html":{},"classes/ResourceNotFoundError.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UsersNotFound.html":{},"coverage.html":{}}}],["cases/create",{"_index":161,"title":{},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cases/delete",{"_index":298,"title":{},"body":{"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cases/error",{"_index":165,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientsNotFound.html":{},"controllers/UpdatePatientController.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UsersNotFound.html":{},"coverage.html":{}}}],["cases/list",{"_index":457,"title":{},"body":{"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cases/updated",{"_index":639,"title":{},"body":{"modules/PatientModule.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["catch",{"_index":791,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["class",{"_index":0,"title":{"classes/AggregateRoot.html":{},"classes/CreatePatientAbstractRepository.html":{},"classes/CreateUserAbstractRepository.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"classes/ListPatientAbstractRepository.html":{},"classes/ListUserAbstractRepository.html":{},"classes/NotAllowedError.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"classes/PatientsNotFound.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{}},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/NotAllowedError.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/CreatePatientAbstractRepository.html":{},"classes/CreateUserAbstractRepository.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"classes/ListPatientAbstractRepository.html":{},"classes/ListUserAbstractRepository.html":{},"classes/NotAllowedError.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"classes/PatientsNotFound.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{},"overview.html":{}}}],["clearevents",{"_index":20,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["clearhandlers",{"_index":351,"title":{},"body":{"classes/DomainEvents.html":{}}}],["clearmarkedaggregates",{"_index":352,"title":{},"body":{"classes/DomainEvents.html":{}}}],["cluster_appmodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":278,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":279,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":280,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_httpmodule",{"_index":431,"title":{},"body":{"modules/HttpModule.html":{},"overview.html":{}}}],["cluster_httpmodule_imports",{"_index":432,"title":{},"body":{"modules/HttpModule.html":{},"overview.html":{}}}],["cluster_patientmodule",{"_index":624,"title":{},"body":{"modules/PatientModule.html":{},"overview.html":{}}}],["cluster_patientmodule_imports",{"_index":625,"title":{},"body":{"modules/PatientModule.html":{}}}],["cluster_patientmodule_providers",{"_index":626,"title":{},"body":{"modules/PatientModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":762,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":764,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":763,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["concrete",{"_index":109,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/ListUserConcreteRepository.html":{},"modules/PatientModule.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["configmodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":172,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/UpdatePatientController.html":{}}}],["conflictexception(error",{"_index":201,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/UpdatePatientController.html":{}}}],["const",{"_index":133,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"classes/DomainEvents.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/Right.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{},"classes/ZodPipeValidator.html":{}}}],["constructor",{"_index":112,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"classes/Entity.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/NotAllowedError.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{}}}],["constructor(createpatientabstractrepository",{"_index":208,"title":{},"body":{"injectables/CreatePatientUseCase.html":{}}}],["constructor(createuserabstractrepository",{"_index":264,"title":{},"body":{"injectables/CreateUserUseCase.html":{}}}],["constructor(identifier",{"_index":546,"title":{},"body":{"classes/PatientAlreadyExistsError.html":{},"classes/UserAlreadyExistsError.html":{}}}],["constructor(listpatientrepository",{"_index":308,"title":{},"body":{"injectables/DeletePatientUseCase.html":{},"injectables/UpdatePatientUseCase.html":{}}}],["constructor(listuserabstractrepository",{"_index":334,"title":{},"body":{"injectables/DeleteUserUseCase.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{}}}],["constructor(listusersabstractrepository",{"_index":475,"title":{},"body":{"injectables/ListAllUsersUseCase.html":{}}}],["constructor(patientrepository",{"_index":461,"title":{},"body":{"injectables/ListAllPatientsUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{}}}],["constructor(prisma",{"_index":113,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/ListUserConcreteRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["constructor(private",{"_index":131,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListPatientsConcreteRepository.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserConcreteRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"classes/ZodPipeValidator.html":{}}}],["constructor(props",{"_index":413,"title":{},"body":{"classes/Entity.html":{}}}],["constructor(value",{"_index":442,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{}}}],["constructor(zodschema",{"_index":777,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["contracts/create",{"_index":217,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{}}}],["contracts/list",{"_index":218,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["contracts/update",{"_index":315,"title":{},"body":{"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["controller",{"_index":146,"title":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"modules/PatientModule.html":{},"controllers/UpdatePatientController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["controller('patient",{"_index":300,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{}}}],["controller('patients",{"_index":191,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/UpdatePatientController.html":{}}}],["controller('user",{"_index":329,"title":{},"body":{"controllers/DeleteUserController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{}}}],["controller('users",{"_index":258,"title":{},"body":{"controllers/CreateUserController.html":{},"controllers/ListAllUsersController.html":{}}}],["controller.ts",{"_index":149,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["controller.ts:16",{"_index":469,"title":{},"body":{"controllers/ListAllUsersController.html":{}}}],["controller.ts:18",{"_index":455,"title":{},"body":{"controllers/ListAllPatientsController.html":{}}}],["controller.ts:27",{"_index":289,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListUserByIdController.html":{}}}],["controller.ts:29",{"_index":250,"title":{},"body":{"controllers/CreateUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{}}}],["controller.ts:30",{"_index":156,"title":{},"body":{"controllers/CreatePatientController.html":{}}}],["controller.ts:31",{"_index":720,"title":{},"body":{"controllers/UpdatePatientController.html":{}}}],["controllers",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"modules/DatabaseModule.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"modules/HttpModule.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"modules/PatientModule.html":{},"controllers/UpdatePatientController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers/patient/patient.module",{"_index":437,"title":{},"body":{"modules/HttpModule.html":{}}}],["controllers/user/user.module",{"_index":438,"title":{},"body":{"modules/HttpModule.html":{}}}],["core/configs/env",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["core/either",{"_index":216,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["core/entities/aggregate",{"_index":608,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["core/entities/unique",{"_index":565,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["core/errors/shared",{"_index":549,"title":{},"body":{"classes/PatientAlreadyExistsError.html":{},"classes/PatientsNotFound.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UsersNotFound.html":{}}}],["coverage",{"_index":800,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":97,"title":{},"body":{"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["create(patient",{"_index":99,"title":{},"body":{"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{}}}],["create(props",{"_index":584,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["createdat",{"_index":571,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["createpatientabstractrepository",{"_index":93,"title":{"classes/CreatePatientAbstractRepository.html":{}},"body":{"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/PatientModule.html":{},"coverage.html":{}}}],["createpatientbodyschema",{"_index":153,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/ListPatientByEmailController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["createpatientconcreterepository",{"_index":106,"title":{"injectables/CreatePatientConcreteRepository.html":{}},"body":{"injectables/CreatePatientConcreteRepository.html":{},"modules/PatientModule.html":{},"coverage.html":{},"overview.html":{}}}],["createpatientcontroller",{"_index":147,"title":{"controllers/CreatePatientController.html":{}},"body":{"controllers/CreatePatientController.html":{},"modules/PatientModule.html":{},"coverage.html":{}}}],["createpatientusecase",{"_index":159,"title":{"injectables/CreatePatientUseCase.html":{}},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"modules/PatientModule.html":{},"coverage.html":{},"overview.html":{}}}],["createpatientusecaserequest",{"_index":212,"title":{"interfaces/CreatePatientUseCaseRequest.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"coverage.html":{}}}],["createpatientusecaseresponse",{"_index":220,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"miscellaneous/typealiases.html":{}}}],["createuserabstractrepository",{"_index":232,"title":{"classes/CreateUserAbstractRepository.html":{}},"body":{"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["createuserbodyschema",{"_index":249,"title":{},"body":{"controllers/CreateUserController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["createuserconcreterepository",{"_index":237,"title":{"injectables/CreateUserConcreteRepository.html":{}},"body":{"injectables/CreateUserConcreteRepository.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["createusercontroller",{"_index":246,"title":{"controllers/CreateUserController.html":{}},"body":{"controllers/CreateUserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["createuserusecase",{"_index":251,"title":{"injectables/CreateUserUseCase.html":{}},"body":{"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["createuserusecaserequest",{"_index":267,"title":{"interfaces/CreateUserUseCaseRequest.html":{}},"body":{"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"coverage.html":{}}}],["createuserusecaseresponse",{"_index":269,"title":{},"body":{"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"miscellaneous/typealiases.html":{}}}],["custom",{"_index":788,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["data",{"_index":134,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"classes/PatientPresenter.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"classes/UserPresenter.html":{},"coverage.html":{}}}],["data.email",{"_index":227,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{}}}],["data.isactive",{"_index":229,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["data.name",{"_index":226,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{}}}],["data.password",{"_index":274,"title":{},"body":{"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{}}}],["data.phone",{"_index":228,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["data.roles",{"_index":275,"title":{},"body":{"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{}}}],["database",{"_index":653,"title":{},"body":{"classes/PatientsNotFound.html":{},"classes/UsersNotFound.html":{},"index.html":{}}}],["database_url",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databasemodule",{"_index":277,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["databases/prisma/database.module",{"_index":436,"title":{},"body":{"modules/HttpModule.html":{}}}],["date",{"_index":345,"title":{},"body":{"interfaces/DomainEvent.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{},"dependencies.html":{}}}],["declarations",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":154,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["default",{"_index":27,"title":{},"body":{"classes/AggregateRoot.html":{},"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"classes/DomainEvents.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"classes/PatientEntity.html":{},"controllers/UpdatePatientController.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":29,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/NotAllowedError.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{}}}],["defines",{"_index":747,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["delete",{"_index":294,"title":{},"body":{"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"modules/PatientModule.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["delete('delete/:id",{"_index":288,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{}}}],["delete(id",{"_index":690,"title":{},"body":{"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["deletepatientcontroller",{"_index":283,"title":{"controllers/DeletePatientController.html":{}},"body":{"controllers/DeletePatientController.html":{},"modules/PatientModule.html":{},"coverage.html":{}}}],["deletepatientusecase",{"_index":297,"title":{"injectables/DeletePatientUseCase.html":{}},"body":{"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"modules/PatientModule.html":{},"coverage.html":{},"overview.html":{}}}],["deletepatientusecaseresponse",{"_index":316,"title":{},"body":{"injectables/DeletePatientUseCase.html":{},"miscellaneous/typealiases.html":{}}}],["deleteusercontroller",{"_index":321,"title":{"controllers/DeleteUserController.html":{}},"body":{"controllers/DeleteUserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["deleteuserparamschema",{"_index":323,"title":{},"body":{"controllers/DeleteUserController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["deleteuserusecase",{"_index":324,"title":{"injectables/DeleteUserUseCase.html":{}},"body":{"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["deleteuserusecaseresponse",{"_index":336,"title":{},"body":{"injectables/DeleteUserUseCase.html":{},"miscellaneous/typealiases.html":{}}}],["dependencies",{"_index":63,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":744,"title":{},"body":{"classes/UserEntity.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":867,"title":{},"body":{"index.html":{}}}],["dispatch",{"_index":353,"title":{},"body":{"classes/DomainEvents.html":{}}}],["dispatch(event",{"_index":365,"title":{},"body":{"classes/DomainEvents.html":{}}}],["dispatchaggregateevents",{"_index":354,"title":{},"body":{"classes/DomainEvents.html":{}}}],["dispatchaggregateevents(aggregate",{"_index":367,"title":{},"body":{"classes/DomainEvents.html":{}}}],["dispatcheventsforaggregate",{"_index":355,"title":{},"body":{"classes/DomainEvents.html":{}}}],["dispatcheventsforaggregate(id",{"_index":370,"title":{},"body":{"classes/DomainEvents.html":{}}}],["documentation",{"_index":801,"title":{},"body":{"coverage.html":{}}}],["domain",{"_index":386,"title":{},"body":{"classes/DomainEvents.html":{}}}],["domain/patient/contracts/create",{"_index":123,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"modules/PatientModule.html":{}}}],["domain/patient/contracts/list",{"_index":501,"title":{},"body":{"injectables/ListPatientsConcreteRepository.html":{},"modules/PatientModule.html":{}}}],["domain/patient/contracts/update",{"_index":636,"title":{},"body":{"modules/PatientModule.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{}}}],["domain/patient/entities/patient",{"_index":126,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientPresenter.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{}}}],["domain/patient/entities/update",{"_index":696,"title":{},"body":{"injectables/UpdateAndDeleteConcreteRepository.html":{}}}],["domain/patient/use",{"_index":160,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/DeletePatientController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"modules/PatientModule.html":{},"controllers/UpdatePatientController.html":{}}}],["domain/user/contracts/create",{"_index":239,"title":{},"body":{"injectables/CreateUserConcreteRepository.html":{},"modules/UserModule.html":{}}}],["domain/user/contracts/list",{"_index":523,"title":{},"body":{"injectables/ListUserConcreteRepository.html":{},"modules/UserModule.html":{}}}],["domain/user/contracts/update",{"_index":706,"title":{},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"modules/UserModule.html":{}}}],["domain/user/entities/update",{"_index":707,"title":{},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["domain/user/entities/user",{"_index":240,"title":{},"body":{"injectables/CreateUserConcreteRepository.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserPresenter.html":{}}}],["domain/user/use",{"_index":252,"title":{},"body":{"controllers/CreateUserController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"modules/UserModule.html":{}}}],["domainevent",{"_index":26,"title":{"interfaces/DomainEvent.html":{}},"body":{"classes/AggregateRoot.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["domaineventcallback",{"_index":378,"title":{},"body":{"classes/DomainEvents.html":{},"miscellaneous/typealiases.html":{}}}],["domainevents",{"_index":23,"title":{"classes/DomainEvents.html":{}},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"coverage.html":{}}}],["domainevents.markaggregatefordispatch(this",{"_index":57,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["domainpatient",{"_index":557,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["domainpatient.create",{"_index":566,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["domainuser",{"_index":735,"title":{},"body":{"classes/UserDataStructureMapper.html":{}}}],["domainuser.create",{"_index":739,"title":{},"body":{"classes/UserDataStructureMapper.html":{}}}],["e2e",{"_index":877,"title":{},"body":{"index.html":{}}}],["email",{"_index":122,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["email(value",{"_index":615,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["end",{"_index":856,"title":{},"body":{"index.html":{}}}],["entities/aggregate",{"_index":384,"title":{},"body":{"classes/DomainEvents.html":{}}}],["entities/patient",{"_index":104,"title":{},"body":{"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["entities/unique",{"_index":346,"title":{},"body":{"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{}}}],["entities/update",{"_index":693,"title":{},"body":{"classes/UpdateAndDeleteAbstractRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{}}}],["entities/user",{"_index":236,"title":{},"body":{"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeleteUserUseCase.html":{},"classes/ListUserAbstractRepository.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{}}}],["entity",{"_index":9,"title":{"classes/Entity.html":{}},"body":{"classes/AggregateRoot.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"coverage.html":{}}}],["entity.id",{"_index":424,"title":{},"body":{"classes/Entity.html":{}}}],["entity.ts",{"_index":582,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"interfaces/UpdatePatientEntity.html":{},"interfaces/UpdateUserEntity.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{},"coverage.html":{}}}],["entity.ts:15",{"_index":589,"title":{},"body":{"classes/PatientEntity.html":{}}}],["entity.ts:18",{"_index":591,"title":{},"body":{"classes/PatientEntity.html":{}}}],["entity.ts:22",{"_index":593,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["entity.ts:25",{"_index":595,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["entity.ts:29",{"_index":597,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["entity.ts:32",{"_index":599,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["entity.ts:36",{"_index":601,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["entity.ts:39",{"_index":603,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["entity.ts:43",{"_index":605,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["entity.ts:46",{"_index":751,"title":{},"body":{"classes/UserEntity.html":{}}}],["entity.ts:47",{"_index":607,"title":{},"body":{"classes/PatientEntity.html":{}}}],["entity.ts:50",{"_index":753,"title":{},"body":{"classes/UserEntity.html":{}}}],["entity.ts:51",{"_index":585,"title":{},"body":{"classes/PatientEntity.html":{}}}],["entity.ts:53",{"_index":755,"title":{},"body":{"classes/UserEntity.html":{}}}],["entity.ts:57",{"_index":756,"title":{},"body":{"classes/UserEntity.html":{}}}],["entity.ts:60",{"_index":757,"title":{},"body":{"classes/UserEntity.html":{}}}],["entity.ts:64",{"_index":748,"title":{},"body":{"classes/UserEntity.html":{}}}],["entity:16",{"_index":44,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["entity:4",{"_index":33,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["entity:5",{"_index":34,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["env",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/typealiases.html":{}}}],["environment",{"_index":858,"title":{},"body":{"index.html":{}}}],["envschema",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["envschema.parse(env",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["equals",{"_index":21,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{},"classes/UniqueEntityID.html":{},"classes/UserEntity.html":{}}}],["equals(entity",{"_index":43,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["equals(id",{"_index":681,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["error",{"_index":169,"title":{},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"classes/NotAllowedError.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{},"coverage.html":{},"dependencies.html":{}}}],["error.constructor",{"_index":199,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["error.ts",{"_index":534,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/ResourceNotFoundError.html":{},"interfaces/UseCaseError.html":{},"coverage.html":{}}}],["error.ts:3",{"_index":536,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/ResourceNotFoundError.html":{}}}],["errors",{"_index":797,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["errors/not",{"_index":532,"title":{},"body":{"classes/NotAllowedError.html":{},"coverage.html":{}}}],["errors/resource",{"_index":670,"title":{},"body":{"classes/ResourceNotFoundError.html":{},"coverage.html":{}}}],["errors/use",{"_index":538,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientsNotFound.html":{},"classes/ResourceNotFoundError.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UsersNotFound.html":{},"coverage.html":{}}}],["event",{"_index":50,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{}}}],["event.constructor.name",{"_index":407,"title":{},"body":{"classes/DomainEvents.html":{}}}],["event.ts",{"_index":341,"title":{},"body":{"interfaces/DomainEvent.html":{},"coverage.html":{}}}],["event.ts:5",{"_index":344,"title":{},"body":{"interfaces/DomainEvent.html":{}}}],["eventclassname",{"_index":379,"title":{},"body":{"classes/DomainEvents.html":{}}}],["eventhandler",{"_index":426,"title":{"interfaces/EventHandler.html":{}},"body":{"interfaces/EventHandler.html":{},"coverage.html":{}}}],["events",{"_index":51,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["events.ts",{"_index":347,"title":{},"body":{"classes/DomainEvents.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["events.ts:11",{"_index":376,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:19",{"_index":368,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:25",{"_index":383,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:33",{"_index":373,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:39",{"_index":371,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:49",{"_index":380,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:62",{"_index":363,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:66",{"_index":364,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:70",{"_index":366,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:8",{"_index":361,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events.ts:9",{"_index":362,"title":{},"body":{"classes/DomainEvents.html":{}}}],["events/domain",{"_index":49,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["example",{"_index":863,"title":{},"body":{"index.html":{}}}],["execute",{"_index":207,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["execute(data",{"_index":211,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"injectables/CreateUserUseCase.html":{}}}],["execute(email",{"_index":492,"title":{},"body":{"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListUserByEmailUseCase.html":{}}}],["execute(id",{"_index":313,"title":{},"body":{"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListUserByIdUseCase.html":{}}}],["execute(patient",{"_index":726,"title":{},"body":{"injectables/UpdatePatientUseCase.html":{}}}],["exists",{"_index":168,"title":{},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"classes/PatientAlreadyExistsError.html":{},"controllers/UpdatePatientController.html":{},"classes/UserAlreadyExistsError.html":{},"coverage.html":{}}}],["export",{"_index":52,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{}}}],["exports",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":8,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/NotAllowedError.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{},"classes/UsersNotFound.html":{}}}],["failed",{"_index":794,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["false",{"_index":425,"title":{},"body":{"classes/Entity.html":{},"classes/Left.html":{},"classes/Right.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{},"coverage.html":{}}}],["find",{"_index":651,"title":{},"body":{"classes/PatientsNotFound.html":{},"classes/UsersNotFound.html":{}}}],["findall",{"_index":98,"title":{},"body":{"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{}}}],["findbyemail",{"_index":111,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{}}}],["findbyemail(email",{"_index":119,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{}}}],["findmarkedaggregatebyid",{"_index":356,"title":{},"body":{"classes/DomainEvents.html":{}}}],["findmarkedaggregatebyid(id",{"_index":372,"title":{},"body":{"classes/DomainEvents.html":{}}}],["fns",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["found",{"_index":293,"title":{},"body":{"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"classes/PatientsNotFound.html":{},"classes/ResourceNotFoundError.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"classes/UsersNotFound.html":{},"coverage.html":{}}}],["fromdomaintopersistance",{"_index":554,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/UserDataStructureMapper.html":{}}}],["fromdomaintopersistance(patient",{"_index":556,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["fromdomaintopersistance(user",{"_index":734,"title":{},"body":{"classes/UserDataStructureMapper.html":{}}}],["frompersistancetodomain",{"_index":555,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/UserDataStructureMapper.html":{}}}],["frompersistancetodomain(raw",{"_index":560,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/UserDataStructureMapper.html":{}}}],["fromzoderror",{"_index":785,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["fromzoderror(error",{"_index":798,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["front",{"_index":855,"title":{},"body":{"index.html":{}}}],["function",{"_index":818,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":847,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('list",{"_index":454,"title":{},"body":{"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{}}}],["getaggregateid",{"_index":343,"title":{},"body":{"interfaces/DomainEvent.html":{}}}],["getcreatedat",{"_index":604,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["getdomainevents",{"_index":46,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["getemail",{"_index":592,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["getid",{"_index":419,"title":{},"body":{"classes/Entity.html":{}}}],["getisactive",{"_index":600,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["getname",{"_index":588,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["getpassword",{"_index":749,"title":{},"body":{"classes/UserEntity.html":{}}}],["getphone",{"_index":596,"title":{},"body":{"classes/PatientEntity.html":{}}}],["getroles",{"_index":752,"title":{},"body":{"classes/UserEntity.html":{}}}],["getting",{"_index":849,"title":{"index.html":{}},"body":{}}],["getupdatedat",{"_index":606,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["global/global",{"_index":530,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/ResourceNotFoundError.html":{},"coverage.html":{}}}],["global/use",{"_index":550,"title":{},"body":{"classes/PatientAlreadyExistsError.html":{},"classes/PatientsNotFound.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UsersNotFound.html":{},"coverage.html":{}}}],["graph",{"_index":909,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":885,"title":{},"body":{"index.html":{}}}],["handle",{"_index":151,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["handle(@body",{"_index":194,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/UpdatePatientController.html":{}}}],["handle(@param",{"_index":302,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByIdController.html":{}}}],["handle(body",{"_index":152,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/UpdatePatientController.html":{}}}],["handle(params",{"_index":286,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByIdController.html":{}}}],["handler",{"_index":410,"title":{},"body":{"classes/DomainEvents.html":{}}}],["handler(event",{"_index":411,"title":{},"body":{"classes/DomainEvents.html":{}}}],["handler.ts",{"_index":428,"title":{},"body":{"interfaces/EventHandler.html":{},"coverage.html":{}}}],["handler.ts:2",{"_index":430,"title":{},"body":{"interfaces/EventHandler.html":{}}}],["handlers",{"_index":409,"title":{},"body":{"classes/DomainEvents.html":{}}}],["handlersmap",{"_index":349,"title":{},"body":{"classes/DomainEvents.html":{}}}],["health",{"_index":851,"title":{},"body":{"index.html":{}}}],["here",{"_index":895,"title":{},"body":{"index.html":{}}}],["httpmodule",{"_index":72,"title":{"modules/HttpModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HttpModule.html":{},"modules.html":{},"overview.html":{}}}],["https://nestjs.com",{"_index":902,"title":{},"body":{"index.html":{}}}],["id",{"_index":285,"title":{},"body":{"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["id.tovalue",{"_index":687,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["id.ts",{"_index":676,"title":{},"body":{"classes/UniqueEntityID.html":{},"coverage.html":{}}}],["id.ts:10",{"_index":684,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["id.ts:12",{"_index":679,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["id.ts:18",{"_index":682,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["id.ts:4",{"_index":680,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["id.ts:6",{"_index":683,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["id/:id",{"_index":513,"title":{},"body":{"controllers/ListUserByIdController.html":{}}}],["identifier",{"_index":548,"title":{},"body":{"classes/PatientAlreadyExistsError.html":{},"classes/UserAlreadyExistsError.html":{},"coverage.html":{}}}],["implements",{"_index":130,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/NotAllowedError.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{}}}],["import",{"_index":48,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"modules/HttpModule.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/NotAllowedError.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{}}}],["imports",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AggregateRoot.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"interfaces/PaginationParams.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/ZodPipeValidator.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{}}}],["infra/databases/prisma/database.module",{"_index":631,"title":{},"body":{"modules/PatientModule.html":{},"modules/UserModule.html":{}}}],["infra/databases/repositories/patient/create",{"_index":633,"title":{},"body":{"modules/PatientModule.html":{}}}],["infra/databases/repositories/patient/list",{"_index":635,"title":{},"body":{"modules/PatientModule.html":{}}}],["infra/databases/repositories/patient/updated",{"_index":637,"title":{},"body":{"modules/PatientModule.html":{},"modules/UserModule.html":{}}}],["infra/databases/repositories/user/create",{"_index":766,"title":{},"body":{"modules/UserModule.html":{}}}],["infra/databases/repositories/user/list",{"_index":767,"title":{},"body":{"modules/UserModule.html":{}}}],["infra/databases/repositories/user/updated",{"_index":769,"title":{},"body":{"modules/UserModule.html":{}}}],["infra/http/http.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["infra/utils/pipes/zod",{"_index":179,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["inherited",{"_index":32,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["injectable",{"_index":105,"title":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreatePatientUseCase.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/CreateUserUseCase.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"injectables/PrismaService.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"injectables/UpdatePatientUseCase.html":{}},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"injectables/PrismaService.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"coverage.html":{}}}],["injectables",{"_index":107,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreatePatientUseCase.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/CreateUserUseCase.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"injectables/PrismaService.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"injectables/UpdatePatientUseCase.html":{},"overview.html":{}}}],["installrunning",{"_index":865,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":792,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["instructions",{"_index":861,"title":{},"body":{"index.html":{}}}],["integrate",{"_index":854,"title":{},"body":{"index.html":{}}}],["interface",{"_index":219,"title":{"interfaces/CreatePatientUseCaseRequest.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"interfaces/DomainEvent.html":{},"interfaces/EventHandler.html":{},"interfaces/PaginationParams.html":{},"interfaces/PatientProps.html":{},"interfaces/UpdatePatientEntity.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"interfaces/UserProps.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"interfaces/DomainEvent.html":{},"interfaces/EventHandler.html":{},"interfaces/PaginationParams.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{},"coverage.html":{}}}],["interfaces",{"_index":231,"title":{},"body":{"interfaces/CreatePatientUseCaseRequest.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"interfaces/DomainEvent.html":{},"interfaces/EventHandler.html":{},"interfaces/PaginationParams.html":{},"interfaces/PatientProps.html":{},"interfaces/UpdatePatientEntity.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"interfaces/UserProps.html":{},"overview.html":{}}}],["isactive",{"_index":188,"title":{},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"miscellaneous/variables.html":{}}}],["isactive(value",{"_index":619,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["iseventregistered",{"_index":408,"title":{},"body":{"classes/DomainEvents.html":{}}}],["isglobal",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["isleft",{"_index":440,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{}}}],["ispatientexist",{"_index":317,"title":{},"body":{"injectables/DeletePatientUseCase.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["isright",{"_index":441,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{}}}],["isuserexists",{"_index":337,"title":{},"body":{"injectables/DeleteUserUseCase.html":{}}}],["join",{"_index":892,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["jwt_expires_in",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kamil",{"_index":899,"title":{},"body":{"index.html":{}}}],["l",{"_index":443,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"miscellaneous/variables.html":{}}}],["later",{"_index":657,"title":{},"body":{"classes/PatientsNotFound.html":{},"classes/UsersNotFound.html":{}}}],["left",{"_index":214,"title":{"classes/Left.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"classes/Left.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"classes/Right.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["left(new",{"_index":223,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["left(value",{"_index":450,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":905,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":882,"title":{},"body":{"index.html":{}}}],["listall",{"_index":481,"title":{},"body":{"classes/ListPatientAbstractRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"injectables/ListUserConcreteRepository.html":{}}}],["listallpatientscontroller",{"_index":452,"title":{"controllers/ListAllPatientsController.html":{}},"body":{"controllers/ListAllPatientsController.html":{},"modules/PatientModule.html":{},"coverage.html":{}}}],["listallpatientsusecase",{"_index":456,"title":{"injectables/ListAllPatientsUseCase.html":{}},"body":{"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"modules/PatientModule.html":{},"coverage.html":{},"overview.html":{}}}],["listalluserscontroller",{"_index":467,"title":{"controllers/ListAllUsersController.html":{}},"body":{"controllers/ListAllUsersController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["listallusersusecase",{"_index":470,"title":{"injectables/ListAllUsersUseCase.html":{}},"body":{"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["listbyemail",{"_index":482,"title":{},"body":{"classes/ListPatientAbstractRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"injectables/ListUserConcreteRepository.html":{}}}],["listbyemail(email",{"_index":484,"title":{},"body":{"classes/ListPatientAbstractRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"injectables/ListUserConcreteRepository.html":{}}}],["listbyid",{"_index":483,"title":{},"body":{"classes/ListPatientAbstractRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"injectables/ListUserConcreteRepository.html":{}}}],["listbyid(id",{"_index":486,"title":{},"body":{"classes/ListPatientAbstractRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"injectables/ListUserConcreteRepository.html":{}}}],["listpatientabstractrepository",{"_index":209,"title":{"classes/ListPatientAbstractRepository.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"modules/PatientModule.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"coverage.html":{}}}],["listpatientbyemailcontroller",{"_index":487,"title":{"controllers/ListPatientByEmailController.html":{}},"body":{"controllers/ListPatientByEmailController.html":{},"modules/PatientModule.html":{},"coverage.html":{}}}],["listpatientbyemailusecase",{"_index":489,"title":{"injectables/ListPatientByEmailUseCase.html":{}},"body":{"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"modules/PatientModule.html":{},"coverage.html":{},"overview.html":{}}}],["listpatientbyidcontroller",{"_index":494,"title":{"controllers/ListPatientByIdController.html":{}},"body":{"controllers/ListPatientByIdController.html":{},"modules/PatientModule.html":{},"coverage.html":{}}}],["listpatientbyidusecase",{"_index":495,"title":{"injectables/ListPatientByIdUseCase.html":{}},"body":{"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"modules/PatientModule.html":{},"coverage.html":{},"overview.html":{}}}],["listpatientrepository",{"_index":312,"title":{},"body":{"injectables/DeletePatientUseCase.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["listpatientsconcreterepository",{"_index":498,"title":{"injectables/ListPatientsConcreteRepository.html":{}},"body":{"injectables/ListPatientsConcreteRepository.html":{},"modules/PatientModule.html":{},"coverage.html":{},"overview.html":{}}}],["listuserabstractrepository",{"_index":265,"title":{"classes/ListUserAbstractRepository.html":{}},"body":{"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListUserAbstractRepository.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["listuserbyemailbodyschema",{"_index":505,"title":{},"body":{"controllers/ListUserByEmailController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["listuserbyemailcontroller",{"_index":504,"title":{"controllers/ListUserByEmailController.html":{}},"body":{"controllers/ListUserByEmailController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["listuserbyemailusecase",{"_index":506,"title":{"injectables/ListUserByEmailUseCase.html":{}},"body":{"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["listuserbyidcontroller",{"_index":511,"title":{"controllers/ListUserByIdController.html":{}},"body":{"controllers/ListUserByIdController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["listuserbyidparamschema",{"_index":512,"title":{},"body":{"controllers/ListUserByIdController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["listuserbyidusecase",{"_index":514,"title":{"injectables/ListUserByIdUseCase.html":{}},"body":{"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["listuserconcreterepository",{"_index":517,"title":{"injectables/ListUserConcreteRepository.html":{}},"body":{"injectables/ListUserConcreteRepository.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["listusersabstractrepository",{"_index":476,"title":{},"body":{"injectables/ListAllUsersUseCase.html":{}}}],["listusersusecaseresponse",{"_index":477,"title":{},"body":{"injectables/ListAllUsersUseCase.html":{},"miscellaneous/typealiases.html":{}}}],["listuserusecaseresponse",{"_index":510,"title":{},"body":{"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"miscellaneous/typealiases.html":{}}}],["log",{"_index":665,"title":{},"body":{"injectables/PrismaService.html":{}}}],["make",{"_index":932,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["manager",{"_index":852,"title":{},"body":{"index.html":{}}}],["mapper",{"_index":129,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/ListUserConcreteRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["mapper.ts",{"_index":553,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/UserDataStructureMapper.html":{},"coverage.html":{}}}],["mapper.ts:21",{"_index":558,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/UserDataStructureMapper.html":{}}}],["mapper.ts:6",{"_index":738,"title":{},"body":{"classes/UserDataStructureMapper.html":{}}}],["mapper.ts:7",{"_index":562,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["mappers/patient",{"_index":128,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{}}}],["mappers/user",{"_index":242,"title":{},"body":{"injectables/CreateUserConcreteRepository.html":{},"injectables/ListUserConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["markaggregatefordispatch",{"_index":357,"title":{},"body":{"classes/DomainEvents.html":{}}}],["markaggregatefordispatch(aggregate",{"_index":375,"title":{},"body":{"classes/DomainEvents.html":{}}}],["markedaggregates",{"_index":350,"title":{},"body":{"classes/DomainEvents.html":{}}}],["matching",{"_index":59,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":170,"title":{},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UseCaseError.html":{},"classes/ZodPipeValidator.html":{}}}],["message.ts",{"_index":545,"title":{},"body":{"classes/PatientAlreadyExistsError.html":{},"classes/PatientsNotFound.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UsersNotFound.html":{},"coverage.html":{}}}],["message.ts:3",{"_index":547,"title":{},"body":{"classes/PatientAlreadyExistsError.html":{},"classes/PatientsNotFound.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UsersNotFound.html":{}}}],["messages/patient",{"_index":166,"title":{},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientAlreadyExistsError.html":{},"controllers/UpdatePatientController.html":{},"coverage.html":{}}}],["messages/patients",{"_index":292,"title":{},"body":{"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"classes/PatientsNotFound.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"coverage.html":{}}}],["messages/user",{"_index":254,"title":{},"body":{"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UsersNotFound.html":{},"coverage.html":{}}}],["metadata",{"_index":781,"title":{},"body":{"classes/ZodPipeValidator.html":{},"dependencies.html":{}}}],["metadata.type",{"_index":787,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["methods",{"_index":17,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"injectables/PrismaService.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"classes/ZodPipeValidator.html":{}}}],["miscellaneous",{"_index":846,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":881,"title":{},"body":{"index.html":{}}}],["mode",{"_index":870,"title":{},"body":{"index.html":{}}}],["module",{"_index":60,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":62,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":894,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":900,"title":{},"body":{"index.html":{}}}],["name",{"_index":38,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/ZodPipeValidator.html":{},"miscellaneous/variables.html":{}}}],["name(value",{"_index":613,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["nest",{"_index":880,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":904,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"modules/HttpModule.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"modules/PatientModule.html":{},"injectables/PrismaService.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"modules/UserModule.html":{},"classes/ZodPipeValidator.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":825,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":200,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"classes/Entity.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/Right.html":{},"controllers/UpdatePatientController.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{},"classes/ZodPipeValidator.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node:crypto",{"_index":686,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["notallowederror",{"_index":528,"title":{"classes/NotAllowedError.html":{}},"body":{"classes/NotAllowedError.html":{},"coverage.html":{}}}],["notfoundexception",{"_index":295,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{}}}],["notfoundexception(error",{"_index":304,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{}}}],["null",{"_index":145,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["number",{"_index":544,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["ocurredat",{"_index":342,"title":{},"body":{"interfaces/DomainEvent.html":{}}}],["onmoduledestroy",{"_index":660,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":661,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":883,"title":{},"body":{"index.html":{}}}],["optional",{"_index":39,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/ZodPipeValidator.html":{},"miscellaneous/typealiases.html":{}}}],["out",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":911,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":821,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":543,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["paginationparams",{"_index":540,"title":{"interfaces/PaginationParams.html":{}},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{}}}],["param",{"_index":296,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByIdController.html":{}}}],["parameters",{"_index":37,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"classes/ZodPipeValidator.html":{}}}],["params",{"_index":290,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByIdController.html":{}}}],["params.ts",{"_index":542,"title":{},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{}}}],["parsedvalue",{"_index":789,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["passport",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":255,"title":{},"body":{"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"interfaces/UpdateUserEntity.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{},"miscellaneous/variables.html":{}}}],["password(value",{"_index":759,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["patient",{"_index":95,"title":{},"body":{"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/PatientsNotFound.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"classes/UsersNotFound.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["patient.email",{"_index":578,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/PatientPresenter.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{}}}],["patient.id",{"_index":648,"title":{},"body":{"classes/PatientPresenter.html":{}}}],["patient.id.tostring",{"_index":576,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["patient.isactive",{"_index":580,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{}}}],["patient.name",{"_index":577,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/PatientPresenter.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{}}}],["patient.phone",{"_index":579,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/PatientPresenter.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{}}}],["patient_created",{"_index":203,"title":{},"body":{"controllers/CreatePatientController.html":{}}}],["patient_deleted",{"_index":306,"title":{},"body":{"controllers/DeletePatientController.html":{}}}],["patient_list",{"_index":459,"title":{},"body":{"controllers/ListAllPatientsController.html":{}}}],["patient_updated",{"_index":723,"title":{},"body":{"controllers/UpdatePatientController.html":{}}}],["patientalreadyexists",{"_index":221,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["patientalreadyexistserror",{"_index":164,"title":{"classes/PatientAlreadyExistsError.html":{}},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientAlreadyExistsError.html":{},"controllers/UpdatePatientController.html":{},"coverage.html":{}}}],["patientalreadyexistserror(email",{"_index":224,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["patientdatastructuremapper",{"_index":127,"title":{"classes/PatientDataStructureMapper.html":{}},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"coverage.html":{}}}],["patientdatastructuremapper.fromdomaintopersistance(patient",{"_index":135,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{}}}],["patientdatastructuremapper.frompersistancetodomain(patient",{"_index":143,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{}}}],["patientdatastructuremapper.frompersistancetodomain(patientupdated",{"_index":700,"title":{},"body":{"injectables/UpdateAndDeleteConcreteRepository.html":{}}}],["patientdatastructuremapper.frompersistancetodomain(result",{"_index":139,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{}}}],["patiententity",{"_index":100,"title":{"classes/PatientEntity.html":{}},"body":{"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"coverage.html":{}}}],["patiententity.create",{"_index":225,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["patientmodule",{"_index":433,"title":{"modules/PatientModule.html":{}},"body":{"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules.html":{},"overview.html":{}}}],["patientparamschema",{"_index":287,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/ListPatientByIdController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["patientpresenter",{"_index":175,"title":{"classes/PatientPresenter.html":{}},"body":{"controllers/CreatePatientController.html":{},"controllers/DeletePatientController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"classes/PatientPresenter.html":{},"controllers/UpdatePatientController.html":{},"coverage.html":{}}}],["patientpresenter.tohttp(patient",{"_index":307,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/ListPatientByIdController.html":{}}}],["patientpresenter.tohttp(patients",{"_index":491,"title":{},"body":{"controllers/ListPatientByEmailController.html":{}}}],["patientpresenter.tohttp(result.value.patient",{"_index":204,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/UpdatePatientController.html":{}}}],["patientprops",{"_index":610,"title":{"interfaces/PatientProps.html":{}},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"coverage.html":{}}}],["patientrepository",{"_index":463,"title":{},"body":{"injectables/ListAllPatientsUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{}}}],["patients",{"_index":140,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"modules/PatientModule.html":{},"controllers/UpdatePatientController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["patients.map((patient",{"_index":142,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{}}}],["patients.map(patientpresenter.tohttp",{"_index":460,"title":{},"body":{"controllers/ListAllPatientsController.html":{}}}],["patientsnotfound",{"_index":291,"title":{"classes/PatientsNotFound.html":{}},"body":{"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"classes/PatientsNotFound.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"coverage.html":{}}}],["patientupdated",{"_index":698,"title":{},"body":{"injectables/UpdateAndDeleteConcreteRepository.html":{}}}],["phone",{"_index":187,"title":{},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"miscellaneous/variables.html":{}}}],["phone(value",{"_index":617,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["pipe",{"_index":180,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{},"classes/ZodPipeValidator.html":{},"coverage.html":{}}}],["pipetransform",{"_index":775,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["please",{"_index":654,"title":{},"body":{"classes/PatientsNotFound.html":{},"classes/UsersNotFound.html":{},"index.html":{}}}],["pnpm",{"_index":864,"title":{},"body":{"index.html":{}}}],["port",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":173,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["post('create",{"_index":155,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{}}}],["post('list",{"_index":488,"title":{},"body":{"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{}}}],["post('update",{"_index":719,"title":{},"body":{"controllers/UpdatePatientController.html":{}}}],["prefix",{"_index":150,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["presenter",{"_index":177,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["presenter.ts",{"_index":644,"title":{},"body":{"classes/PatientPresenter.html":{},"classes/UserPresenter.html":{},"coverage.html":{}}}],["presenter.ts:4",{"_index":647,"title":{},"body":{"classes/PatientPresenter.html":{},"classes/UserPresenter.html":{}}}],["presenter/patient",{"_index":176,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/DeletePatientController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["presenter/user",{"_index":327,"title":{},"body":{"controllers/DeleteUserController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{}}}],["prisma",{"_index":116,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"classes/UserDataStructureMapper.html":{}}}],["prisma.patientuncheckedcreateinput",{"_index":559,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["prisma.useruncheckedcreateinput",{"_index":736,"title":{},"body":{"classes/UserDataStructureMapper.html":{}}}],["prisma/client",{"_index":564,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"injectables/PrismaService.html":{},"classes/UserDataStructureMapper.html":{},"dependencies.html":{}}}],["prisma/client/runtime/library",{"_index":609,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["prisma/service/prisma.service",{"_index":125,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/ListUserConcreteRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["prismaclient",{"_index":659,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismapatient",{"_index":561,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["prismaservice",{"_index":114,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"modules/DatabaseModule.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/ListUserConcreteRepository.html":{},"injectables/PrismaService.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"coverage.html":{},"overview.html":{}}}],["prismauser",{"_index":737,"title":{},"body":{"classes/UserDataStructureMapper.html":{}}}],["private",{"_index":12,"title":{},"body":{"classes/AggregateRoot.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"classes/PatientEntity.html":{},"classes/UniqueEntityID.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"classes/UserEntity.html":{}}}],["private_key",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":872,"title":{},"body":{"index.html":{}}}],["project",{"_index":884,"title":{},"body":{"index.html":{}}}],["promise",{"_index":102,"title":{},"body":{"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"classes/AggregateRoot.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"interfaces/PaginationParams.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"interfaces/UpdatePatientEntity.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{},"properties.html":{}}}],["property",{"_index":933,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["props",{"_index":16,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["props.createdat",{"_index":622,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["props.updatedat",{"_index":623,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["protected",{"_index":15,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["provide",{"_index":641,"title":{},"body":{"modules/PatientModule.html":{},"modules/UserModule.html":{}}}],["providers",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/PatientEntity.html":{},"classes/UniqueEntityID.html":{},"classes/UserEntity.html":{}}}],["public_key",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["r",{"_index":449,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"miscellaneous/variables.html":{}}}],["randomuuid",{"_index":685,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["raw",{"_index":563,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/UserDataStructureMapper.html":{}}}],["raw.createdat",{"_index":572,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/UserDataStructureMapper.html":{}}}],["raw.email",{"_index":568,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/UserDataStructureMapper.html":{}}}],["raw.isactive",{"_index":570,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/UserDataStructureMapper.html":{}}}],["raw.name",{"_index":567,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/UserDataStructureMapper.html":{}}}],["raw.password",{"_index":740,"title":{},"body":{"classes/UserDataStructureMapper.html":{}}}],["raw.phone",{"_index":569,"title":{},"body":{"classes/PatientDataStructureMapper.html":{}}}],["raw.roles",{"_index":741,"title":{},"body":{"classes/UserDataStructureMapper.html":{}}}],["raw.updatedat",{"_index":574,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/UserDataStructureMapper.html":{}}}],["read",{"_index":893,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":132,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/Right.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["record",{"_index":360,"title":{},"body":{"classes/DomainEvents.html":{}}}],["reflect",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":358,"title":{},"body":{"classes/DomainEvents.html":{}}}],["register(callback",{"_index":377,"title":{},"body":{"classes/DomainEvents.html":{}}}],["registered",{"_index":652,"title":{},"body":{"classes/PatientsNotFound.html":{},"classes/UsersNotFound.html":{}}}],["removeaggregatefrommarkeddispatchlist",{"_index":359,"title":{},"body":{"classes/DomainEvents.html":{}}}],["removeaggregatefrommarkeddispatchlist(aggregate",{"_index":382,"title":{},"body":{"classes/DomainEvents.html":{}}}],["repository",{"_index":124,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"modules/PatientModule.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"modules/UserModule.html":{}}}],["repository.ts",{"_index":96,"title":{},"body":{"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"classes/ListPatientAbstractRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"coverage.html":{}}}],["repository.ts:10",{"_index":115,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{}}}],["repository.ts:11",{"_index":521,"title":{},"body":{"injectables/ListUserConcreteRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["repository.ts:13",{"_index":117,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{}}}],["repository.ts:14",{"_index":695,"title":{},"body":{"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["repository.ts:21",{"_index":520,"title":{},"body":{"injectables/ListUserConcreteRepository.html":{}}}],["repository.ts:23",{"_index":118,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["repository.ts:31",{"_index":522,"title":{},"body":{"injectables/ListUserConcreteRepository.html":{}}}],["repository.ts:33",{"_index":121,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{}}}],["repository.ts:35",{"_index":500,"title":{},"body":{"injectables/ListPatientsConcreteRepository.html":{}}}],["repository.ts:4",{"_index":101,"title":{},"body":{"classes/CreatePatientAbstractRepository.html":{},"classes/CreateUserAbstractRepository.html":{},"classes/ListPatientAbstractRepository.html":{},"classes/ListUserAbstractRepository.html":{}}}],["repository.ts:5",{"_index":103,"title":{},"body":{"classes/CreatePatientAbstractRepository.html":{},"classes/ListPatientAbstractRepository.html":{},"classes/ListUserAbstractRepository.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{}}}],["repository.ts:6",{"_index":485,"title":{},"body":{"classes/ListPatientAbstractRepository.html":{},"classes/ListUserAbstractRepository.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{}}}],["repository.ts:8",{"_index":519,"title":{},"body":{"injectables/ListUserConcreteRepository.html":{}}}],["represents",{"_index":745,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["requirements",{"_index":859,"title":{},"body":{"index.html":{}}}],["reset",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resourcenotfounderror",{"_index":669,"title":{"classes/ResourceNotFoundError.html":{}},"body":{"classes/ResourceNotFoundError.html":{},"coverage.html":{}}}],["resources",{"_index":531,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/ResourceNotFoundError.html":{},"coverage.html":{}}}],["response",{"_index":319,"title":{},"body":{"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["result",{"_index":136,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["result.isleft",{"_index":196,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["result.value",{"_index":197,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["result.value.patient",{"_index":305,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{}}}],["result.value.user",{"_index":262,"title":{},"body":{"controllers/CreateUserController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{}}}],["result.value.users",{"_index":472,"title":{},"body":{"controllers/ListAllUsersController.html":{}}}],["results",{"_index":58,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":54,"title":{},"body":{"classes/AggregateRoot.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"injectables/PrismaService.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/ZodPipeValidator.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":40,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"injectables/PrismaService.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"classes/ZodPipeValidator.html":{}}}],["right",{"_index":215,"title":{"classes/Right.html":{}},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"classes/Left.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"classes/Right.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["right(value",{"_index":451,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":256,"title":{},"body":{"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"interfaces/UpdateUserEntity.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"miscellaneous/variables.html":{}}}],["roles(value",{"_index":761,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["root",{"_index":385,"title":{},"body":{"classes/DomainEvents.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["root.ts",{"_index":7,"title":{},"body":{"classes/AggregateRoot.html":{},"coverage.html":{}}}],["root.ts:12",{"_index":36,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["root.ts:17",{"_index":42,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["root.ts:6",{"_index":30,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["root.ts:8",{"_index":47,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["run",{"_index":862,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["security/auth/auth.module",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["service/prisma.service",{"_index":282,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["set",{"_index":612,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["setemail(value",{"_index":594,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["setisactive(value",{"_index":602,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["setname(value",{"_index":590,"title":{},"body":{"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["setpassword(value",{"_index":750,"title":{},"body":{"classes/UserEntity.html":{}}}],["setphone(value",{"_index":598,"title":{},"body":{"classes/PatientEntity.html":{}}}],["setroles(value",{"_index":754,"title":{},"body":{"classes/UserEntity.html":{}}}],["setupsubscriptions",{"_index":429,"title":{},"body":{"interfaces/EventHandler.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AggregateRoot.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"modules/DatabaseModule.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"interfaces/EventHandler.html":{},"modules/HttpModule.html":{},"classes/Left.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/NotAllowedError.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"modules/PatientModule.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/ResourceNotFoundError.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{},"index.html":{}}}],["sponsors",{"_index":887,"title":{},"body":{"index.html":{}}}],["src/.../create",{"_index":921,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../crete",{"_index":923,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../delete",{"_index":924,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../domain",{"_index":925,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../either.ts",{"_index":926,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../env.ts",{"_index":927,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../list",{"_index":922,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":848,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../optional.ts",{"_index":928,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../update",{"_index":930,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../updated",{"_index":929,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/core/configs/env.ts",{"_index":803,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/either.ts",{"_index":439,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/either.ts:13",{"_index":445,"title":{},"body":{"classes/Left.html":{}}}],["src/core/either.ts:20",{"_index":672,"title":{},"body":{"classes/Right.html":{}}}],["src/core/either.ts:26",{"_index":674,"title":{},"body":{"classes/Right.html":{}}}],["src/core/either.ts:3",{"_index":444,"title":{},"body":{"classes/Left.html":{}}}],["src/core/either.ts:30",{"_index":673,"title":{},"body":{"classes/Right.html":{}}}],["src/core/either.ts:9",{"_index":446,"title":{},"body":{"classes/Left.html":{}}}],["src/core/entities/aggregate",{"_index":6,"title":{},"body":{"classes/AggregateRoot.html":{},"coverage.html":{}}}],["src/core/entities/entity.ts",{"_index":412,"title":{},"body":{"classes/Entity.html":{},"coverage.html":{}}}],["src/core/entities/entity.ts:16",{"_index":418,"title":{},"body":{"classes/Entity.html":{}}}],["src/core/entities/entity.ts:4",{"_index":416,"title":{},"body":{"classes/Entity.html":{}}}],["src/core/entities/entity.ts:5",{"_index":417,"title":{},"body":{"classes/Entity.html":{}}}],["src/core/entities/entity.ts:7",{"_index":420,"title":{},"body":{"classes/Entity.html":{}}}],["src/core/entities/entity.ts:9",{"_index":414,"title":{},"body":{"classes/Entity.html":{}}}],["src/core/entities/unique",{"_index":675,"title":{},"body":{"classes/UniqueEntityID.html":{},"coverage.html":{}}}],["src/core/errors/shared",{"_index":529,"title":{},"body":{"classes/NotAllowedError.html":{},"classes/ResourceNotFoundError.html":{},"interfaces/UseCaseError.html":{},"coverage.html":{}}}],["src/core/events/domain",{"_index":340,"title":{},"body":{"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/events/event",{"_index":427,"title":{},"body":{"interfaces/EventHandler.html":{},"coverage.html":{}}}],["src/core/repositories/pagination/pagination",{"_index":541,"title":{},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{}}}],["src/core/types/optional.ts",{"_index":931,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/domain/patient/contracts/create",{"_index":94,"title":{},"body":{"classes/CreatePatientAbstractRepository.html":{},"coverage.html":{}}}],["src/domain/patient/contracts/list",{"_index":480,"title":{},"body":{"classes/ListPatientAbstractRepository.html":{},"coverage.html":{}}}],["src/domain/patient/contracts/update",{"_index":688,"title":{},"body":{"classes/UpdateAndDeleteAbstractRepository.html":{},"coverage.html":{}}}],["src/domain/patient/entities/patient",{"_index":581,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"coverage.html":{}}}],["src/domain/patient/entities/update",{"_index":724,"title":{},"body":{"interfaces/UpdatePatientEntity.html":{},"coverage.html":{}}}],["src/domain/patient/use",{"_index":205,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientsNotFound.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/domain/user/contracts/create",{"_index":233,"title":{},"body":{"classes/CreateUserAbstractRepository.html":{},"coverage.html":{}}}],["src/domain/user/contracts/list",{"_index":503,"title":{},"body":{"classes/ListUserAbstractRepository.html":{},"coverage.html":{}}}],["src/domain/user/contracts/update",{"_index":701,"title":{},"body":{"classes/UpdateAndDeleteUserAbstractRepository.html":{},"coverage.html":{}}}],["src/domain/user/entities/update",{"_index":731,"title":{},"body":{"interfaces/UpdateUserEntity.html":{},"coverage.html":{}}}],["src/domain/user/entities/user",{"_index":743,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserProps.html":{},"coverage.html":{}}}],["src/domain/user/use",{"_index":263,"title":{},"body":{"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UsersNotFound.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/infra/databases/mappers/patient",{"_index":552,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"coverage.html":{}}}],["src/infra/databases/mappers/user",{"_index":733,"title":{},"body":{"classes/UserDataStructureMapper.html":{},"coverage.html":{}}}],["src/infra/databases/prisma/database.module.ts",{"_index":281,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/infra/databases/prisma/service/prisma.service.ts",{"_index":658,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/infra/databases/prisma/service/prisma.service.ts:15",{"_index":663,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infra/databases/prisma/service/prisma.service.ts:18",{"_index":664,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infra/databases/prisma/service/prisma.service.ts:8",{"_index":662,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infra/databases/repositories/patient/create",{"_index":108,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"coverage.html":{}}}],["src/infra/databases/repositories/patient/list",{"_index":499,"title":{},"body":{"injectables/ListPatientsConcreteRepository.html":{},"coverage.html":{}}}],["src/infra/databases/repositories/patient/updated",{"_index":694,"title":{},"body":{"injectables/UpdateAndDeleteConcreteRepository.html":{},"coverage.html":{}}}],["src/infra/databases/repositories/user/create",{"_index":238,"title":{},"body":{"injectables/CreateUserConcreteRepository.html":{},"coverage.html":{}}}],["src/infra/databases/repositories/user/list",{"_index":518,"title":{},"body":{"injectables/ListUserConcreteRepository.html":{},"coverage.html":{}}}],["src/infra/databases/repositories/user/updated",{"_index":704,"title":{},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"coverage.html":{}}}],["src/infra/frameworks/nest/app.module.ts",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["src/infra/frameworks/nest/main.ts",{"_index":817,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infra/frameworks/security/auth/auth.module.ts",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infra/http/controllers/patient/actions/create",{"_index":148,"title":{},"body":{"controllers/CreatePatientController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/infra/http/controllers/patient/actions/delete",{"_index":284,"title":{},"body":{"controllers/DeletePatientController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/infra/http/controllers/patient/actions/list",{"_index":453,"title":{},"body":{"controllers/ListAllPatientsController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/infra/http/controllers/patient/actions/update",{"_index":717,"title":{},"body":{"controllers/UpdatePatientController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/infra/http/controllers/patient/patient.module.ts",{"_index":629,"title":{},"body":{"modules/PatientModule.html":{}}}],["src/infra/http/controllers/patient/presenter/patient",{"_index":643,"title":{},"body":{"classes/PatientPresenter.html":{},"coverage.html":{}}}],["src/infra/http/controllers/user/actions/crete",{"_index":247,"title":{},"body":{"controllers/CreateUserController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/infra/http/controllers/user/actions/delete",{"_index":322,"title":{},"body":{"controllers/DeleteUserController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/infra/http/controllers/user/actions/list",{"_index":468,"title":{},"body":{"controllers/ListAllUsersController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/infra/http/controllers/user/presenter/user",{"_index":770,"title":{},"body":{"classes/UserPresenter.html":{},"coverage.html":{}}}],["src/infra/http/controllers/user/user.module.ts",{"_index":765,"title":{},"body":{"modules/UserModule.html":{}}}],["src/infra/http/http.module.ts",{"_index":435,"title":{},"body":{"modules/HttpModule.html":{}}}],["src/infra/utils/pipes/zod",{"_index":773,"title":{},"body":{"classes/ZodPipeValidator.html":{},"coverage.html":{}}}],["start",{"_index":868,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":871,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":873,"title":{},"body":{"index.html":{}}}],["started",{"_index":850,"title":{"index.html":{}},"body":{}}],["statements",{"_index":802,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":348,"title":{},"body":{"classes/DomainEvents.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{}}}],["statuscode",{"_index":795,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["stay",{"_index":896,"title":{},"body":{"index.html":{}}}],["string",{"_index":120,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeletePatientUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"classes/DomainEvents.html":{},"classes/ListPatientAbstractRepository.html":{},"injectables/ListPatientByEmailUseCase.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["success",{"_index":448,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{}}}],["super",{"_index":649,"title":{},"body":{"classes/PatientsNotFound.html":{},"injectables/PrismaService.html":{},"classes/UsersNotFound.html":{}}}],["super('not",{"_index":539,"title":{},"body":{"classes/NotAllowedError.html":{}}}],["super('resource",{"_index":671,"title":{},"body":{"classes/ResourceNotFoundError.html":{}}}],["super(`patient",{"_index":551,"title":{},"body":{"classes/PatientAlreadyExistsError.html":{}}}],["super(`user",{"_index":732,"title":{},"body":{"classes/UserAlreadyExistsError.html":{}}}],["support",{"_index":888,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":907,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":198,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["table",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":876,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":879,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":878,"title":{},"body":{"index.html":{}}}],["tests",{"_index":875,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":886,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":668,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":667,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._domainevents",{"_index":55,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["this._domainevents.push(domainevent",{"_index":56,"title":{},"body":{"classes/AggregateRoot.html":{}}}],["this._id",{"_index":422,"title":{},"body":{"classes/Entity.html":{}}}],["this.createpatientabstractrepository.create(patient",{"_index":230,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["this.createpatientusecase.execute",{"_index":195,"title":{},"body":{"controllers/CreatePatientController.html":{}}}],["this.createuserabstractrepository.create(user",{"_index":276,"title":{},"body":{"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{}}}],["this.createuserusecase.execute",{"_index":260,"title":{},"body":{"controllers/CreateUserController.html":{}}}],["this.deletepatientusecase.execute(id",{"_index":303,"title":{},"body":{"controllers/DeletePatientController.html":{}}}],["this.deleteuserusecase.execute(id",{"_index":331,"title":{},"body":{"controllers/DeleteUserController.html":{}}}],["this.dispatch(event",{"_index":391,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.dispatchaggregateevents(aggregate",{"_index":399,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.findmarkedaggregatebyid(aggregate.id",{"_index":388,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.findmarkedaggregatebyid(id",{"_index":398,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.handlersmap",{"_index":403,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.handlersmap[eventclassname",{"_index":404,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.handlersmap[eventclassname].push(callback",{"_index":405,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.listallpatientsusecase.execute",{"_index":458,"title":{},"body":{"controllers/ListAllPatientsController.html":{}}}],["this.listallusersusecase.execute",{"_index":471,"title":{},"body":{"controllers/ListAllUsersController.html":{}}}],["this.listpatientabstractrepository.listbyemail(email",{"_index":222,"title":{},"body":{"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{}}}],["this.listpatientbyemailusecase.execute(email",{"_index":490,"title":{},"body":{"controllers/ListPatientByEmailController.html":{}}}],["this.listpatientbyidusecase.execute(id",{"_index":496,"title":{},"body":{"controllers/ListPatientByIdController.html":{}}}],["this.listpatientrepository.listbyid(id",{"_index":318,"title":{},"body":{"injectables/DeletePatientUseCase.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["this.listuserabstractrepository.listbyemail(email",{"_index":271,"title":{},"body":{"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/ListUserByEmailUseCase.html":{}}}],["this.listuserabstractrepository.listbyid(id",{"_index":338,"title":{},"body":{"injectables/DeleteUserUseCase.html":{},"injectables/ListUserByIdUseCase.html":{}}}],["this.listuserbyemailusecase.execute(email",{"_index":508,"title":{},"body":{"controllers/ListUserByEmailController.html":{}}}],["this.listuserbyidusecase.execute(id",{"_index":516,"title":{},"body":{"controllers/ListUserByIdController.html":{}}}],["this.listusersabstractrepository.listall",{"_index":479,"title":{},"body":{"injectables/ListAllUsersUseCase.html":{}}}],["this.markedaggregates",{"_index":406,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.markedaggregates.find((aggregate",{"_index":396,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.markedaggregates.findindex((a",{"_index":392,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.markedaggregates.push(aggregate",{"_index":389,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.markedaggregates.splice(index",{"_index":394,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.patientrepository.listall",{"_index":466,"title":{},"body":{"injectables/ListAllPatientsUseCase.html":{}}}],["this.patientrepository.listbyemail(email",{"_index":493,"title":{},"body":{"injectables/ListPatientByEmailUseCase.html":{}}}],["this.patientrepository.listbyid(id",{"_index":497,"title":{},"body":{"injectables/ListPatientByIdUseCase.html":{}}}],["this.prisma.patient.create",{"_index":138,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{}}}],["this.prisma.patient.delete",{"_index":697,"title":{},"body":{"injectables/UpdateAndDeleteConcreteRepository.html":{}}}],["this.prisma.patient.findfirst",{"_index":144,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{}}}],["this.prisma.patient.findmany",{"_index":141,"title":{},"body":{"injectables/CreatePatientConcreteRepository.html":{},"injectables/ListPatientsConcreteRepository.html":{}}}],["this.prisma.patient.findunique",{"_index":502,"title":{},"body":{"injectables/ListPatientsConcreteRepository.html":{}}}],["this.prisma.patient.update",{"_index":699,"title":{},"body":{"injectables/UpdateAndDeleteConcreteRepository.html":{}}}],["this.prisma.user.create",{"_index":244,"title":{},"body":{"injectables/CreateUserConcreteRepository.html":{}}}],["this.prisma.user.delete",{"_index":708,"title":{},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["this.prisma.user.findfirst",{"_index":524,"title":{},"body":{"injectables/ListUserConcreteRepository.html":{}}}],["this.prisma.user.findmany",{"_index":526,"title":{},"body":{"injectables/ListUserConcreteRepository.html":{}}}],["this.prisma.user.update",{"_index":710,"title":{},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["this.props",{"_index":423,"title":{},"body":{"classes/Entity.html":{}}}],["this.props.createdat",{"_index":620,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["this.props.email",{"_index":614,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["this.props.isactive",{"_index":618,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["this.props.name",{"_index":611,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["this.props.password",{"_index":758,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["this.props.phone",{"_index":616,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{}}}],["this.props.roles",{"_index":760,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["this.props.updatedat",{"_index":621,"title":{},"body":{"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["this.removeaggregatefrommarkeddispatchlist(aggregate",{"_index":401,"title":{},"body":{"classes/DomainEvents.html":{}}}],["this.updateanddeleteuserabstractrepository.delete(id",{"_index":339,"title":{},"body":{"injectables/DeleteUserUseCase.html":{}}}],["this.updatedanddeleterepository.delete(id",{"_index":320,"title":{},"body":{"injectables/DeletePatientUseCase.html":{}}}],["this.updatedanddeleterepository.update(patient",{"_index":730,"title":{},"body":{"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["this.updatepatientusecase.execute",{"_index":722,"title":{},"body":{"controllers/UpdatePatientController.html":{}}}],["this.value",{"_index":447,"title":{},"body":{"classes/Left.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{}}}],["this.zodschema.parse(value",{"_index":790,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["throw",{"_index":793,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["tohttp",{"_index":645,"title":{},"body":{"classes/PatientPresenter.html":{},"classes/UserPresenter.html":{}}}],["tohttp(patient",{"_index":646,"title":{},"body":{"classes/PatientPresenter.html":{}}}],["tohttp(user",{"_index":771,"title":{},"body":{"classes/UserPresenter.html":{}}}],["tostring",{"_index":677,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["touch",{"_index":897,"title":{},"body":{"index.html":{}}}],["tovalue",{"_index":678,"title":{},"body":{"classes/UniqueEntityID.html":{}}}],["transform",{"_index":776,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["transform(value",{"_index":780,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["true",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"classes/Entity.html":{},"classes/Left.html":{},"classes/Right.html":{}}}],["try",{"_index":655,"title":{},"body":{"classes/PatientsNotFound.html":{},"classes/UsersNotFound.html":{},"classes/ZodPipeValidator.html":{}}}],["twitter",{"_index":903,"title":{},"body":{"index.html":{}}}],["type",{"_index":24,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/CreatePatientAbstractRepository.html":{},"injectables/CreatePatientConcreteRepository.html":{},"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/Left.html":{},"injectables/ListAllPatientsUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListPatientAbstractRepository.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"injectables/ListPatientsConcreteRepository.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"interfaces/PaginationParams.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"classes/PatientPresenter.html":{},"interfaces/PatientProps.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"controllers/UpdatePatientController.html":{},"interfaces/UpdatePatientEntity.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"interfaces/UpdateUserEntity.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"classes/ZodPipeValidator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":919,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types/passport",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":374,"title":{},"body":{"classes/DomainEvents.html":{}}}],["unique",{"_index":421,"title":{},"body":{"classes/Entity.html":{}}}],["uniqueentityid",{"_index":31,"title":{"classes/UniqueEntityID.html":{}},"body":{"classes/AggregateRoot.html":{},"interfaces/DomainEvent.html":{},"classes/DomainEvents.html":{},"classes/Entity.html":{},"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UniqueEntityID.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{},"coverage.html":{}}}],["uniqueentityid(raw.id",{"_index":575,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/UserDataStructureMapper.html":{}}}],["unit",{"_index":874,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":158,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListAllPatientsController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["unlicensed",{"_index":918,"title":{},"body":{"properties.html":{}}}],["update",{"_index":689,"title":{},"body":{"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["update(patient",{"_index":691,"title":{},"body":{"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{}}}],["update(user",{"_index":705,"title":{},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["updateanddeleteabstractrepository",{"_index":310,"title":{"classes/UpdateAndDeleteAbstractRepository.html":{}},"body":{"injectables/DeletePatientUseCase.html":{},"modules/PatientModule.html":{},"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"coverage.html":{}}}],["updateanddeleteconcreterepository",{"_index":627,"title":{"injectables/UpdateAndDeleteConcreteRepository.html":{}},"body":{"modules/PatientModule.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["updateanddeleteuserabstractrepository",{"_index":335,"title":{"classes/UpdateAndDeleteUserAbstractRepository.html":{}},"body":{"injectables/DeleteUserUseCase.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["updateanddeleteuserconcreterepository",{"_index":703,"title":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{}},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["updatedanddeleterepository",{"_index":309,"title":{},"body":{"injectables/DeletePatientUseCase.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{}}}],["updatedat",{"_index":573,"title":{},"body":{"classes/PatientDataStructureMapper.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{}}}],["updatedpatientusecaseresponse",{"_index":729,"title":{},"body":{"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"miscellaneous/typealiases.html":{}}}],["updatepatientbodyschema",{"_index":718,"title":{},"body":{"controllers/UpdatePatientController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["updatepatientcontroller",{"_index":630,"title":{"controllers/UpdatePatientController.html":{}},"body":{"modules/PatientModule.html":{},"controllers/UpdatePatientController.html":{},"coverage.html":{}}}],["updatepatiententity",{"_index":692,"title":{"interfaces/UpdatePatientEntity.html":{}},"body":{"classes/UpdateAndDeleteAbstractRepository.html":{},"injectables/UpdateAndDeleteConcreteRepository.html":{},"interfaces/UpdatePatientEntity.html":{},"coverage.html":{}}}],["updatepatientusecase",{"_index":628,"title":{"injectables/UpdatePatientUseCase.html":{}},"body":{"modules/PatientModule.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"coverage.html":{},"overview.html":{}}}],["updatepatientusecaserequest",{"_index":727,"title":{"interfaces/UpdatePatientUseCaseRequest.html":{}},"body":{"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"coverage.html":{}}}],["updateuserentity",{"_index":702,"title":{"interfaces/UpdateUserEntity.html":{}},"body":{"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"interfaces/UpdateUserEntity.html":{},"coverage.html":{}}}],["use",{"_index":162,"title":{},"body":{"controllers/CreatePatientController.html":{},"injectables/CreatePatientUseCase.html":{},"interfaces/CreatePatientUseCaseRequest.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeletePatientController.html":{},"injectables/DeletePatientUseCase.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"controllers/ListAllPatientsController.html":{},"injectables/ListAllPatientsUseCase.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListPatientByEmailController.html":{},"injectables/ListPatientByEmailUseCase.html":{},"controllers/ListPatientByIdController.html":{},"injectables/ListPatientByIdUseCase.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"classes/NotAllowedError.html":{},"modules/PatientModule.html":{},"classes/ResourceNotFoundError.html":{},"controllers/UpdatePatientController.html":{},"injectables/UpdatePatientUseCase.html":{},"interfaces/UpdatePatientUseCaseRequest.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["usecaseerror",{"_index":535,"title":{"interfaces/UseCaseError.html":{}},"body":{"classes/NotAllowedError.html":{},"classes/PatientAlreadyExistsError.html":{},"classes/PatientsNotFound.html":{},"classes/ResourceNotFoundError.html":{},"interfaces/UseCaseError.html":{},"classes/UserAlreadyExistsError.html":{},"classes/UsersNotFound.html":{},"coverage.html":{}}}],["useclass",{"_index":642,"title":{},"body":{"modules/PatientModule.html":{},"modules/UserModule.html":{}}}],["usepipes",{"_index":174,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["usepipes(new",{"_index":192,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["user",{"_index":234,"title":{},"body":{"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListUserAbstractRepository.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"interfaces/UpdateUserEntity.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":712,"title":{},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserPresenter.html":{}}}],["user.id",{"_index":772,"title":{},"body":{"classes/UserPresenter.html":{}}}],["user.id.tostring",{"_index":742,"title":{},"body":{"classes/UserDataStructureMapper.html":{}}}],["user.isactive",{"_index":714,"title":{},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserPresenter.html":{}}}],["user.name",{"_index":711,"title":{},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserPresenter.html":{}}}],["user.password",{"_index":713,"title":{},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"classes/UserDataStructureMapper.html":{}}}],["user.roles",{"_index":715,"title":{},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserPresenter.html":{}}}],["user_created",{"_index":261,"title":{},"body":{"controllers/CreateUserController.html":{}}}],["user_deleted",{"_index":332,"title":{},"body":{"controllers/DeleteUserController.html":{}}}],["user_list",{"_index":478,"title":{},"body":{"injectables/ListAllUsersUseCase.html":{}}}],["user_updated",{"_index":709,"title":{},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["useralreadyexists",{"_index":270,"title":{},"body":{"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{}}}],["useralreadyexistserror",{"_index":253,"title":{"classes/UserAlreadyExistsError.html":{}},"body":{"controllers/CreateUserController.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"classes/UserAlreadyExistsError.html":{},"coverage.html":{}}}],["useralreadyexistserror(email",{"_index":272,"title":{},"body":{"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{}}}],["userdatastructuremapper",{"_index":241,"title":{"classes/UserDataStructureMapper.html":{}},"body":{"injectables/CreateUserConcreteRepository.html":{},"injectables/ListUserConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"classes/UserDataStructureMapper.html":{},"coverage.html":{}}}],["userdatastructuremapper.fromdomaintopersistance(patient",{"_index":243,"title":{},"body":{"injectables/CreateUserConcreteRepository.html":{}}}],["userdatastructuremapper.frompersistancetodomain(result",{"_index":245,"title":{},"body":{"injectables/CreateUserConcreteRepository.html":{}}}],["userdatastructuremapper.frompersistancetodomain(user",{"_index":525,"title":{},"body":{"injectables/ListUserConcreteRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["userdatastructuremapper.frompersistancetodomain(user_updated",{"_index":716,"title":{},"body":{"injectables/UpdateAndDeleteUserConcreteRepository.html":{}}}],["userentity",{"_index":235,"title":{"classes/UserEntity.html":{}},"body":{"classes/CreateUserAbstractRepository.html":{},"injectables/CreateUserConcreteRepository.html":{},"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"classes/ListUserAbstractRepository.html":{},"injectables/ListUserByEmailUseCase.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"classes/UpdateAndDeleteUserAbstractRepository.html":{},"injectables/UpdateAndDeleteUserConcreteRepository.html":{},"classes/UserDataStructureMapper.html":{},"classes/UserEntity.html":{},"classes/UserPresenter.html":{},"interfaces/UserProps.html":{},"coverage.html":{}}}],["userentity.create",{"_index":273,"title":{},"body":{"injectables/CreateUserUseCase.html":{},"interfaces/CreateUserUseCaseRequest.html":{}}}],["usermodule",{"_index":434,"title":{"modules/UserModule.html":{}},"body":{"modules/HttpModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userpresenter",{"_index":326,"title":{"classes/UserPresenter.html":{}},"body":{"controllers/DeleteUserController.html":{},"controllers/ListAllUsersController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"classes/UserPresenter.html":{},"coverage.html":{}}}],["userpresenter.tohttp(user",{"_index":333,"title":{},"body":{"controllers/DeleteUserController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{}}}],["userprops",{"_index":746,"title":{"interfaces/UserProps.html":{}},"body":{"classes/UserEntity.html":{},"interfaces/UserProps.html":{},"coverage.html":{}}}],["users",{"_index":248,"title":{},"body":{"controllers/CreateUserController.html":{},"controllers/ListAllUsersController.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"injectables/ListUserConcreteRepository.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["users.map((user",{"_index":527,"title":{},"body":{"injectables/ListUserConcreteRepository.html":{}}}],["users.map(userpresenter.tohttp",{"_index":474,"title":{},"body":{"controllers/ListAllUsersController.html":{}}}],["users_list",{"_index":473,"title":{},"body":{"controllers/ListAllUsersController.html":{}}}],["usersnotfound",{"_index":325,"title":{"classes/UsersNotFound.html":{}},"body":{"controllers/DeleteUserController.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/ListAllUsersUseCase.html":{},"controllers/ListUserByEmailController.html":{},"injectables/ListUserByEmailUseCase.html":{},"controllers/ListUserByIdController.html":{},"injectables/ListUserByIdUseCase.html":{},"classes/UsersNotFound.html":{},"coverage.html":{}}}],["validate",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["validation",{"_index":786,"title":{},"body":{"classes/ZodPipeValidator.html":{},"dependencies.html":{}}}],["validator",{"_index":181,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["validator.ts",{"_index":774,"title":{},"body":{"classes/ZodPipeValidator.html":{},"coverage.html":{}}}],["validator.ts:12",{"_index":783,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["validator.ts:9",{"_index":779,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["value",{"_index":28,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"classes/Left.html":{},"classes/PatientEntity.html":{},"interfaces/PatientProps.html":{},"classes/Right.html":{},"classes/UniqueEntityID.html":{},"classes/UserEntity.html":{},"interfaces/UserProps.html":{},"classes/ZodPipeValidator.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":804,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":934,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":916,"title":{},"body":{"properties.html":{}}}],["void",{"_index":41,"title":{},"body":{"classes/AggregateRoot.html":{},"classes/DomainEvents.html":{},"interfaces/EventHandler.html":{},"classes/PatientEntity.html":{},"classes/UserEntity.html":{}}}],["warn",{"_index":666,"title":{},"body":{"injectables/PrismaService.html":{}}}],["waseventregisteredbefore",{"_index":402,"title":{},"body":{"classes/DomainEvents.html":{}}}],["watch",{"_index":869,"title":{},"body":{"index.html":{}}}],["website",{"_index":901,"title":{},"body":{"index.html":{}}}],["yes",{"_index":415,"title":{},"body":{"classes/Entity.html":{},"classes/PatientEntity.html":{},"classes/UniqueEntityID.html":{},"classes/UserEntity.html":{}}}],["you'd",{"_index":891,"title":{},"body":{"index.html":{}}}],["z",{"_index":182,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{}}}],["z.array(z.string",{"_index":257,"title":{},"body":{"controllers/CreateUserController.html":{},"miscellaneous/variables.html":{}}}],["z.boolean",{"_index":189,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/UpdatePatientController.html":{},"miscellaneous/variables.html":{}}}],["z.infer",{"_index":190,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{},"miscellaneous/typealiases.html":{}}}],["z.object",{"_index":184,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{},"miscellaneous/variables.html":{}}}],["z.string",{"_index":185,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/UpdatePatientController.html":{},"miscellaneous/variables.html":{}}}],["z.string().cuid",{"_index":328,"title":{},"body":{"controllers/DeleteUserController.html":{},"controllers/ListUserByIdController.html":{},"miscellaneous/variables.html":{}}}],["z.string().default('1d",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().email",{"_index":186,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/UpdatePatientController.html":{},"miscellaneous/variables.html":{}}}],["z.string().url",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().uuid",{"_index":299,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{},"miscellaneous/variables.html":{}}}],["zod",{"_index":183,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{},"classes/ZodPipeValidator.html":{},"dependencies.html":{}}}],["zoderror",{"_index":784,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["zodpipevalidator",{"_index":178,"title":{"classes/ZodPipeValidator.html":{}},"body":{"controllers/CreatePatientController.html":{},"controllers/CreateUserController.html":{},"controllers/DeletePatientController.html":{},"controllers/DeleteUserController.html":{},"controllers/ListPatientByEmailController.html":{},"controllers/ListPatientByIdController.html":{},"controllers/ListUserByEmailController.html":{},"controllers/ListUserByIdController.html":{},"controllers/UpdatePatientController.html":{},"classes/ZodPipeValidator.html":{},"coverage.html":{}}}],["zodpipevalidator(createpatientbodyschema",{"_index":193,"title":{},"body":{"controllers/CreatePatientController.html":{},"controllers/ListPatientByEmailController.html":{}}}],["zodpipevalidator(createuserbodyschema",{"_index":259,"title":{},"body":{"controllers/CreateUserController.html":{}}}],["zodpipevalidator(deleteuserparamschema",{"_index":330,"title":{},"body":{"controllers/DeleteUserController.html":{}}}],["zodpipevalidator(listuserbyemailbodyschema",{"_index":507,"title":{},"body":{"controllers/ListUserByEmailController.html":{}}}],["zodpipevalidator(listuserbyidparamschema",{"_index":515,"title":{},"body":{"controllers/ListUserByIdController.html":{}}}],["zodpipevalidator(patientparamschema",{"_index":301,"title":{},"body":{"controllers/DeletePatientController.html":{},"controllers/ListPatientByIdController.html":{}}}],["zodpipevalidator(updatepatientbodyschema",{"_index":721,"title":{},"body":{"controllers/UpdatePatientController.html":{}}}],["zodschema",{"_index":778,"title":{},"body":{"classes/ZodPipeValidator.html":{}}}],["zoom",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/HttpModule.html":{},"modules/PatientModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AggregateRoot.html":{"url":"classes/AggregateRoot.html","title":"class - AggregateRoot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AggregateRoot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/aggregate-root.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Entity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _domainEvents\n                            \n                            \n                                    Private\n                                _id\n                            \n                            \n                                    Protected\n                                props\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                addDomainEvent\n                            \n                            \n                                    Public\n                                clearEvents\n                            \n                            \n                                    Public\n                                equals\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    domainEvents\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _domainEvents\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DomainEvent[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/core/entities/aggregate-root.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UniqueEntityID\n\n                    \n                \n                        \n                            \n                                Inherited from         Entity\n\n                            \n                        \n                    \n                        \n                                Defined in         Entity:4\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Props\n\n                    \n                \n                        \n                            \n                                Inherited from         Entity\n\n                            \n                        \n                    \n                        \n                                Defined in         Entity:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        addDomainEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    addDomainEvent(domainEvent: DomainEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/entities/aggregate-root.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                domainEvent\n                                            \n                                                            DomainEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearEvents()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/entities/aggregate-root.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        equals\n                        \n                    \n                \n            \n            \n                \n                        \n                    equals(entity: Entity)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Entity\n\n                        \n                    \n                    \n                        \n                                Defined in         Entity:16\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            Entity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        domainEvents\n                    \n                \n\n                \n                    \n                        getdomainEvents()\n                    \n                \n                            \n                                \n                                    Defined in src/core/entities/aggregate-root.ts:8\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DomainEvent } from '../events/domain-event';\nimport { DomainEvents } from '../events/domain-events';\nimport { Entity } from './entity';\n\nexport abstract class AggregateRoot extends Entity {\n  private _domainEvents: DomainEvent[] = [];\n\n  get domainEvents(): DomainEvent[] {\n    return this._domainEvents;\n  }\n\n  protected addDomainEvent(domainEvent: DomainEvent): void {\n    this._domainEvents.push(domainEvent);\n    DomainEvents.markAggregateForDispatch(this);\n  }\n\n  public clearEvents() {\n    this._domainEvents = [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHttpModule\n\nHttpModule\n\nAppModule -->\n\nHttpModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/frameworks/nest/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            HttpModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { envSchema } from '@/core/configs/env';\nimport { HttpModule } from '@/infra/http/http.module';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthModule } from '../security/auth/auth.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validate: (env) => envSchema.parse(env),\n      isGlobal: true,\n    }),\n    AuthModule,\n    HttpModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/frameworks/security/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\n@Module({})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePatientAbstractRepository.html":{"url":"classes/CreatePatientAbstractRepository.html","title":"class - CreatePatientAbstractRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePatientAbstractRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/contracts/create-patient-abstract-repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                create\n                            \n                            \n                                    Abstract\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(patient: PatientEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/contracts/create-patient-abstract-repository.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patient\n                                            \n                                                            PatientEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/contracts/create-patient-abstract-repository.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PatientEntity } from '../entities/patient-entity';\n\nexport abstract class CreatePatientAbstractRepository {\n  abstract create(patient: PatientEntity): Promise;\n  abstract findAll(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreatePatientConcreteRepository.html":{"url":"injectables/CreatePatientConcreteRepository.html","title":"injectable - CreatePatientConcreteRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreatePatientConcreteRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/databases/repositories/patient/create-patient-concrete-repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/databases/repositories/patient/create-patient-concrete-repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(patient: PatientEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/patient/create-patient-concrete-repository.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patient\n                                            \n                                                            PatientEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/patient/create-patient-concrete-repository.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/patient/create-patient-concrete-repository.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreatePatientAbstractRepository } from '@/domain/patient/contracts/create-patient-abstract-repository';\nimport { PrismaService } from '../../prisma/service/prisma.service';\nimport { PatientEntity } from '@/domain/patient/entities/patient-entity';\nimport { PatientDataStructureMapper } from '../../mappers/patient-mapper';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class CreatePatientConcreteRepository\n  implements CreatePatientAbstractRepository\n{\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(patient: PatientEntity): Promise {\n    const data = PatientDataStructureMapper.fromDomainToPersistance(patient);\n\n    const result = await this.prisma.patient.create({\n      data,\n    });\n\n    return PatientDataStructureMapper.fromPersistanceToDomain(result);\n  }\n\n  async findAll(): Promise {\n    const patients = await this.prisma.patient.findMany();\n\n    return patients\n      ? patients.map((patient) =>\n          PatientDataStructureMapper.fromPersistanceToDomain(patient),\n        )\n      : [];\n  }\n\n  async findByEmail(email: string): Promise {\n    const patient = await this.prisma.patient.findFirst({\n      where: {\n        email: email,\n      },\n    });\n\n    return patient\n      ? PatientDataStructureMapper.fromPersistanceToDomain(patient)\n      : null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CreatePatientController.html":{"url":"controllers/CreatePatientController.html","title":"controller - CreatePatientController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CreatePatientController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/patient/actions/create-patient-controller.ts\n        \n\n            \n                Prefix\n            \n            \n                patients\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handle\n                        \n                    \n                \n            \n            \n                \n                        \n                    handle(body: CreatePatientBodySchema)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/infra/http/controllers/patient/actions/create-patient-controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            CreatePatientBodySchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { CreatePatientUseCase } from '@/domain/patient/use-cases/create-patient-use-case';\nimport { PatientAlreadyExistsError } from '@/domain/patient/use-cases/error-messages/patient-already-exists-error-message';\nimport {\n  BadRequestException,\n  Body,\n  ConflictException,\n  Controller,\n  Post,\n  UsePipes,\n} from '@nestjs/common';\nimport { PatientPresenter } from '../presenter/patient-data-presenter';\nimport { ZodPipeValidator } from '@/infra/utils/pipes/zod-pipe-validator';\nimport { z } from 'zod';\n\nconst createPatientBodySchema = z.object({\n  name: z.string(),\n  email: z.string().email(),\n  phone: z.string(),\n  isActive: z.boolean(),\n});\n\ntype CreatePatientBodySchema = z.infer;\n\n@Controller('patients')\n@UsePipes(new ZodPipeValidator(createPatientBodySchema))\nexport class CreatePatientController {\n  constructor(private readonly createPatientUseCase: CreatePatientUseCase) {}\n\n  @Post('create')\n  async handle(@Body() body: CreatePatientBodySchema) {\n    const { name, email, phone, isActive } = body;\n\n    const result = await this.createPatientUseCase.execute({\n      name,\n      email,\n      phone,\n      isActive,\n    });\n\n    if (result.isLeft()) {\n      const error = result.value;\n\n      switch (error.constructor) {\n        case PatientAlreadyExistsError:\n          return new ConflictException(error);\n        default:\n          return new BadRequestException(error.message);\n      }\n    }\n    return { patient_created: PatientPresenter.toHttp(result.value.patient) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreatePatientUseCase.html":{"url":"injectables/CreatePatientUseCase.html","title":"injectable - CreatePatientUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreatePatientUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/use-cases/create-patient-use-case.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createPatientAbstractRepository: CreatePatientAbstractRepository, listPatientAbstractRepository: ListPatientAbstractRepository)\n                    \n                \n                        \n                            \n                                Defined in src/domain/patient/use-cases/create-patient-use-case.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createPatientAbstractRepository\n                                                  \n                                                        \n                                                                        CreatePatientAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        listPatientAbstractRepository\n                                                  \n                                                        \n                                                                        ListPatientAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(data: CreatePatientUseCaseRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/use-cases/create-patient-use-case.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreatePatientUseCaseRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Either, left, right } from '@/core/either';\nimport { CreatePatientAbstractRepository } from '../contracts/create-patient-abstract-repository';\nimport { PatientEntity } from '../entities/patient-entity';\nimport { PatientAlreadyExistsError } from './error-messages/patient-already-exists-error-message';\nimport { Injectable } from '@nestjs/common';\nimport { ListPatientAbstractRepository } from '../contracts/list-patient-abstract-repository';\n\ninterface CreatePatientUseCaseRequest {\n  name: string;\n  email: string;\n  phone: string;\n  isActive: boolean;\n}\n\ntype createPatientUseCaseResponse = Either;\n\n@Injectable()\nexport class CreatePatientUseCase {\n  constructor(\n    private readonly createPatientAbstractRepository: CreatePatientAbstractRepository,\n    private readonly listPatientAbstractRepository: ListPatientAbstractRepository,\n  ) {}\n\n  async execute(\n    data: CreatePatientUseCaseRequest,\n  ): Promise {\n    const { email } = data;\n\n    const patientAlreadyExists =\n      await this.listPatientAbstractRepository.listByEmail(email);\n\n    if (patientAlreadyExists) {\n      return left(new PatientAlreadyExistsError(email));\n    }\n\n    const patient = PatientEntity.create({\n      name: data.name,\n      email: data.email,\n      phone: data.phone,\n      isActive: data.isActive,\n    });\n\n    const result = await this.createPatientAbstractRepository.create(patient);\n\n    return right({ patient: result });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreatePatientUseCaseRequest.html":{"url":"interfaces/CreatePatientUseCaseRequest.html","title":"interface - CreatePatientUseCaseRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreatePatientUseCaseRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/use-cases/create-patient-use-case.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Either, left, right } from '@/core/either';\nimport { CreatePatientAbstractRepository } from '../contracts/create-patient-abstract-repository';\nimport { PatientEntity } from '../entities/patient-entity';\nimport { PatientAlreadyExistsError } from './error-messages/patient-already-exists-error-message';\nimport { Injectable } from '@nestjs/common';\nimport { ListPatientAbstractRepository } from '../contracts/list-patient-abstract-repository';\n\ninterface CreatePatientUseCaseRequest {\n  name: string;\n  email: string;\n  phone: string;\n  isActive: boolean;\n}\n\ntype createPatientUseCaseResponse = Either;\n\n@Injectable()\nexport class CreatePatientUseCase {\n  constructor(\n    private readonly createPatientAbstractRepository: CreatePatientAbstractRepository,\n    private readonly listPatientAbstractRepository: ListPatientAbstractRepository,\n  ) {}\n\n  async execute(\n    data: CreatePatientUseCaseRequest,\n  ): Promise {\n    const { email } = data;\n\n    const patientAlreadyExists =\n      await this.listPatientAbstractRepository.listByEmail(email);\n\n    if (patientAlreadyExists) {\n      return left(new PatientAlreadyExistsError(email));\n    }\n\n    const patient = PatientEntity.create({\n      name: data.name,\n      email: data.email,\n      phone: data.phone,\n      isActive: data.isActive,\n    });\n\n    const result = await this.createPatientAbstractRepository.create(patient);\n\n    return right({ patient: result });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserAbstractRepository.html":{"url":"classes/CreateUserAbstractRepository.html","title":"class - CreateUserAbstractRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserAbstractRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/contracts/create-user-abstract-repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(patient: UserEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/user/contracts/create-user-abstract-repository.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patient\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserEntity } from '../entities/user-entity';\n\nexport abstract class CreateUserAbstractRepository {\n  abstract create(patient: UserEntity): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserConcreteRepository.html":{"url":"injectables/CreateUserConcreteRepository.html","title":"injectable - CreateUserConcreteRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserConcreteRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/databases/repositories/user/create-user-concrete-repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/databases/repositories/user/create-user-concrete-repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(patient: UserEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/user/create-user-concrete-repository.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patient\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserAbstractRepository } from '@/domain/user/contracts/create-user-abstract-repository';\nimport { UserEntity } from '@/domain/user/entities/user-entity';\nimport { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../prisma/service/prisma.service';\nimport { UserDataStructureMapper } from '../../mappers/user-mapper';\n\n@Injectable()\nexport class CreateUserConcreteRepository\n  implements CreateUserAbstractRepository\n{\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(patient: UserEntity): Promise {\n    const data = UserDataStructureMapper.fromDomainToPersistance(patient);\n\n    const result = await this.prisma.user.create({ data });\n\n    return UserDataStructureMapper.fromPersistanceToDomain(result);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CreateUserController.html":{"url":"controllers/CreateUserController.html","title":"controller - CreateUserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CreateUserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/user/actions/crete-user-controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handle\n                        \n                    \n                \n            \n            \n                \n                        \n                    handle(body: CreateUserBodySchema)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/infra/http/controllers/user/actions/crete-user-controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            CreateUserBodySchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { CreateUserUseCase } from '@/domain/user/use-cases/create-user-use-case';\nimport { UserAlreadyExistsError } from '@/domain/user/use-cases/error-messages/user-already-exists-error-message';\nimport { ZodPipeValidator } from '@/infra/utils/pipes/zod-pipe-validator';\nimport {\n  BadRequestException,\n  Body,\n  ConflictException,\n  Controller,\n  Post,\n  UsePipes,\n} from '@nestjs/common';\nimport { z } from 'zod';\n\nconst createUserBodySchema = z.object({\n  name: z.string(),\n  email: z.string().email(),\n  password: z.string(),\n  roles: z.array(z.string()),\n});\n\ntype CreateUserBodySchema = z.infer;\n\n@Controller('users')\n@UsePipes(new ZodPipeValidator(createUserBodySchema))\nexport class CreateUserController {\n  constructor(private readonly createUserUseCase: CreateUserUseCase) {}\n\n  @Post('create')\n  async handle(@Body() body: CreateUserBodySchema) {\n    const { name, email, password, roles } = body;\n\n    const result = await this.createUserUseCase.execute({\n      name,\n      email,\n      password,\n      roles,\n    });\n\n    if (result.isLeft()) {\n      const error = result.value;\n\n      switch (error.constructor) {\n        case UserAlreadyExistsError:\n          return new ConflictException(error);\n        default:\n          return new BadRequestException(error.message);\n      }\n    }\n\n    return { user_created: result.value.user };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserUseCase.html":{"url":"injectables/CreateUserUseCase.html","title":"injectable - CreateUserUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/use-cases/create-user-use-case.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createUserAbstractRepository: CreateUserAbstractRepository, listUserAbstractRepository: ListUserAbstractRepository)\n                    \n                \n                        \n                            \n                                Defined in src/domain/user/use-cases/create-user-use-case.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createUserAbstractRepository\n                                                  \n                                                        \n                                                                        CreateUserAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        listUserAbstractRepository\n                                                  \n                                                        \n                                                                        ListUserAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(data: CreateUserUseCaseRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/user/use-cases/create-user-use-case.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateUserUseCaseRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Either, left, right } from '@/core/either';\nimport { Injectable } from '@nestjs/common';\nimport { UserAlreadyExistsError } from './error-messages/user-already-exists-error-message';\nimport { UserEntity } from '../entities/user-entity';\nimport { CreateUserAbstractRepository } from '../contracts/create-user-abstract-repository';\nimport { ListUserAbstractRepository } from '../contracts/list-user-abstract-repository';\n\ninterface CreateUserUseCaseRequest {\n  name: string;\n  email: string;\n  password: string;\n  roles: string[];\n}\n\ntype createUserUseCaseResponse = Either;\n\n@Injectable()\nexport class CreateUserUseCase {\n  constructor(\n    private readonly createUserAbstractRepository: CreateUserAbstractRepository,\n    private readonly listUserAbstractRepository: ListUserAbstractRepository,\n  ) {}\n\n  async execute(\n    data: CreateUserUseCaseRequest,\n  ): Promise {\n    const { email } = data;\n\n    const userAlreadyExists =\n      await this.listUserAbstractRepository.listByEmail(email);\n\n    if (userAlreadyExists) return left(new UserAlreadyExistsError(email));\n\n    const user = UserEntity.create({\n      name: data.name,\n      email: data.email,\n      password: data.password,\n      isActive: true,\n      roles: data.roles,\n    });\n\n    const result = await this.createUserAbstractRepository.create(user);\n\n    return right({ user: result });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateUserUseCaseRequest.html":{"url":"interfaces/CreateUserUseCaseRequest.html","title":"interface - CreateUserUseCaseRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateUserUseCaseRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/use-cases/create-user-use-case.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Either, left, right } from '@/core/either';\nimport { Injectable } from '@nestjs/common';\nimport { UserAlreadyExistsError } from './error-messages/user-already-exists-error-message';\nimport { UserEntity } from '../entities/user-entity';\nimport { CreateUserAbstractRepository } from '../contracts/create-user-abstract-repository';\nimport { ListUserAbstractRepository } from '../contracts/list-user-abstract-repository';\n\ninterface CreateUserUseCaseRequest {\n  name: string;\n  email: string;\n  password: string;\n  roles: string[];\n}\n\ntype createUserUseCaseResponse = Either;\n\n@Injectable()\nexport class CreateUserUseCase {\n  constructor(\n    private readonly createUserAbstractRepository: CreateUserAbstractRepository,\n    private readonly listUserAbstractRepository: ListUserAbstractRepository,\n  ) {}\n\n  async execute(\n    data: CreateUserUseCaseRequest,\n  ): Promise {\n    const { email } = data;\n\n    const userAlreadyExists =\n      await this.listUserAbstractRepository.listByEmail(email);\n\n    if (userAlreadyExists) return left(new UserAlreadyExistsError(email));\n\n    const user = UserEntity.create({\n      name: data.name,\n      email: data.email,\n      password: data.password,\n      isActive: true,\n      roles: data.roles,\n    });\n\n    const result = await this.createUserAbstractRepository.create(user);\n\n    return right({ user: result });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nPrismaService  -->\n\nDatabaseModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDatabaseModule -->\n\nPrismaService->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/databases/prisma/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './service/prisma.service';\n\n@Module({\n  imports: [],\n  controllers: [],\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DeletePatientController.html":{"url":"controllers/DeletePatientController.html","title":"controller - DeletePatientController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DeletePatientController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/patient/actions/delete-patient-by-id-controller.ts\n        \n\n            \n                Prefix\n            \n            \n                patient\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handle\n                        \n                    \n                \n            \n            \n                \n                        \n                    handle(params: PatientParamSchema)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/infra/http/controllers/patient/actions/delete-patient-by-id-controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            PatientParamSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { PatientsNotFound } from '@/domain/patient/use-cases/error-messages/patients-not-found-error-message';\nimport {\n  BadRequestException,\n  Controller,\n  Delete,\n  NotFoundException,\n  Param,\n  UsePipes,\n} from '@nestjs/common';\nimport { PatientPresenter } from '../presenter/patient-data-presenter';\nimport { ZodPipeValidator } from '@/infra/utils/pipes/zod-pipe-validator';\nimport { z } from 'zod';\nimport { DeletePatientUseCase } from '@/domain/patient/use-cases/delete-patient-use-case';\n\nconst patientParamSchema = z.object({\n  id: z.string().uuid(),\n});\n\ntype PatientParamSchema = z.infer;\n\n@Controller('patient')\n@UsePipes(new ZodPipeValidator(patientParamSchema))\nexport class DeletePatientController {\n  constructor(private readonly deletePatientUseCase: DeletePatientUseCase) {}\n\n  @Delete('delete/:id')\n  async handle(@Param() params: PatientParamSchema) {\n    const { id } = params;\n    const result = await this.deletePatientUseCase.execute(id);\n\n    if (result.isLeft()) {\n      const error = result.value;\n\n      switch (error.constructor) {\n        case PatientsNotFound:\n          return new NotFoundException(error);\n        default:\n          return new BadRequestException(error.message);\n      }\n    }\n\n    const patient = result.value.patient;\n\n    return { patient_deleted: PatientPresenter.toHttp(patient) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeletePatientUseCase.html":{"url":"injectables/DeletePatientUseCase.html","title":"injectable - DeletePatientUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DeletePatientUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/use-cases/delete-patient-use-case.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(listPatientRepository: ListPatientAbstractRepository, updatedAndDeleteRepository: UpdateAndDeleteAbstractRepository)\n                    \n                \n                        \n                            \n                                Defined in src/domain/patient/use-cases/delete-patient-use-case.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        listPatientRepository\n                                                  \n                                                        \n                                                                        ListPatientAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updatedAndDeleteRepository\n                                                  \n                                                        \n                                                                        UpdateAndDeleteAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/use-cases/delete-patient-use-case.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UpdateAndDeleteAbstractRepository } from '../contracts/update-and-delete-abstract-repository';\nimport { ListPatientAbstractRepository } from '../contracts/list-patient-abstract-repository';\nimport { Either, left, right } from '@/core/either';\nimport { PatientsNotFound } from './error-messages/patients-not-found-error-message';\nimport { PatientEntity } from '../entities/patient-entity';\n\ntype deletePatientUseCaseResponse = Either;\n\n@Injectable()\nexport class DeletePatientUseCase {\n  constructor(\n    private readonly listPatientRepository: ListPatientAbstractRepository,\n    private readonly updatedAndDeleteRepository: UpdateAndDeleteAbstractRepository,\n  ) {}\n\n  async execute(id: string): Promise {\n    const isPatientExist = await this.listPatientRepository.listById(id);\n\n    if (!isPatientExist) {\n      return left(new PatientsNotFound());\n    }\n\n    const response = await this.updatedAndDeleteRepository.delete(id);\n\n    return right({ patient: response });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DeleteUserController.html":{"url":"controllers/DeleteUserController.html","title":"controller - DeleteUserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DeleteUserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/user/actions/delete-user-by-id-controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handle\n                        \n                    \n                \n            \n            \n                \n                        \n                    handle(params: DeleteUserParamSchema)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/infra/http/controllers/user/actions/delete-user-by-id-controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            DeleteUserParamSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Controller,\n  Delete,\n  NotFoundException,\n  Param,\n  UsePipes,\n} from '@nestjs/common';\nimport { ZodPipeValidator } from '@/infra/utils/pipes/zod-pipe-validator';\nimport { z } from 'zod';\nimport { DeleteUserUseCase } from '@/domain/user/use-cases/delete-user-use-case';\nimport { UsersNotFound } from '@/domain/user/use-cases/error-messages/user-not-found-error-message';\nimport { UserPresenter } from '../presenter/user-data-presenter';\n\nconst deleteUserParamSchema = z.object({\n  id: z.string().uuid() || z.string().cuid(),\n});\n\ntype DeleteUserParamSchema = z.infer;\n\n@Controller('user')\n@UsePipes(new ZodPipeValidator(deleteUserParamSchema))\nexport class DeleteUserController {\n  constructor(private readonly deleteUserUseCase: DeleteUserUseCase) {}\n\n  @Delete('delete/:id')\n  async handle(@Param() params: DeleteUserParamSchema) {\n    const { id } = params;\n    const result = await this.deleteUserUseCase.execute(id);\n\n    if (result.isLeft()) {\n      const error = result.value;\n\n      switch (error.constructor) {\n        case UsersNotFound:\n          return new NotFoundException(error);\n        default:\n          return new BadRequestException(error.message);\n      }\n    }\n\n    const user = result.value.user;\n\n    return { user_deleted: UserPresenter.toHttp(user) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeleteUserUseCase.html":{"url":"injectables/DeleteUserUseCase.html","title":"injectable - DeleteUserUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DeleteUserUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/use-cases/delete-user-use-case.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(listUserAbstractRepository: ListUserAbstractRepository, updateAndDeleteUserAbstractRepository: UpdateAndDeleteUserAbstractRepository)\n                    \n                \n                        \n                            \n                                Defined in src/domain/user/use-cases/delete-user-use-case.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        listUserAbstractRepository\n                                                  \n                                                        \n                                                                        ListUserAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateAndDeleteUserAbstractRepository\n                                                  \n                                                        \n                                                                        UpdateAndDeleteUserAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/user/use-cases/delete-user-use-case.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Either, left, right } from '@/core/either';\nimport { UsersNotFound } from './error-messages/user-not-found-error-message';\nimport { UserEntity } from '../entities/user-entity';\nimport { UpdateAndDeleteUserAbstractRepository } from '../contracts/update-and-delete-user-abstract-repository';\nimport { ListUserAbstractRepository } from '../contracts/list-user-abstract-repository';\n\ntype deleteUserUseCaseResponse = Either;\n\n@Injectable()\nexport class DeleteUserUseCase {\n  constructor(\n    private readonly listUserAbstractRepository: ListUserAbstractRepository,\n    private readonly updateAndDeleteUserAbstractRepository: UpdateAndDeleteUserAbstractRepository,\n  ) {}\n\n  async execute(id: string): Promise {\n    const isUserExists = await this.listUserAbstractRepository.listById(id);\n\n    if (!isUserExists) {\n      return left(new UsersNotFound());\n    }\n\n    const response =\n      await this.updateAndDeleteUserAbstractRepository.delete(id);\n\n    return right({ user: response });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DomainEvent.html":{"url":"interfaces/DomainEvent.html","title":"interface - DomainEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DomainEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/events/domain-event.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ocurredAt\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getAggregateId\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAggregateId\n                        \n                    \n                \n            \n            \n                \ngetAggregateId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-event.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         UniqueEntityID\n\n                        \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ocurredAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ocurredAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UniqueEntityID } from '../entities/unique-entity-id';\n\nexport interface DomainEvent {\n  ocurredAt: Date;\n  getAggregateId(): UniqueEntityID;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DomainEvents.html":{"url":"classes/DomainEvents.html","title":"class - DomainEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DomainEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/events/domain-events.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                handlersMap\n                            \n                            \n                                    Private\n                                    Static\n                                markedAggregates\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                clearHandlers\n                            \n                            \n                                    Static\n                                clearMarkedAggregates\n                            \n                            \n                                    Private\n                                    Static\n                                dispatch\n                            \n                            \n                                    Private\n                                    Static\n                                dispatchAggregateEvents\n                            \n                            \n                                    Static\n                                dispatchEventsForAggregate\n                            \n                            \n                                    Private\n                                    Static\n                                findMarkedAggregateByID\n                            \n                            \n                                    Static\n                                markAggregateForDispatch\n                            \n                            \n                                    Static\n                                register\n                            \n                            \n                                    Private\n                                    Static\n                                removeAggregateFromMarkedDispatchList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        handlersMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/core/events/domain-events.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        markedAggregates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AggregateRoot[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/core/events/domain-events.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        clearHandlers\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearHandlers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:62\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        clearMarkedAggregates\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearMarkedAggregates()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:66\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        dispatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispatch(event: DomainEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            DomainEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        dispatchAggregateEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispatchAggregateEvents(aggregate: AggregateRoot)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                aggregate\n                                            \n                                                            AggregateRoot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        dispatchEventsForAggregate\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispatchEventsForAggregate(id: UniqueEntityID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            UniqueEntityID\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        findMarkedAggregateByID\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMarkedAggregateByID(id: UniqueEntityID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            UniqueEntityID\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AggregateRoot | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        markAggregateForDispatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAggregateForDispatch(aggregate: AggregateRoot)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                aggregate\n                                            \n                                                            AggregateRoot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(callback: DomainEventCallback, eventClassName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            DomainEventCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                eventClassName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        removeAggregateFromMarkedDispatchList\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeAggregateFromMarkedDispatchList(aggregate: AggregateRoot)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/domain-events.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                aggregate\n                                            \n                                                            AggregateRoot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AggregateRoot } from '../entities/aggregate-root';\nimport { UniqueEntityID } from '../entities/unique-entity-id';\nimport { DomainEvent } from './domain-event';\n\ntype DomainEventCallback = (event: any) => void;\n\nexport class DomainEvents {\n  private static handlersMap: Record = {};\n  private static markedAggregates: AggregateRoot[] = [];\n\n  public static markAggregateForDispatch(aggregate: AggregateRoot) {\n    const aggregateFound = !!this.findMarkedAggregateByID(aggregate.id);\n\n    if (!aggregateFound) {\n      this.markedAggregates.push(aggregate);\n    }\n  }\n\n  private static dispatchAggregateEvents(aggregate: AggregateRoot) {\n    aggregate.domainEvents.forEach((event: DomainEvent) =>\n      this.dispatch(event),\n    );\n  }\n\n  private static removeAggregateFromMarkedDispatchList(\n    aggregate: AggregateRoot,\n  ) {\n    const index = this.markedAggregates.findIndex((a) => a.equals(aggregate));\n\n    this.markedAggregates.splice(index, 1);\n  }\n\n  private static findMarkedAggregateByID(\n    id: UniqueEntityID,\n  ): AggregateRoot | undefined {\n    return this.markedAggregates.find((aggregate) => aggregate.id.equals(id));\n  }\n\n  public static dispatchEventsForAggregate(id: UniqueEntityID) {\n    const aggregate = this.findMarkedAggregateByID(id);\n\n    if (aggregate) {\n      this.dispatchAggregateEvents(aggregate);\n      aggregate.clearEvents();\n      this.removeAggregateFromMarkedDispatchList(aggregate);\n    }\n  }\n\n  public static register(\n    callback: DomainEventCallback,\n    eventClassName: string,\n  ) {\n    const wasEventRegisteredBefore = eventClassName in this.handlersMap;\n\n    if (!wasEventRegisteredBefore) {\n      this.handlersMap[eventClassName] = [];\n    }\n\n    this.handlersMap[eventClassName].push(callback);\n  }\n\n  public static clearHandlers() {\n    this.handlersMap = {};\n  }\n\n  public static clearMarkedAggregates() {\n    this.markedAggregates = [];\n  }\n\n  private static dispatch(event: DomainEvent) {\n    const eventClassName: string = event.constructor.name;\n\n    const isEventRegistered = eventClassName in this.handlersMap;\n\n    if (isEventRegistered) {\n      const handlers = this.handlersMap[eventClassName];\n\n      for (const handler of handlers) {\n        handler(event);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Entity.html":{"url":"classes/Entity.html","title":"class - Entity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Entity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _id\n                            \n                            \n                                    Protected\n                                props\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                equals\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    id\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(props: Props, id?: UniqueEntityID)\n                    \n                \n                        \n                            \n                                Defined in src/core/entities/entity.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        props\n                                                  \n                                                        \n                                                                    Props\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        UniqueEntityID\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UniqueEntityID\n\n                    \n                \n                    \n                        \n                                Defined in src/core/entities/entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Props\n\n                    \n                \n                    \n                        \n                                Defined in src/core/entities/entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        equals\n                        \n                    \n                \n            \n            \n                \n                        \n                    equals(entity: Entity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/entities/entity.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            Entity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n\n                \n                    \n                        getid()\n                    \n                \n                            \n                                \n                                    Defined in src/core/entities/entity.ts:7\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { UniqueEntityID } from './unique-entity-id';\n\nexport abstract class Entity {\n  private _id: UniqueEntityID;\n  protected props: Props;\n\n  get id() {\n    return this._id;\n  }\n\n  protected constructor(props: Props, id?: UniqueEntityID) {\n    this.props = props;\n    this._id = id ?? new UniqueEntityID();\n  }\n\n  public equals(entity: Entity) {\n    if (entity === this) {\n      return true;\n    }\n\n    if (entity.id === this._id) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventHandler.html":{"url":"interfaces/EventHandler.html","title":"interface - EventHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/events/event-handler.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        setupSubscriptions\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setupSubscriptions\n                        \n                    \n                \n            \n            \n                \nsetupSubscriptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/events/event-handler.ts:2\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface EventHandler {\n  setupSubscriptions(): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HttpModule.html":{"url":"modules/HttpModule.html","title":"module - HttpModule","body":"\n                   \n\n\n\n\n    Modules\n    HttpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HttpModule\n\n\n\ncluster_HttpModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nHttpModule\n\nHttpModule\n\nHttpModule -->\n\nDatabaseModule->HttpModule\n\n\n\n\n\nPatientModule\n\nPatientModule\n\nHttpModule -->\n\nPatientModule->HttpModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nHttpModule -->\n\nUserModule->HttpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/http/http.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            PatientModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseModule } from '../databases/prisma/database.module';\nimport { PatientModule } from './controllers/patient/patient.module';\nimport { UserModule } from './controllers/user/user.module';\n\n@Module({\n  imports: [DatabaseModule, PatientModule, UserModule],\n  controllers: [],\n  providers: [],\n  exports: [],\n})\nexport class HttpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Left.html":{"url":"classes/Left.html","title":"class - Left","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Left\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/either.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isLeft\n                            \n                            \n                                isRight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: L)\n                    \n                \n                        \n                            \n                                Defined in src/core/either.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    L\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L\n\n                    \n                \n                    \n                        \n                                Defined in src/core/either.ts:3\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isLeft\n                        \n                    \n                \n            \n            \n                \nisLeft()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/either.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Left\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isRight\n                        \n                    \n                \n            \n            \n                \nisRight()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/either.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Right\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Left {\n  readonly value: L;\n\n  constructor(value: L) {\n    this.value = value;\n  }\n\n  isRight(): this is Right {\n    return false;\n  }\n\n  isLeft(): this is Left {\n    return true;\n  }\n}\n\n// Success\nexport class Right {\n  readonly value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  isRight(): this is Right {\n    return true;\n  }\n\n  isLeft(): this is Left {\n    return false;\n  }\n}\n\nexport type Either = Left | Right;\n\nexport const left = (value: L): Either => {\n  return new Left(value);\n};\n\nexport const right = (value: R): Either => {\n  return new Right(value);\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ListAllPatientsController.html":{"url":"controllers/ListAllPatientsController.html","title":"controller - ListAllPatientsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ListAllPatientsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/patient/actions/list-all-patient-controller.ts\n        \n\n            \n                Prefix\n            \n            \n                patient\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handle\n                        \n                    \n                \n            \n            \n                \n                        \n                    handle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list-all')\n                \n            \n\n                    \n                        \n                            Defined in src/infra/http/controllers/patient/actions/list-all-patient-controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { PatientsNotFound } from '@/domain/patient/use-cases/error-messages/patients-not-found-error-message';\nimport { ListAllPatientsUseCase } from '@/domain/patient/use-cases/list-all-patients-use-case';\nimport {\n  BadRequestException,\n  Controller,\n  Get,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PatientPresenter } from '../presenter/patient-data-presenter';\n\n@Controller('patient')\nexport class ListAllPatientsController {\n  constructor(\n    private readonly listAllPatientsUseCase: ListAllPatientsUseCase,\n  ) {}\n\n  @Get('list-all')\n  async handle() {\n    const result = await this.listAllPatientsUseCase.execute();\n\n    if (result.isLeft()) {\n      const error = result.value;\n\n      switch (error.constructor) {\n        case PatientsNotFound:\n          return new NotFoundException(error);\n        default:\n          return new BadRequestException(error.message);\n      }\n    }\n\n    const patients = result.value.patient;\n\n    return { patient_list: patients.map(PatientPresenter.toHttp) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ListAllPatientsUseCase.html":{"url":"injectables/ListAllPatientsUseCase.html","title":"injectable - ListAllPatientsUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ListAllPatientsUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/use-cases/list-all-patients-use-case.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(patientRepository: ListPatientAbstractRepository)\n                    \n                \n                        \n                            \n                                Defined in src/domain/patient/use-cases/list-all-patients-use-case.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        patientRepository\n                                                  \n                                                        \n                                                                        ListPatientAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute()\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/use-cases/list-all-patients-use-case.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Either, left, right } from '@/core/either';\nimport { PatientEntity } from '../entities/patient-entity';\nimport { PatientsNotFound } from './error-messages/patients-not-found-error-message';\nimport { ListPatientAbstractRepository } from '../contracts/list-patient-abstract-repository';\n\ntype createPatientUseCaseResponse = Either;\n\n@Injectable()\nexport class ListAllPatientsUseCase {\n  constructor(\n    private readonly patientRepository: ListPatientAbstractRepository,\n  ) {}\n  async execute(): Promise {\n    const allPatients = await this.patientRepository.listAll();\n\n    if (!allPatients) {\n      return left(new PatientsNotFound());\n    }\n    return right({ patient: allPatients });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ListAllUsersController.html":{"url":"controllers/ListAllUsersController.html","title":"controller - ListAllUsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ListAllUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/user/actions/list-all-users-controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handle\n                        \n                    \n                \n            \n            \n                \n                        \n                    handle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list-all')\n                \n            \n\n                    \n                        \n                            Defined in src/infra/http/controllers/user/actions/list-all-users-controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { PatientsNotFound } from '@/domain/patient/use-cases/error-messages/patients-not-found-error-message';\nimport { ListAllUsersUseCase } from '@/domain/user/use-cases/list-all-users-use-case';\nimport {\n  BadRequestException,\n  Controller,\n  Get,\n  NotFoundException,\n} from '@nestjs/common';\nimport { UserPresenter } from '../presenter/user-data-presenter';\n\n@Controller('users')\nexport class ListAllUsersController {\n  constructor(private readonly listAllUsersUseCase: ListAllUsersUseCase) {}\n\n  @Get('list-all')\n  async handle() {\n    const result = await this.listAllUsersUseCase.execute();\n\n    if (result.isLeft()) {\n      const error = result.value;\n\n      switch (error.constructor) {\n        case PatientsNotFound:\n          return new NotFoundException(error);\n        default:\n          return new BadRequestException(error.message);\n      }\n    }\n\n    const users = result.value.users;\n\n    return { users_list: users.map(UserPresenter.toHttp) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ListAllUsersUseCase.html":{"url":"injectables/ListAllUsersUseCase.html","title":"injectable - ListAllUsersUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ListAllUsersUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/use-cases/list-all-users-use-case.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(listUsersAbstractRepository: ListUserAbstractRepository)\n                    \n                \n                        \n                            \n                                Defined in src/domain/user/use-cases/list-all-users-use-case.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        listUsersAbstractRepository\n                                                  \n                                                        \n                                                                        ListUserAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute()\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/user/use-cases/list-all-users-use-case.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Either, left, right } from '@/core/either';\nimport { UserEntity } from '@/domain/user/entities/user-entity';\nimport { ListUserAbstractRepository } from '../contracts/list-user-abstract-repository';\nimport { UsersNotFound } from './error-messages/user-not-found-error-message';\n\ntype listUsersUseCaseResponse = Either;\n\n@Injectable()\nexport class ListAllUsersUseCase {\n  constructor(\n    private readonly listUsersAbstractRepository: ListUserAbstractRepository,\n  ) {}\n  async execute(): Promise {\n    const user_list = await this.listUsersAbstractRepository.listAll();\n\n    if (!user_list) {\n      return left(new UsersNotFound());\n    }\n\n    return right({ users: user_list });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ListPatientAbstractRepository.html":{"url":"classes/ListPatientAbstractRepository.html","title":"class - ListPatientAbstractRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ListPatientAbstractRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/contracts/list-patient-abstract-repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                listAll\n                            \n                            \n                                    Abstract\n                                listByEmail\n                            \n                            \n                                    Abstract\n                                listById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    listAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/contracts/list-patient-abstract-repository.ts:4\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        listByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    listByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/contracts/list-patient-abstract-repository.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        listById\n                        \n                    \n                \n            \n            \n                \n                        \n                    listById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/contracts/list-patient-abstract-repository.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PatientEntity } from '../entities/patient-entity';\n\nexport abstract class ListPatientAbstractRepository {\n  abstract listAll(): Promise;\n  abstract listById(id: string): Promise;\n  abstract listByEmail(email: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ListPatientByEmailController.html":{"url":"controllers/ListPatientByEmailController.html","title":"controller - ListPatientByEmailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ListPatientByEmailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/patient/actions/list-patient-by-email-controller.ts\n        \n\n            \n                Prefix\n            \n            \n                patient\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handle\n                        \n                    \n                \n            \n            \n                \n                        \n                    handle(body: CreatePatientBodySchema)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('list-by-email')\n                \n            \n\n                    \n                        \n                            Defined in src/infra/http/controllers/patient/actions/list-patient-by-email-controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            CreatePatientBodySchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { PatientsNotFound } from '@/domain/patient/use-cases/error-messages/patients-not-found-error-message';\nimport {\n  BadRequestException,\n  Body,\n  Controller,\n  NotFoundException,\n  Post,\n  UsePipes,\n} from '@nestjs/common';\nimport { PatientPresenter } from '../presenter/patient-data-presenter';\nimport { ZodPipeValidator } from '@/infra/utils/pipes/zod-pipe-validator';\nimport { z } from 'zod';\nimport { ListPatientByEmailUseCase } from '@/domain/patient/use-cases/list-patients-by-email-use-case';\n\nconst createPatientBodySchema = z.object({\n  email: z.string().email(),\n});\n\ntype CreatePatientBodySchema = z.infer;\n\n@Controller('patient')\n@UsePipes(new ZodPipeValidator(createPatientBodySchema))\nexport class ListPatientByEmailController {\n  constructor(\n    private readonly listPatientByEmailUseCase: ListPatientByEmailUseCase,\n  ) {}\n\n  @Post('list-by-email')\n  async handle(@Body() body: CreatePatientBodySchema) {\n    const { email } = body;\n    const result = await this.listPatientByEmailUseCase.execute(email);\n\n    if (result.isLeft()) {\n      const error = result.value;\n\n      switch (error.constructor) {\n        case PatientsNotFound:\n          return new NotFoundException(error);\n        default:\n          return new BadRequestException(error.message);\n      }\n    }\n\n    const patients = result.value.patient;\n\n    return { patient: PatientPresenter.toHttp(patients) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ListPatientByEmailUseCase.html":{"url":"injectables/ListPatientByEmailUseCase.html","title":"injectable - ListPatientByEmailUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ListPatientByEmailUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/use-cases/list-patients-by-email-use-case.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(patientRepository: ListPatientAbstractRepository)\n                    \n                \n                        \n                            \n                                Defined in src/domain/patient/use-cases/list-patients-by-email-use-case.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        patientRepository\n                                                  \n                                                        \n                                                                        ListPatientAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/use-cases/list-patients-by-email-use-case.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Either, left, right } from '@/core/either';\nimport { PatientEntity } from '../entities/patient-entity';\nimport { PatientsNotFound } from './error-messages/patients-not-found-error-message';\nimport { ListPatientAbstractRepository } from '../contracts/list-patient-abstract-repository';\n\ntype createPatientUseCaseResponse = Either;\n\n@Injectable()\nexport class ListPatientByEmailUseCase {\n  constructor(\n    private readonly patientRepository: ListPatientAbstractRepository,\n  ) {}\n  async execute(email: string): Promise {\n    const patient = await this.patientRepository.listByEmail(email);\n\n    if (!patient) {\n      return left(new PatientsNotFound());\n    }\n    return right({ patient });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ListPatientByIdController.html":{"url":"controllers/ListPatientByIdController.html","title":"controller - ListPatientByIdController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ListPatientByIdController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/patient/actions/list-patient-by-id-controller.ts\n        \n\n            \n                Prefix\n            \n            \n                patient\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handle\n                        \n                    \n                \n            \n            \n                \n                        \n                    handle(params: PatientParamSchema)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('list-by-id')\n                \n            \n\n                    \n                        \n                            Defined in src/infra/http/controllers/patient/actions/list-patient-by-id-controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            PatientParamSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { PatientsNotFound } from '@/domain/patient/use-cases/error-messages/patients-not-found-error-message';\nimport {\n  BadRequestException,\n  Controller,\n  NotFoundException,\n  Param,\n  Post,\n  UsePipes,\n} from '@nestjs/common';\nimport { PatientPresenter } from '../presenter/patient-data-presenter';\nimport { ZodPipeValidator } from '@/infra/utils/pipes/zod-pipe-validator';\nimport { ListPatientByIdUseCase } from '@/domain/patient/use-cases/list-patients-by-id-use-case';\nimport { z } from 'zod';\n\nconst patientParamSchema = z.object({\n  id: z.string().uuid(),\n});\n\ntype PatientParamSchema = z.infer;\n\n@Controller('patient')\n@UsePipes(new ZodPipeValidator(patientParamSchema))\nexport class ListPatientByIdController {\n  constructor(\n    private readonly listPatientByIdUseCase: ListPatientByIdUseCase,\n  ) {}\n\n  @Post('list-by-id')\n  async handle(@Param() params: PatientParamSchema) {\n    const { id } = params;\n    const result = await this.listPatientByIdUseCase.execute(id);\n\n    if (result.isLeft()) {\n      const error = result.value;\n\n      switch (error.constructor) {\n        case PatientsNotFound:\n          return new NotFoundException(error);\n        default:\n          return new BadRequestException(error.message);\n      }\n    }\n\n    const patient = result.value.patient;\n\n    return { patient: PatientPresenter.toHttp(patient) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ListPatientByIdUseCase.html":{"url":"injectables/ListPatientByIdUseCase.html","title":"injectable - ListPatientByIdUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ListPatientByIdUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/use-cases/list-patients-by-id-use-case.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(patientRepository: ListPatientAbstractRepository)\n                    \n                \n                        \n                            \n                                Defined in src/domain/patient/use-cases/list-patients-by-id-use-case.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        patientRepository\n                                                  \n                                                        \n                                                                        ListPatientAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/use-cases/list-patients-by-id-use-case.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Either, left, right } from '@/core/either';\nimport { PatientEntity } from '../entities/patient-entity';\nimport { PatientsNotFound } from './error-messages/patients-not-found-error-message';\nimport { ListPatientAbstractRepository } from '../contracts/list-patient-abstract-repository';\n\ntype createPatientUseCaseResponse = Either;\n\n@Injectable()\nexport class ListPatientByIdUseCase {\n  constructor(\n    private readonly patientRepository: ListPatientAbstractRepository,\n  ) {}\n  async execute(id: string): Promise {\n    const patient = await this.patientRepository.listById(id);\n\n    if (!patient) {\n      return left(new PatientsNotFound());\n    }\n    return right({ patient });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ListPatientsConcreteRepository.html":{"url":"injectables/ListPatientsConcreteRepository.html","title":"injectable - ListPatientsConcreteRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ListPatientsConcreteRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/databases/repositories/patient/list-patients-concrete-repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Async\n                                listByEmail\n                            \n                            \n                                    Async\n                                listById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/databases/repositories/patient/list-patients-concrete-repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    listAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/patient/list-patients-concrete-repository.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    listByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/patient/list-patients-concrete-repository.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listById\n                        \n                    \n                \n            \n            \n                \n                        \n                    listById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/patient/list-patients-concrete-repository.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PrismaService } from '../../prisma/service/prisma.service';\nimport { PatientEntity } from '@/domain/patient/entities/patient-entity';\nimport { PatientDataStructureMapper } from '../../mappers/patient-mapper';\nimport { Injectable } from '@nestjs/common';\nimport { ListPatientAbstractRepository } from '@/domain/patient/contracts/list-patient-abstract-repository';\n\n@Injectable()\nexport class ListPatientsConcreteRepository\n  implements ListPatientAbstractRepository\n{\n  constructor(private readonly prisma: PrismaService) {}\n\n  async listAll(): Promise {\n    const patients = await this.prisma.patient.findMany();\n\n    return patients\n      ? patients.map((patient) =>\n          PatientDataStructureMapper.fromPersistanceToDomain(patient),\n        )\n      : [];\n  }\n\n  async listByEmail(email: string): Promise {\n    const patient = await this.prisma.patient.findFirst({\n      where: {\n        email: email,\n      },\n    });\n\n    return patient\n      ? PatientDataStructureMapper.fromPersistanceToDomain(patient)\n      : null;\n  }\n\n  async listById(id: string): Promise {\n    const patient = await this.prisma.patient.findUnique({\n      where: {\n        id: id,\n      },\n    });\n\n    return patient\n      ? PatientDataStructureMapper.fromPersistanceToDomain(patient)\n      : null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ListUserAbstractRepository.html":{"url":"classes/ListUserAbstractRepository.html","title":"class - ListUserAbstractRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ListUserAbstractRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/contracts/list-user-abstract-repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                listAll\n                            \n                            \n                                    Abstract\n                                listByEmail\n                            \n                            \n                                    Abstract\n                                listById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    listAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/user/contracts/list-user-abstract-repository.ts:4\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        listByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    listByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/user/contracts/list-user-abstract-repository.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        listById\n                        \n                    \n                \n            \n            \n                \n                        \n                    listById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/user/contracts/list-user-abstract-repository.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserEntity } from '../entities/user-entity';\n\nexport abstract class ListUserAbstractRepository {\n  abstract listAll(): Promise;\n  abstract listById(id: string): Promise;\n  abstract listByEmail(email: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ListUserByEmailController.html":{"url":"controllers/ListUserByEmailController.html","title":"controller - ListUserByEmailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ListUserByEmailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/user/actions/list-user-by-email-controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handle\n                        \n                    \n                \n            \n            \n                \n                        \n                    handle(body: ListUserByEmailBodySchema)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list-by-email')\n                \n            \n\n                    \n                        \n                            Defined in src/infra/http/controllers/user/actions/list-user-by-email-controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ListUserByEmailBodySchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { UsersNotFound } from '@/domain/user/use-cases/error-messages/user-not-found-error-message';\nimport { ListUserByEmailUseCase } from '@/domain/user/use-cases/list-users-by-email-use-case';\nimport {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  NotFoundException,\n  UsePipes,\n} from '@nestjs/common';\nimport { z } from 'zod';\nimport { UserPresenter } from '../presenter/user-data-presenter';\nimport { ZodPipeValidator } from '@/infra/utils/pipes/zod-pipe-validator';\n\nconst listUserByEmailBodySchema = z.object({\n  email: z.string().email(),\n});\n\ntype ListUserByEmailBodySchema = z.infer;\n\n@Controller('user')\n@UsePipes(new ZodPipeValidator(listUserByEmailBodySchema))\nexport class ListUserByEmailController {\n  constructor(\n    private readonly listUserByEmailUseCase: ListUserByEmailUseCase,\n  ) {}\n\n  @Get('list-by-email')\n  async handle(@Body() body: ListUserByEmailBodySchema) {\n    const { email } = body;\n\n    const result = await this.listUserByEmailUseCase.execute(email);\n\n    if (result.isLeft()) {\n      const error = result.value;\n\n      switch (error.constructor) {\n        case UsersNotFound:\n          return new NotFoundException(error);\n        default:\n          return new BadRequestException(error.message);\n      }\n    }\n\n    const user = result.value.user;\n\n    return { user: UserPresenter.toHttp(user) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ListUserByEmailUseCase.html":{"url":"injectables/ListUserByEmailUseCase.html","title":"injectable - ListUserByEmailUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ListUserByEmailUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/use-cases/list-users-by-email-use-case.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(listUserAbstractRepository: ListUserAbstractRepository)\n                    \n                \n                        \n                            \n                                Defined in src/domain/user/use-cases/list-users-by-email-use-case.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        listUserAbstractRepository\n                                                  \n                                                        \n                                                                        ListUserAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/user/use-cases/list-users-by-email-use-case.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ListUserAbstractRepository } from '../contracts/list-user-abstract-repository';\nimport { Either, left, right } from '@/core/either';\nimport { UserEntity } from '../entities/user-entity';\nimport { UsersNotFound } from './error-messages/user-not-found-error-message';\n\ntype listUserUseCaseResponse = Either;\n\n@Injectable()\nexport class ListUserByEmailUseCase {\n  constructor(\n    private readonly listUserAbstractRepository: ListUserAbstractRepository,\n  ) {}\n\n  async execute(email: string): Promise {\n    const user = await this.listUserAbstractRepository.listByEmail(email);\n\n    if (!user) {\n      return left(new UsersNotFound());\n    }\n\n    return right({ user });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ListUserByIdController.html":{"url":"controllers/ListUserByIdController.html","title":"controller - ListUserByIdController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ListUserByIdController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/user/actions/list-user-by-id-controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handle\n                        \n                    \n                \n            \n            \n                \n                        \n                    handle(params: ListUserByIdParamSchema)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list-by-id/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/infra/http/controllers/user/actions/list-user-by-id-controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ListUserByIdParamSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { UsersNotFound } from '@/domain/user/use-cases/error-messages/user-not-found-error-message';\nimport { ListUserByIdUseCase } from '@/domain/user/use-cases/list-users-by-id-use-case';\nimport {\n  BadRequestException,\n  Controller,\n  Get,\n  NotFoundException,\n  Param,\n  UsePipes,\n} from '@nestjs/common';\nimport { z } from 'zod';\nimport { UserPresenter } from '../presenter/user-data-presenter';\nimport { ZodPipeValidator } from '@/infra/utils/pipes/zod-pipe-validator';\n\nconst listUserByIdParamSchema = z.object({\n  id: z.string().uuid() || z.string().cuid(),\n});\n\ntype ListUserByIdParamSchema = z.infer;\n\n@Controller('user')\n@UsePipes(new ZodPipeValidator(listUserByIdParamSchema))\nexport class ListUserByIdController {\n  constructor(private readonly listUserByIdUseCase: ListUserByIdUseCase) {}\n\n  @Get('list-by-id/:id')\n  async handle(@Param() params: ListUserByIdParamSchema) {\n    const { id } = params;\n\n    const result = await this.listUserByIdUseCase.execute(id);\n\n    if (result.isLeft()) {\n      const error = result.value;\n\n      switch (error.constructor) {\n        case UsersNotFound:\n          return new NotFoundException(error);\n        default:\n          return new BadRequestException(error.message);\n      }\n    }\n\n    const user = result.value.user;\n\n    return { user: UserPresenter.toHttp(user) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ListUserByIdUseCase.html":{"url":"injectables/ListUserByIdUseCase.html","title":"injectable - ListUserByIdUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ListUserByIdUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/use-cases/list-users-by-id-use-case.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(listUserAbstractRepository: ListUserAbstractRepository)\n                    \n                \n                        \n                            \n                                Defined in src/domain/user/use-cases/list-users-by-id-use-case.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        listUserAbstractRepository\n                                                  \n                                                        \n                                                                        ListUserAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/user/use-cases/list-users-by-id-use-case.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ListUserAbstractRepository } from '../contracts/list-user-abstract-repository';\nimport { Either, left, right } from '@/core/either';\nimport { UserEntity } from '../entities/user-entity';\nimport { UsersNotFound } from './error-messages/user-not-found-error-message';\n\ntype listUserUseCaseResponse = Either;\n\n@Injectable()\nexport class ListUserByIdUseCase {\n  constructor(\n    private readonly listUserAbstractRepository: ListUserAbstractRepository,\n  ) {}\n\n  async execute(id: string): Promise {\n    const user = await this.listUserAbstractRepository.listById(id);\n\n    if (!user) {\n      return left(new UsersNotFound());\n    }\n\n    return right({ user });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ListUserConcreteRepository.html":{"url":"injectables/ListUserConcreteRepository.html","title":"injectable - ListUserConcreteRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ListUserConcreteRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/databases/repositories/user/list-users-concrete-repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                listAll\n                            \n                            \n                                    Async\n                                listByEmail\n                            \n                            \n                                    Async\n                                listById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/databases/repositories/user/list-users-concrete-repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    listAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/user/list-users-concrete-repository.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    listByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/user/list-users-concrete-repository.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listById\n                        \n                    \n                \n            \n            \n                \n                        \n                    listById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/user/list-users-concrete-repository.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PrismaService } from '../../prisma/service/prisma.service';\nimport { Injectable } from '@nestjs/common';\nimport { ListUserAbstractRepository } from '@/domain/user/contracts/list-user-abstract-repository';\nimport { UserEntity } from '@/domain/user/entities/user-entity';\nimport { UserDataStructureMapper } from '../../mappers/user-mapper';\n\n@Injectable()\nexport class ListUserConcreteRepository implements ListUserAbstractRepository {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async listByEmail(email: string): Promise {\n    const user = await this.prisma.user.findFirst({\n      where: {\n        email: email,\n      },\n    });\n\n    return user ? UserDataStructureMapper.fromPersistanceToDomain(user) : null;\n  }\n\n  async listAll(): Promise {\n    const users = await this.prisma.user.findMany();\n\n    return users\n      ? users.map((user) =>\n          UserDataStructureMapper.fromPersistanceToDomain(user),\n        )\n      : [];\n  }\n\n  async listById(id: string): Promise {\n    const user = await this.prisma.user.findFirst({\n      where: {\n        id: id,\n      },\n    });\n\n    return user ? UserDataStructureMapper.fromPersistanceToDomain(user) : null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotAllowedError.html":{"url":"classes/NotAllowedError.html","title":"class - NotAllowedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotAllowedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/errors/shared-global/global-resources-errors/not-allowed-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n            \n                Implements\n            \n            \n                            UseCaseError\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/errors/shared-global/global-resources-errors/not-allowed-error.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UseCaseError } from '../use-cases-errors/use-case-error';\n\nexport class NotAllowedError extends Error implements UseCaseError {\n  constructor() {\n    super('Not allowed');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationParams.html":{"url":"interfaces/PaginationParams.html","title":"interface - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/repositories/pagination/pagination-params.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            page\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationParams {\n  page: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatientAlreadyExistsError.html":{"url":"classes/PatientAlreadyExistsError.html","title":"class - PatientAlreadyExistsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatientAlreadyExistsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/use-cases/error-messages/patient-already-exists-error-message.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n            \n                Implements\n            \n            \n                            UseCaseError\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(identifier: string)\n                    \n                \n                        \n                            \n                                Defined in src/domain/patient/use-cases/error-messages/patient-already-exists-error-message.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        identifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UseCaseError } from '@/core/errors/shared-global/use-cases-errors/use-case-error';\n\nexport class PatientAlreadyExistsError extends Error implements UseCaseError {\n  constructor(identifier: string) {\n    super(`Patient with email \"${identifier}\" already exists.`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatientDataStructureMapper.html":{"url":"classes/PatientDataStructureMapper.html","title":"class - PatientDataStructureMapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatientDataStructureMapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/databases/mappers/patient-mapper.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                fromDomainToPersistance\n                            \n                            \n                                    Static\n                                fromPersistanceToDomain\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromDomainToPersistance\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromDomainToPersistance(patient: DomainPatient)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/mappers/patient-mapper.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patient\n                                            \n                                                            DomainPatient\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Prisma.PatientUncheckedCreateInput\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromPersistanceToDomain\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromPersistanceToDomain(raw: PrismaPatient)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/mappers/patient-mapper.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                raw\n                                            \n                                                        PrismaPatient\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DomainPatient\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\nimport { PatientEntity as DomainPatient } from '@/domain/patient/entities/patient-entity';\nimport { Patient as PrismaPatient } from '@prisma/client';\nimport { UniqueEntityID } from '@/core/entities/unique-entity-id';\n\nexport class PatientDataStructureMapper {\n  static fromPersistanceToDomain(raw: PrismaPatient): DomainPatient {\n    return DomainPatient.create(\n      {\n        name: raw.name,\n        email: raw.email,\n        phone: raw.phone,\n        isActive: raw.isActive,\n        createdAt: raw.createdAt,\n        updatedAt: raw.updatedAt,\n      },\n      new UniqueEntityID(raw.id),\n    );\n  }\n\n  static fromDomainToPersistance(\n    patient: DomainPatient,\n  ): Prisma.PatientUncheckedCreateInput {\n    return {\n      id: patient.id.toString(),\n      name: patient.name,\n      email: patient.email,\n      phone: patient.phone,\n      isActive: patient.isActive,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatientEntity.html":{"url":"classes/PatientEntity.html","title":"class - PatientEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatientEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/entities/patient-entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AggregateRoot\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _domainEvents\n                            \n                            \n                                    Private\n                                _id\n                            \n                            \n                                    Protected\n                                props\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                            \n                                    Protected\n                                addDomainEvent\n                            \n                            \n                                    Public\n                                clearEvents\n                            \n                            \n                                    Public\n                                equals\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                                \n                                    email\n                                \n                                \n                                    phone\n                                \n                                \n                                    isActive\n                                \n                                \n                                    createdAt\n                                \n                                \n                                    updatedAt\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _domainEvents\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DomainEvent[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         AggregateRoot\n\n                            \n                        \n                    \n                        \n                                Defined in         AggregateRoot:6\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UniqueEntityID\n\n                    \n                \n                        \n                            \n                                Inherited from         Entity\n\n                            \n                        \n                    \n                        \n                                Defined in         Entity:4\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Props\n\n                    \n                \n                        \n                            \n                                Inherited from         Entity\n\n                            \n                        \n                    \n                        \n                                Defined in         Entity:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(props: Optional, id?: UniqueEntityID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/entities/patient-entity.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            UniqueEntityID\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatientEntity\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        addDomainEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    addDomainEvent(domainEvent: DomainEvent)\n                \n            \n\n\n                    \n                        \n                            Inherited from         AggregateRoot\n\n                        \n                    \n                    \n                        \n                                Defined in         AggregateRoot:12\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                domainEvent\n                                            \n                                                            DomainEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearEvents()\n                \n            \n\n\n                    \n                        \n                            Inherited from         AggregateRoot\n\n                        \n                    \n                    \n                        \n                                Defined in         AggregateRoot:17\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        equals\n                        \n                    \n                \n            \n            \n                \n                        \n                    equals(entity: Entity)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Entity\n\n                        \n                    \n                    \n                        \n                                Defined in         Entity:16\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            Entity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:15\n                                \n                            \n\n                \n                    \n                        setname(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:18\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        email\n                    \n                \n\n                \n                    \n                        getemail()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:22\n                                \n                            \n\n                \n                    \n                        setemail(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:25\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        phone\n                    \n                \n\n                \n                    \n                        getphone()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:29\n                                \n                            \n\n                \n                    \n                        setphone(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:32\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        isActive\n                    \n                \n\n                \n                    \n                        getisActive()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:36\n                                \n                            \n\n                \n                    \n                        setisActive(value: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:39\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        createdAt\n                    \n                \n\n                \n                    \n                        getcreatedAt()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:43\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        updatedAt\n                    \n                \n\n                \n                    \n                        getupdatedAt()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/patient/entities/patient-entity.ts:47\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AggregateRoot } from '@/core/entities/aggregate-root';\nimport { UniqueEntityID } from '@/core/entities/unique-entity-id';\nimport { Optional } from '@prisma/client/runtime/library';\n\nexport interface PatientProps {\n  name: string;\n  email: string;\n  phone: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt?: Date | null;\n}\n\nexport class PatientEntity extends AggregateRoot {\n  get name(): string {\n    return this.props.name;\n  }\n  set name(value: string) {\n    this.props.name = value;\n  }\n\n  get email(): string {\n    return this.props.email;\n  }\n  set email(value: string) {\n    this.props.email = value;\n  }\n\n  get phone(): string {\n    return this.props.phone;\n  }\n  set phone(value: string) {\n    this.props.phone = value;\n  }\n\n  get isActive(): boolean {\n    return this.props.isActive;\n  }\n  set isActive(value: boolean) {\n    this.props.isActive = value;\n  }\n\n  get createdAt() {\n    return this.props.createdAt;\n  }\n\n  get updatedAt() {\n    return this.props.updatedAt;\n  }\n\n  static create(\n    props: Optional,\n    id?: UniqueEntityID,\n  ) {\n    const patient = new PatientEntity(\n      {\n        ...props,\n        createdAt: props.createdAt ?? new Date(),\n        updatedAt: props.updatedAt ?? null,\n      },\n      id,\n    );\n\n    return patient;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PatientModule.html":{"url":"modules/PatientModule.html","title":"module - PatientModule","body":"\n                   \n\n\n\n\n    Modules\n    PatientModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PatientModule\n\n\n\ncluster_PatientModule_imports\n\n\n\ncluster_PatientModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nPatientModule\n\nPatientModule\n\nPatientModule -->\n\nDatabaseModule->PatientModule\n\n\n\n\n\nCreatePatientConcreteRepository\n\nCreatePatientConcreteRepository\n\nPatientModule -->\n\nCreatePatientConcreteRepository->PatientModule\n\n\n\n\n\nCreatePatientUseCase\n\nCreatePatientUseCase\n\nPatientModule -->\n\nCreatePatientUseCase->PatientModule\n\n\n\n\n\nDeletePatientUseCase\n\nDeletePatientUseCase\n\nPatientModule -->\n\nDeletePatientUseCase->PatientModule\n\n\n\n\n\nListAllPatientsUseCase\n\nListAllPatientsUseCase\n\nPatientModule -->\n\nListAllPatientsUseCase->PatientModule\n\n\n\n\n\nListPatientByEmailUseCase\n\nListPatientByEmailUseCase\n\nPatientModule -->\n\nListPatientByEmailUseCase->PatientModule\n\n\n\n\n\nListPatientByIdUseCase\n\nListPatientByIdUseCase\n\nPatientModule -->\n\nListPatientByIdUseCase->PatientModule\n\n\n\n\n\nListPatientsConcreteRepository\n\nListPatientsConcreteRepository\n\nPatientModule -->\n\nListPatientsConcreteRepository->PatientModule\n\n\n\n\n\nUpdateAndDeleteConcreteRepository\n\nUpdateAndDeleteConcreteRepository\n\nPatientModule -->\n\nUpdateAndDeleteConcreteRepository->PatientModule\n\n\n\n\n\nUpdatePatientUseCase\n\nUpdatePatientUseCase\n\nPatientModule -->\n\nUpdatePatientUseCase->PatientModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/http/controllers/patient/patient.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreatePatientConcreteRepository\n                        \n                        \n                            CreatePatientUseCase\n                        \n                        \n                            DeletePatientUseCase\n                        \n                        \n                            ListAllPatientsUseCase\n                        \n                        \n                            ListPatientByEmailUseCase\n                        \n                        \n                            ListPatientByIdUseCase\n                        \n                        \n                            ListPatientsConcreteRepository\n                        \n                        \n                            UpdateAndDeleteConcreteRepository\n                        \n                        \n                            UpdatePatientUseCase\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CreatePatientController\n                        \n                        \n                            ListAllPatientsController\n                        \n                        \n                            ListPatientByEmailController\n                        \n                        \n                            ListPatientByIdController\n                        \n                        \n                            DeletePatientController\n                        \n                        \n                            UpdatePatientController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { DatabaseModule } from '@/infra/databases/prisma/database.module';\nimport { Module } from '@nestjs/common';\nimport { CreatePatientController } from './actions/create-patient-controller';\nimport { CreatePatientUseCase } from '@/domain/patient/use-cases/create-patient-use-case';\nimport { CreatePatientConcreteRepository } from '@/infra/databases/repositories/patient/create-patient-concrete-repository';\nimport { CreatePatientAbstractRepository } from '@/domain/patient/contracts/create-patient-abstract-repository';\nimport { ListAllPatientsController } from './actions/list-all-patient-controller';\nimport { ListAllPatientsUseCase } from '@/domain/patient/use-cases/list-all-patients-use-case';\nimport { ListPatientsConcreteRepository } from '@/infra/databases/repositories/patient/list-patients-concrete-repository';\nimport { ListPatientAbstractRepository } from '@/domain/patient/contracts/list-patient-abstract-repository';\nimport { UpdateAndDeleteAbstractRepository } from '@/domain/patient/contracts/update-and-delete-abstract-repository';\nimport { UpdateAndDeleteConcreteRepository } from '@/infra/databases/repositories/patient/updated-and-delete-concrete-repository';\nimport { ListPatientByEmailUseCase } from '@/domain/patient/use-cases/list-patients-by-email-use-case';\nimport { ListPatientByIdUseCase } from '@/domain/patient/use-cases/list-patients-by-id-use-case';\nimport { ListPatientByEmailController } from './actions/list-patient-by-email-controller';\nimport { ListPatientByIdController } from './actions/list-patient-by-id-controller';\nimport { DeletePatientController } from './actions/delete-patient-by-id-controller';\nimport { DeletePatientUseCase } from '@/domain/patient/use-cases/delete-patient-use-case';\nimport { UpdatePatientUseCase } from '@/domain/patient/use-cases/updated-patient-use-case';\nimport { UpdatePatientController } from './actions/update-patient-controller';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [\n    CreatePatientController,\n    ListAllPatientsController,\n    ListPatientByEmailController,\n    ListPatientByIdController,\n    DeletePatientController,\n    UpdatePatientController,\n  ],\n  providers: [\n    CreatePatientUseCase,\n    ListAllPatientsUseCase,\n    ListPatientByEmailUseCase,\n    ListPatientByIdUseCase,\n    DeletePatientUseCase,\n    UpdatePatientUseCase,\n    CreatePatientConcreteRepository,\n    {\n      provide: CreatePatientAbstractRepository,\n      useClass: CreatePatientConcreteRepository,\n    },\n    ListPatientsConcreteRepository,\n    {\n      provide: ListPatientAbstractRepository,\n      useClass: ListPatientsConcreteRepository,\n    },\n    UpdateAndDeleteConcreteRepository,\n    {\n      provide: UpdateAndDeleteAbstractRepository,\n      useClass: UpdateAndDeleteConcreteRepository,\n    },\n  ],\n  exports: [],\n})\nexport class PatientModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatientPresenter.html":{"url":"classes/PatientPresenter.html","title":"class - PatientPresenter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatientPresenter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/patient/presenter/patient-data-presenter.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                toHttp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        toHttp\n                        \n                    \n                \n            \n            \n                \n                        \n                    toHttp(patient: PatientEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/http/controllers/patient/presenter/patient-data-presenter.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patient\n                                            \n                                                            PatientEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: any; name: any; email: any; phone: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PatientEntity } from '@/domain/patient/entities/patient-entity';\n\nexport class PatientPresenter {\n  static toHttp(patient: PatientEntity) {\n    return {\n      id: patient.id,\n      name: patient.name,\n      email: patient.email,\n      phone: patient.phone,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PatientProps.html":{"url":"interfaces/PatientProps.html","title":"interface - PatientProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PatientProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/entities/patient-entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:     Date | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AggregateRoot } from '@/core/entities/aggregate-root';\nimport { UniqueEntityID } from '@/core/entities/unique-entity-id';\nimport { Optional } from '@prisma/client/runtime/library';\n\nexport interface PatientProps {\n  name: string;\n  email: string;\n  phone: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt?: Date | null;\n}\n\nexport class PatientEntity extends AggregateRoot {\n  get name(): string {\n    return this.props.name;\n  }\n  set name(value: string) {\n    this.props.name = value;\n  }\n\n  get email(): string {\n    return this.props.email;\n  }\n  set email(value: string) {\n    this.props.email = value;\n  }\n\n  get phone(): string {\n    return this.props.phone;\n  }\n  set phone(value: string) {\n    this.props.phone = value;\n  }\n\n  get isActive(): boolean {\n    return this.props.isActive;\n  }\n  set isActive(value: boolean) {\n    this.props.isActive = value;\n  }\n\n  get createdAt() {\n    return this.props.createdAt;\n  }\n\n  get updatedAt() {\n    return this.props.updatedAt;\n  }\n\n  static create(\n    props: Optional,\n    id?: UniqueEntityID,\n  ) {\n    const patient = new PatientEntity(\n      {\n        ...props,\n        createdAt: props.createdAt ?? new Date(),\n        updatedAt: props.updatedAt ?? null,\n      },\n      id,\n    );\n\n    return patient;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatientsNotFound.html":{"url":"classes/PatientsNotFound.html","title":"class - PatientsNotFound","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatientsNotFound\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/use-cases/error-messages/patients-not-found-error-message.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n            \n                Implements\n            \n            \n                            UseCaseError\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/domain/patient/use-cases/error-messages/patients-not-found-error-message.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UseCaseError } from '@/core/errors/shared-global/use-cases-errors/use-case-error';\n\nexport class PatientsNotFound extends Error implements UseCaseError {\n  constructor() {\n    super(\n      `We can't find any patient registered in database. Please, try again later.`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/databases/prisma/service/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onModuleDestroy\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infra/databases/prisma/service/prisma.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \nonModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/prisma/service/prisma.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/prisma/service/prisma.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleDestroy, OnModuleInit\n{\n  constructor() {\n    super({\n      log: ['info', 'warn', 'error'],\n    });\n  }\n\n  onModuleDestroy() {\n    return this.$disconnect();\n  }\n  onModuleInit() {\n    return this.$connect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResourceNotFoundError.html":{"url":"classes/ResourceNotFoundError.html","title":"class - ResourceNotFoundError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceNotFoundError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/errors/shared-global/global-resources-errors/resource-not-found-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n            \n                Implements\n            \n            \n                            UseCaseError\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/errors/shared-global/global-resources-errors/resource-not-found-error.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UseCaseError } from '../use-cases-errors/use-case-error';\n\nexport class ResourceNotFoundError extends Error implements UseCaseError {\n  constructor() {\n    super('Resource not found');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Right.html":{"url":"classes/Right.html","title":"class - Right","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Right\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/either.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isLeft\n                            \n                            \n                                isRight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: R)\n                    \n                \n                        \n                            \n                                Defined in src/core/either.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    R\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     R\n\n                    \n                \n                    \n                        \n                                Defined in src/core/either.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isLeft\n                        \n                    \n                \n            \n            \n                \nisLeft()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/either.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Left\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isRight\n                        \n                    \n                \n            \n            \n                \nisRight()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/either.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Right\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Left {\n  readonly value: L;\n\n  constructor(value: L) {\n    this.value = value;\n  }\n\n  isRight(): this is Right {\n    return false;\n  }\n\n  isLeft(): this is Left {\n    return true;\n  }\n}\n\n// Success\nexport class Right {\n  readonly value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  isRight(): this is Right {\n    return true;\n  }\n\n  isLeft(): this is Left {\n    return false;\n  }\n}\n\nexport type Either = Left | Right;\n\nexport const left = (value: L): Either => {\n  return new Left(value);\n};\n\nexport const right = (value: R): Either => {\n  return new Right(value);\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UniqueEntityID.html":{"url":"classes/UniqueEntityID.html","title":"class - UniqueEntityID","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UniqueEntityID\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/unique-entity-id.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                equals\n                            \n                            \n                                toString\n                            \n                            \n                                toValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/entities/unique-entity-id.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/entities/unique-entity-id.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        equals\n                        \n                    \n                \n            \n            \n                \n                        \n                    equals(id: UniqueEntityID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/entities/unique-entity-id.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            UniqueEntityID\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/entities/unique-entity-id.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toValue\n                        \n                    \n                \n            \n            \n                \ntoValue()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/entities/unique-entity-id.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\n\nexport class UniqueEntityID {\n  private value: string;\n\n  toString() {\n    return this.value;\n  }\n\n  toValue() {\n    return this.value;\n  }\n\n  constructor(value?: string) {\n    this.value = value ?? randomUUID();\n  }\n\n  public equals(id: UniqueEntityID) {\n    return id.toValue() === this.value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAndDeleteAbstractRepository.html":{"url":"classes/UpdateAndDeleteAbstractRepository.html","title":"class - UpdateAndDeleteAbstractRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAndDeleteAbstractRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/contracts/update-and-delete-abstract-repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                delete\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/contracts/update-and-delete-abstract-repository.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patient: UpdatePatientEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/contracts/update-and-delete-abstract-repository.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patient\n                                            \n                                                            UpdatePatientEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PatientEntity } from '../entities/patient-entity';\nimport { UpdatePatientEntity } from '../entities/update-patient-entity';\n\nexport abstract class UpdateAndDeleteAbstractRepository {\n  abstract update(patient: UpdatePatientEntity): Promise;\n  abstract delete(id: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateAndDeleteConcreteRepository.html":{"url":"injectables/UpdateAndDeleteConcreteRepository.html","title":"injectable - UpdateAndDeleteConcreteRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateAndDeleteConcreteRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/databases/repositories/patient/updated-and-delete-concrete-repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/databases/repositories/patient/updated-and-delete-concrete-repository.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/patient/updated-and-delete-concrete-repository.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patient: UpdatePatientEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/patient/updated-and-delete-concrete-repository.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patient\n                                            \n                                                            UpdatePatientEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PrismaService } from '../../prisma/service/prisma.service';\nimport { PatientEntity } from '@/domain/patient/entities/patient-entity';\nimport { PatientDataStructureMapper } from '../../mappers/patient-mapper';\nimport { Injectable } from '@nestjs/common';\nimport { UpdateAndDeleteAbstractRepository } from '@/domain/patient/contracts/update-and-delete-abstract-repository';\nimport { UpdatePatientEntity } from '@/domain/patient/entities/update-patient-entity';\n\n@Injectable()\nexport class UpdateAndDeleteConcreteRepository\n  implements UpdateAndDeleteAbstractRepository\n{\n  constructor(private readonly prisma: PrismaService) {}\n\n  async delete(id: string): Promise {\n    const patient = await this.prisma.patient.delete({\n      where: {\n        id: id,\n      },\n    });\n    return PatientDataStructureMapper.fromPersistanceToDomain(patient);\n  }\n\n  async update(patient: UpdatePatientEntity): Promise {\n    const { id } = patient;\n\n    const patientUpdated = await this.prisma.patient.update({\n      where: {\n        id: id,\n      },\n      data: {\n        name: patient.name,\n        email: patient.email,\n        phone: patient.phone,\n        isActive: patient.isActive,\n      },\n    });\n\n    return PatientDataStructureMapper.fromPersistanceToDomain(patientUpdated);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAndDeleteUserAbstractRepository.html":{"url":"classes/UpdateAndDeleteUserAbstractRepository.html","title":"class - UpdateAndDeleteUserAbstractRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAndDeleteUserAbstractRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/contracts/update-and-delete-user-abstract-repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                delete\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/user/contracts/update-and-delete-user-abstract-repository.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patient: UpdateUserEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/user/contracts/update-and-delete-user-abstract-repository.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patient\n                                            \n                                                            UpdateUserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UpdateUserEntity } from '../entities/update-user-entity';\nimport { UserEntity } from '../entities/user-entity';\n\nexport abstract class UpdateAndDeleteUserAbstractRepository {\n  abstract update(patient: UpdateUserEntity): Promise;\n  abstract delete(id: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateAndDeleteUserConcreteRepository.html":{"url":"injectables/UpdateAndDeleteUserConcreteRepository.html","title":"injectable - UpdateAndDeleteUserConcreteRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateAndDeleteUserConcreteRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/databases/repositories/user/updated-and-delete-user-concrete-repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/databases/repositories/user/updated-and-delete-user-concrete-repository.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/user/updated-and-delete-user-concrete-repository.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(user: UpdateUserEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/repositories/user/updated-and-delete-user-concrete-repository.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UpdateUserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PrismaService } from '../../prisma/service/prisma.service';\nimport { Injectable } from '@nestjs/common';\nimport { UpdateAndDeleteUserAbstractRepository } from '@/domain/user/contracts/update-and-delete-user-abstract-repository';\nimport { UserEntity } from '@/domain/user/entities/user-entity';\nimport { UserDataStructureMapper } from '../../mappers/user-mapper';\nimport { UpdateUserEntity } from '@/domain/user/entities/update-user-entity';\n\n@Injectable()\nexport class UpdateAndDeleteUserConcreteRepository\n  implements UpdateAndDeleteUserAbstractRepository\n{\n  constructor(private readonly prisma: PrismaService) {}\n\n  async delete(id: string): Promise {\n    const user = await this.prisma.user.delete({\n      where: {\n        id: id,\n      },\n    });\n    return UserDataStructureMapper.fromPersistanceToDomain(user);\n  }\n\n  async update(user: UpdateUserEntity): Promise {\n    const { id } = user;\n\n    const user_updated = await this.prisma.user.update({\n      where: {\n        id: id,\n      },\n      data: {\n        name: user.name,\n        email: user.email,\n        password: user.password,\n        isActive: user.isActive,\n        roles: user.roles,\n      },\n    });\n\n    return UserDataStructureMapper.fromPersistanceToDomain(user_updated);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UpdatePatientController.html":{"url":"controllers/UpdatePatientController.html","title":"controller - UpdatePatientController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UpdatePatientController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/patient/actions/update-patient-controller.ts\n        \n\n            \n                Prefix\n            \n            \n                patients\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handle\n                        \n                    \n                \n            \n            \n                \n                        \n                    handle(body: UpdatePatientBodySchema)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('update')\n                \n            \n\n                    \n                        \n                            Defined in src/infra/http/controllers/patient/actions/update-patient-controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            UpdatePatientBodySchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { PatientAlreadyExistsError } from '@/domain/patient/use-cases/error-messages/patient-already-exists-error-message';\nimport {\n  BadRequestException,\n  Body,\n  ConflictException,\n  Controller,\n  Post,\n  UsePipes,\n} from '@nestjs/common';\nimport { PatientPresenter } from '../presenter/patient-data-presenter';\nimport { ZodPipeValidator } from '@/infra/utils/pipes/zod-pipe-validator';\nimport { z } from 'zod';\nimport { UpdatePatientUseCase } from '@/domain/patient/use-cases/updated-patient-use-case';\n\nconst updatePatientBodySchema = z.object({\n  id: z.string().uuid(),\n  name: z.string(),\n  email: z.string().email(),\n  phone: z.string(),\n  isActive: z.boolean(),\n});\n\ntype UpdatePatientBodySchema = z.infer;\n\n@Controller('patients')\n@UsePipes(new ZodPipeValidator(updatePatientBodySchema))\nexport class UpdatePatientController {\n  constructor(private readonly updatePatientUseCase: UpdatePatientUseCase) {}\n\n  @Post('update')\n  async handle(@Body() body: UpdatePatientBodySchema) {\n    const { id, name, email, phone, isActive } = body;\n\n    const result = await this.updatePatientUseCase.execute({\n      id,\n      name,\n      email,\n      phone,\n      isActive,\n    });\n\n    if (result.isLeft()) {\n      const error = result.value;\n\n      switch (error.constructor) {\n        case PatientAlreadyExistsError:\n          return new ConflictException(error);\n        default:\n          return new BadRequestException(error.message);\n      }\n    }\n    return { patient_updated: PatientPresenter.toHttp(result.value.patient) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdatePatientEntity.html":{"url":"interfaces/UpdatePatientEntity.html","title":"interface - UpdatePatientEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UpdatePatientEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/entities/update-patient-entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UpdatePatientEntity {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdatePatientUseCase.html":{"url":"injectables/UpdatePatientUseCase.html","title":"injectable - UpdatePatientUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdatePatientUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/use-cases/updated-patient-use-case.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(listPatientRepository: ListPatientAbstractRepository, updatedAndDeleteRepository: UpdateAndDeleteAbstractRepository)\n                    \n                \n                        \n                            \n                                Defined in src/domain/patient/use-cases/updated-patient-use-case.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        listPatientRepository\n                                                  \n                                                        \n                                                                        ListPatientAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updatedAndDeleteRepository\n                                                  \n                                                        \n                                                                        UpdateAndDeleteAbstractRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(patient: UpdatePatientUseCaseRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/patient/use-cases/updated-patient-use-case.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patient\n                                            \n                                                            UpdatePatientUseCaseRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UpdateAndDeleteAbstractRepository } from '../contracts/update-and-delete-abstract-repository';\nimport { ListPatientAbstractRepository } from '../contracts/list-patient-abstract-repository';\nimport { Either, left, right } from '@/core/either';\nimport { PatientsNotFound } from './error-messages/patients-not-found-error-message';\nimport { PatientEntity } from '../entities/patient-entity';\n\ninterface UpdatePatientUseCaseRequest {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  isActive: boolean;\n}\n\ntype updatedPatientUseCaseResponse = Either;\n\n@Injectable()\nexport class UpdatePatientUseCase {\n  constructor(\n    private readonly listPatientRepository: ListPatientAbstractRepository,\n    private readonly updatedAndDeleteRepository: UpdateAndDeleteAbstractRepository,\n  ) {}\n\n  async execute(\n    patient: UpdatePatientUseCaseRequest,\n  ): Promise {\n    const { id } = patient;\n\n    const isPatientExist = await this.listPatientRepository.listById(id);\n\n    if (!isPatientExist) {\n      return left(new PatientsNotFound());\n    }\n\n    const response = await this.updatedAndDeleteRepository.update(patient);\n\n    return right({ patient: response });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdatePatientUseCaseRequest.html":{"url":"interfaces/UpdatePatientUseCaseRequest.html","title":"interface - UpdatePatientUseCaseRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UpdatePatientUseCaseRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/patient/use-cases/updated-patient-use-case.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UpdateAndDeleteAbstractRepository } from '../contracts/update-and-delete-abstract-repository';\nimport { ListPatientAbstractRepository } from '../contracts/list-patient-abstract-repository';\nimport { Either, left, right } from '@/core/either';\nimport { PatientsNotFound } from './error-messages/patients-not-found-error-message';\nimport { PatientEntity } from '../entities/patient-entity';\n\ninterface UpdatePatientUseCaseRequest {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  isActive: boolean;\n}\n\ntype updatedPatientUseCaseResponse = Either;\n\n@Injectable()\nexport class UpdatePatientUseCase {\n  constructor(\n    private readonly listPatientRepository: ListPatientAbstractRepository,\n    private readonly updatedAndDeleteRepository: UpdateAndDeleteAbstractRepository,\n  ) {}\n\n  async execute(\n    patient: UpdatePatientUseCaseRequest,\n  ): Promise {\n    const { id } = patient;\n\n    const isPatientExist = await this.listPatientRepository.listById(id);\n\n    if (!isPatientExist) {\n      return left(new PatientsNotFound());\n    }\n\n    const response = await this.updatedAndDeleteRepository.update(patient);\n\n    return right({ patient: response });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateUserEntity.html":{"url":"interfaces/UpdateUserEntity.html","title":"interface - UpdateUserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UpdateUserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/entities/update-user-entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UpdateUserEntity {\n  id: string;\n  name: string;\n  email: string;\n  password: string;\n  isActive: boolean;\n  roles: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UseCaseError.html":{"url":"interfaces/UseCaseError.html","title":"interface - UseCaseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UseCaseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/errors/shared-global/use-cases-errors/use-case-error.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UseCaseError {\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserAlreadyExistsError.html":{"url":"classes/UserAlreadyExistsError.html","title":"class - UserAlreadyExistsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserAlreadyExistsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/use-cases/error-messages/user-already-exists-error-message.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n            \n                Implements\n            \n            \n                            UseCaseError\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(identifier: string)\n                    \n                \n                        \n                            \n                                Defined in src/domain/user/use-cases/error-messages/user-already-exists-error-message.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        identifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UseCaseError } from '@/core/errors/shared-global/use-cases-errors/use-case-error';\n\nexport class UserAlreadyExistsError extends Error implements UseCaseError {\n  constructor(identifier: string) {\n    super(`User with email \"${identifier}\" already exists.`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDataStructureMapper.html":{"url":"classes/UserDataStructureMapper.html","title":"class - UserDataStructureMapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDataStructureMapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/databases/mappers/user-mapper.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                fromDomainToPersistance\n                            \n                            \n                                    Static\n                                fromPersistanceToDomain\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromDomainToPersistance\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromDomainToPersistance(user: DomainUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/mappers/user-mapper.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            DomainUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Prisma.UserUncheckedCreateInput\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromPersistanceToDomain\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromPersistanceToDomain(raw: PrismaUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/databases/mappers/user-mapper.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                raw\n                                            \n                                                        PrismaUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DomainUser\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UniqueEntityID } from '@/core/entities/unique-entity-id';\nimport { UserEntity as DomainUser } from '@/domain/user/entities/user-entity';\nimport { Prisma, User as PrismaUser } from '@prisma/client';\n\nexport class UserDataStructureMapper {\n  static fromPersistanceToDomain(raw: PrismaUser): DomainUser {\n    return DomainUser.create(\n      {\n        name: raw.name,\n        email: raw.email,\n        password: raw.password,\n        isActive: raw.isActive,\n        roles: raw.roles,\n        createdAt: raw.createdAt,\n        updatedAt: raw.updatedAt,\n      },\n      new UniqueEntityID(raw.id),\n    );\n  }\n\n  static fromDomainToPersistance(\n    user: DomainUser,\n  ): Prisma.UserUncheckedCreateInput {\n    return {\n      id: user.id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      isActive: user.isActive,\n      roles: user.roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/entities/user-entity.ts\n        \n\n\n            \n                Description\n            \n            \n                The UserEntity class is an aggregate root that\nrepresents a user entity. It extends the AggregateRoot\nclass and has a UserProps interface that defines the properties of a user entity.\n\n            \n\n            \n                Extends\n            \n            \n                            AggregateRoot\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _domainEvents\n                            \n                            \n                                    Private\n                                _id\n                            \n                            \n                                    Protected\n                                props\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                            \n                                    Protected\n                                addDomainEvent\n                            \n                            \n                                    Public\n                                clearEvents\n                            \n                            \n                                    Public\n                                equals\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                                \n                                    email\n                                \n                                \n                                    password\n                                \n                                \n                                    isActive\n                                \n                                \n                                    roles\n                                \n                                \n                                    createdAt\n                                \n                                \n                                    updatedAt\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _domainEvents\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DomainEvent[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         AggregateRoot\n\n                            \n                        \n                    \n                        \n                                Defined in         AggregateRoot:6\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UniqueEntityID\n\n                    \n                \n                        \n                            \n                                Inherited from         Entity\n\n                            \n                        \n                    \n                        \n                                Defined in         Entity:4\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        props\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Props\n\n                    \n                \n                        \n                            \n                                Inherited from         Entity\n\n                            \n                        \n                    \n                        \n                                Defined in         Entity:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(props: Optional, id?: UniqueEntityID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/domain/user/entities/user-entity.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            Optional\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            UniqueEntityID\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserEntity\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        addDomainEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    addDomainEvent(domainEvent: DomainEvent)\n                \n            \n\n\n                    \n                        \n                            Inherited from         AggregateRoot\n\n                        \n                    \n                    \n                        \n                                Defined in         AggregateRoot:12\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                domainEvent\n                                            \n                                                            DomainEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearEvents()\n                \n            \n\n\n                    \n                        \n                            Inherited from         AggregateRoot\n\n                        \n                    \n                    \n                        \n                                Defined in         AggregateRoot:17\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        equals\n                        \n                    \n                \n            \n            \n                \n                        \n                    equals(entity: Entity)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Entity\n\n                        \n                    \n                    \n                        \n                                Defined in         Entity:16\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            Entity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/user/entities/user-entity.ts:22\n                                \n                            \n\n                \n                    \n                        setname(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/domain/user/entities/user-entity.ts:25\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        email\n                    \n                \n\n                \n                    \n                        getemail()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/user/entities/user-entity.ts:29\n                                \n                            \n\n                \n                    \n                        setemail(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/domain/user/entities/user-entity.ts:32\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        password\n                    \n                \n\n                \n                    \n                        getpassword()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/user/entities/user-entity.ts:36\n                                \n                            \n\n                \n                    \n                        setpassword(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/domain/user/entities/user-entity.ts:39\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        isActive\n                    \n                \n\n                \n                    \n                        getisActive()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/user/entities/user-entity.ts:43\n                                \n                            \n\n                \n                    \n                        setisActive(value: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/domain/user/entities/user-entity.ts:46\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        roles\n                    \n                \n\n                \n                    \n                        getroles()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/user/entities/user-entity.ts:50\n                                \n                            \n\n                \n                    \n                        setroles(value: string[])\n                    \n                \n                            \n                                \n                                    Defined in src/domain/user/entities/user-entity.ts:53\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                        string[]\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        createdAt\n                    \n                \n\n                \n                    \n                        getcreatedAt()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/user/entities/user-entity.ts:57\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        updatedAt\n                    \n                \n\n                \n                    \n                        getupdatedAt()\n                    \n                \n                            \n                                \n                                    Defined in src/domain/user/entities/user-entity.ts:60\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AggregateRoot } from '@/core/entities/aggregate-root';\nimport { UniqueEntityID } from '@/core/entities/unique-entity-id';\nimport { Optional } from '@prisma/client/runtime/library';\n\nexport interface UserProps {\n  name: string;\n  email: string;\n  password: string;\n  isActive: boolean;\n  roles: string[];\n  createdAt: Date;\n  updatedAt?: Date | null;\n}\n\n/**\n * The UserEntity class is an aggregate root that\n * represents a user entity. It extends the AggregateRoot\n * class and has a UserProps interface that defines the properties of a user entity.\n */\n\nexport class UserEntity extends AggregateRoot {\n  get name(): string {\n    return this.props.name;\n  }\n  set name(value: string) {\n    this.props.name = value;\n  }\n\n  get email(): string {\n    return this.props.email;\n  }\n  set email(value: string) {\n    this.props.email = value;\n  }\n\n  get password(): string {\n    return this.props.password;\n  }\n  set password(value: string) {\n    this.props.password = value;\n  }\n\n  get isActive(): boolean {\n    return this.props.isActive;\n  }\n  set isActive(value: boolean) {\n    this.props.isActive = value;\n  }\n\n  get roles(): string[] {\n    return this.props.roles;\n  }\n  set roles(value: string[]) {\n    this.props.roles = value;\n  }\n\n  get createdAt() {\n    return this.props.createdAt;\n  }\n  get updatedAt() {\n    return this.props.updatedAt;\n  }\n\n  static create(\n    props: Optional,\n    id?: UniqueEntityID,\n  ) {\n    const user = new UserEntity(\n      {\n        ...props,\n        createdAt: props.createdAt ?? new Date(),\n        updatedAt: props.updatedAt ?? null,\n      },\n      id,\n    );\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\n\n\nCreateUserConcreteRepository\n\nCreateUserConcreteRepository\n\nUserModule -->\n\nCreateUserConcreteRepository->UserModule\n\n\n\n\n\nCreateUserUseCase\n\nCreateUserUseCase\n\nUserModule -->\n\nCreateUserUseCase->UserModule\n\n\n\n\n\nDeleteUserUseCase\n\nDeleteUserUseCase\n\nUserModule -->\n\nDeleteUserUseCase->UserModule\n\n\n\n\n\nListAllUsersUseCase\n\nListAllUsersUseCase\n\nUserModule -->\n\nListAllUsersUseCase->UserModule\n\n\n\n\n\nListUserByEmailUseCase\n\nListUserByEmailUseCase\n\nUserModule -->\n\nListUserByEmailUseCase->UserModule\n\n\n\n\n\nListUserByIdUseCase\n\nListUserByIdUseCase\n\nUserModule -->\n\nListUserByIdUseCase->UserModule\n\n\n\n\n\nListUserConcreteRepository\n\nListUserConcreteRepository\n\nUserModule -->\n\nListUserConcreteRepository->UserModule\n\n\n\n\n\nUpdateAndDeleteConcreteRepository\n\nUpdateAndDeleteConcreteRepository\n\nUserModule -->\n\nUpdateAndDeleteConcreteRepository->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/http/controllers/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserConcreteRepository\n                        \n                        \n                            CreateUserUseCase\n                        \n                        \n                            DeleteUserUseCase\n                        \n                        \n                            ListAllUsersUseCase\n                        \n                        \n                            ListUserByEmailUseCase\n                        \n                        \n                            ListUserByIdUseCase\n                        \n                        \n                            ListUserConcreteRepository\n                        \n                        \n                            UpdateAndDeleteConcreteRepository\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CreateUserController\n                        \n                        \n                            ListAllUsersController\n                        \n                        \n                            ListUserByEmailController\n                        \n                        \n                            ListUserByIdController\n                        \n                        \n                            DeleteUserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CreateUserAbstractRepository } from '@/domain/user/contracts/create-user-abstract-repository';\nimport { ListUserAbstractRepository } from '@/domain/user/contracts/list-user-abstract-repository';\nimport { CreateUserUseCase } from '@/domain/user/use-cases/create-user-use-case';\nimport { DatabaseModule } from '@/infra/databases/prisma/database.module';\nimport { CreateUserConcreteRepository } from '@/infra/databases/repositories/user/create-user-concrete-repository';\nimport { ListUserConcreteRepository } from '@/infra/databases/repositories/user/list-users-concrete-repository';\nimport { Module } from '@nestjs/common';\nimport { CreateUserController } from './actions/crete-user-controller';\nimport { UpdateAndDeleteConcreteRepository } from '@/infra/databases/repositories/patient/updated-and-delete-concrete-repository';\nimport { ListAllUsersController } from './actions/list-all-users-controller';\nimport { ListAllUsersUseCase } from '@/domain/user/use-cases/list-all-users-use-case';\nimport { DeleteUserUseCase } from '@/domain/user/use-cases/delete-user-use-case';\nimport { DeleteUserController } from './actions/delete-user-by-id-controller';\nimport { UpdateAndDeleteUserAbstractRepository } from '@/domain/user/contracts/update-and-delete-user-abstract-repository';\nimport { UpdateAndDeleteUserConcreteRepository } from '@/infra/databases/repositories/user/updated-and-delete-user-concrete-repository';\nimport { ListUserByEmailController } from './actions/list-user-by-email-controller';\nimport { ListUserByIdController } from './actions/list-user-by-id-controller';\nimport { ListUserByEmailUseCase } from '@/domain/user/use-cases/list-users-by-email-use-case';\nimport { ListUserByIdUseCase } from '@/domain/user/use-cases/list-users-by-id-use-case';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [\n    CreateUserController,\n    ListAllUsersController,\n    ListUserByEmailController,\n    ListUserByIdController,\n    DeleteUserController,\n  ],\n  providers: [\n    CreateUserUseCase,\n    CreateUserConcreteRepository,\n    {\n      provide: CreateUserAbstractRepository,\n      useClass: CreateUserConcreteRepository,\n    },\n    ListAllUsersUseCase,\n    ListUserByEmailUseCase,\n    ListUserByIdUseCase,\n    ListUserConcreteRepository,\n    {\n      provide: ListUserAbstractRepository,\n      useClass: ListUserConcreteRepository,\n    },\n    DeleteUserUseCase,\n    UpdateAndDeleteConcreteRepository,\n    {\n      provide: UpdateAndDeleteUserAbstractRepository,\n      useClass: UpdateAndDeleteUserConcreteRepository,\n    },\n  ],\n  exports: [],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPresenter.html":{"url":"classes/UserPresenter.html","title":"class - UserPresenter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPresenter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/http/controllers/user/presenter/user-data-presenter.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                toHttp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        toHttp\n                        \n                    \n                \n            \n            \n                \n                        \n                    toHttp(user: UserEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/http/controllers/user/presenter/user-data-presenter.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: any; name: any; email: any; isActive: any; roles: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserEntity } from '@/domain/user/entities/user-entity';\n\nexport class UserPresenter {\n  static toHttp(user: UserEntity) {\n    return {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      isActive: user.isActive,\n      roles: user.roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserProps.html":{"url":"interfaces/UserProps.html","title":"interface - UserProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/entities/user-entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:     Date | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AggregateRoot } from '@/core/entities/aggregate-root';\nimport { UniqueEntityID } from '@/core/entities/unique-entity-id';\nimport { Optional } from '@prisma/client/runtime/library';\n\nexport interface UserProps {\n  name: string;\n  email: string;\n  password: string;\n  isActive: boolean;\n  roles: string[];\n  createdAt: Date;\n  updatedAt?: Date | null;\n}\n\n/**\n * The UserEntity class is an aggregate root that\n * represents a user entity. It extends the AggregateRoot\n * class and has a UserProps interface that defines the properties of a user entity.\n */\n\nexport class UserEntity extends AggregateRoot {\n  get name(): string {\n    return this.props.name;\n  }\n  set name(value: string) {\n    this.props.name = value;\n  }\n\n  get email(): string {\n    return this.props.email;\n  }\n  set email(value: string) {\n    this.props.email = value;\n  }\n\n  get password(): string {\n    return this.props.password;\n  }\n  set password(value: string) {\n    this.props.password = value;\n  }\n\n  get isActive(): boolean {\n    return this.props.isActive;\n  }\n  set isActive(value: boolean) {\n    this.props.isActive = value;\n  }\n\n  get roles(): string[] {\n    return this.props.roles;\n  }\n  set roles(value: string[]) {\n    this.props.roles = value;\n  }\n\n  get createdAt() {\n    return this.props.createdAt;\n  }\n  get updatedAt() {\n    return this.props.updatedAt;\n  }\n\n  static create(\n    props: Optional,\n    id?: UniqueEntityID,\n  ) {\n    const user = new UserEntity(\n      {\n        ...props,\n        createdAt: props.createdAt ?? new Date(),\n        updatedAt: props.updatedAt ?? null,\n      },\n      id,\n    );\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersNotFound.html":{"url":"classes/UsersNotFound.html","title":"class - UsersNotFound","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersNotFound\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/user/use-cases/error-messages/user-not-found-error-message.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n            \n                Implements\n            \n            \n                            UseCaseError\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/domain/user/use-cases/error-messages/user-not-found-error-message.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UseCaseError } from '@/core/errors/shared-global/use-cases-errors/use-case-error';\n\nexport class UsersNotFound extends Error implements UseCaseError {\n  constructor() {\n    super(\n      `We can't find any patient registered in database. Please, try again later.`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZodPipeValidator.html":{"url":"classes/ZodPipeValidator.html","title":"class - ZodPipeValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZodPipeValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/utils/pipes/zod-pipe-validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        PipeTransform\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(zodSchema: ZodSchema)\n                    \n                \n                        \n                            \n                                Defined in src/infra/utils/pipes/zod-pipe-validator.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        zodSchema\n                                                  \n                                                        \n                                                                    ZodSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infra/utils/pipes/zod-pipe-validator.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  PipeTransform,\n} from '@nestjs/common';\nimport { ZodError, ZodSchema } from 'zod';\nimport { fromZodError } from 'zod-validation-error';\n\nexport class ZodPipeValidator implements PipeTransform {\n  constructor(private zodSchema: ZodSchema) {}\n\n  transform(value: any, metadata: ArgumentMetadata) {\n    try {\n      if (metadata.type === 'custom') return value;\n\n      const parsedValue = this.zodSchema.parse(value);\n      return parsedValue;\n    } catch (error) {\n      if (error instanceof ZodError)\n        throw new BadRequestException({\n          message: 'Validation failed',\n          statusCode: 400,\n          errors: fromZodError(error),\n        });\n      throw new BadRequestException('Validation Failed');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/core/configs/env.ts\n            \n            variable\n            envSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/either.ts\n            \n            class\n            Left\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/either.ts\n            \n            class\n            Right\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/either.ts\n            \n            variable\n            left\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/either.ts\n            \n            variable\n            right\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/entities/aggregate-root.ts\n            \n            class\n            AggregateRoot\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/entities/entity.ts\n            \n            class\n            Entity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/entities/unique-entity-id.ts\n            \n            class\n            UniqueEntityID\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/errors/shared-global/global-resources-errors/not-allowed-error.ts\n            \n            class\n            NotAllowedError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/errors/shared-global/global-resources-errors/resource-not-found-error.ts\n            \n            class\n            ResourceNotFoundError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/errors/shared-global/use-cases-errors/use-case-error.ts\n            \n            interface\n            UseCaseError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/events/domain-event.ts\n            \n            interface\n            DomainEvent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/events/domain-events.ts\n            \n            class\n            DomainEvents\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/core/events/event-handler.ts\n            \n            interface\n            EventHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/repositories/pagination/pagination-params.ts\n            \n            interface\n            PaginationParams\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/domain/patient/contracts/create-patient-abstract-repository.ts\n            \n            class\n            CreatePatientAbstractRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/patient/contracts/list-patient-abstract-repository.ts\n            \n            class\n            ListPatientAbstractRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/domain/patient/contracts/update-and-delete-abstract-repository.ts\n            \n            class\n            UpdateAndDeleteAbstractRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/patient/entities/patient-entity.ts\n            \n            class\n            PatientEntity\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/domain/patient/entities/patient-entity.ts\n            \n            interface\n            PatientProps\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/domain/patient/entities/update-patient-entity.ts\n            \n            interface\n            UpdatePatientEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/domain/patient/use-cases/create-patient-use-case.ts\n            \n            injectable\n            CreatePatientUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/patient/use-cases/create-patient-use-case.ts\n            \n            interface\n            CreatePatientUseCaseRequest\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/domain/patient/use-cases/delete-patient-use-case.ts\n            \n            injectable\n            DeletePatientUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/patient/use-cases/error-messages/patient-already-exists-error-message.ts\n            \n            class\n            PatientAlreadyExistsError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/domain/patient/use-cases/error-messages/patients-not-found-error-message.ts\n            \n            class\n            PatientsNotFound\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/domain/patient/use-cases/list-all-patients-use-case.ts\n            \n            injectable\n            ListAllPatientsUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/patient/use-cases/list-patients-by-email-use-case.ts\n            \n            injectable\n            ListPatientByEmailUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/patient/use-cases/list-patients-by-id-use-case.ts\n            \n            injectable\n            ListPatientByIdUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/patient/use-cases/updated-patient-use-case.ts\n            \n            injectable\n            UpdatePatientUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/patient/use-cases/updated-patient-use-case.ts\n            \n            interface\n            UpdatePatientUseCaseRequest\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/domain/user/contracts/create-user-abstract-repository.ts\n            \n            class\n            CreateUserAbstractRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/domain/user/contracts/list-user-abstract-repository.ts\n            \n            class\n            ListUserAbstractRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/domain/user/contracts/update-and-delete-user-abstract-repository.ts\n            \n            class\n            UpdateAndDeleteUserAbstractRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/user/entities/update-user-entity.ts\n            \n            interface\n            UpdateUserEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/domain/user/entities/user-entity.ts\n            \n            class\n            UserEntity\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/domain/user/entities/user-entity.ts\n            \n            interface\n            UserProps\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/domain/user/use-cases/create-user-use-case.ts\n            \n            injectable\n            CreateUserUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/user/use-cases/create-user-use-case.ts\n            \n            interface\n            CreateUserUseCaseRequest\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/domain/user/use-cases/delete-user-use-case.ts\n            \n            injectable\n            DeleteUserUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/user/use-cases/error-messages/user-already-exists-error-message.ts\n            \n            class\n            UserAlreadyExistsError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/domain/user/use-cases/error-messages/user-not-found-error-message.ts\n            \n            class\n            UsersNotFound\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/domain/user/use-cases/list-all-users-use-case.ts\n            \n            injectable\n            ListAllUsersUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/user/use-cases/list-users-by-email-use-case.ts\n            \n            injectable\n            ListUserByEmailUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/user/use-cases/list-users-by-id-use-case.ts\n            \n            injectable\n            ListUserByIdUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infra/databases/mappers/patient-mapper.ts\n            \n            class\n            PatientDataStructureMapper\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infra/databases/mappers/user-mapper.ts\n            \n            class\n            UserDataStructureMapper\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infra/databases/prisma/service/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infra/databases/repositories/patient/create-patient-concrete-repository.ts\n            \n            injectable\n            CreatePatientConcreteRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infra/databases/repositories/patient/list-patients-concrete-repository.ts\n            \n            injectable\n            ListPatientsConcreteRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infra/databases/repositories/patient/updated-and-delete-concrete-repository.ts\n            \n            injectable\n            UpdateAndDeleteConcreteRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infra/databases/repositories/user/create-user-concrete-repository.ts\n            \n            injectable\n            CreateUserConcreteRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infra/databases/repositories/user/list-users-concrete-repository.ts\n            \n            injectable\n            ListUserConcreteRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infra/databases/repositories/user/updated-and-delete-user-concrete-repository.ts\n            \n            injectable\n            UpdateAndDeleteUserConcreteRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infra/frameworks/nest/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/patient/actions/create-patient-controller.ts\n            \n            controller\n            CreatePatientController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/patient/actions/create-patient-controller.ts\n            \n            variable\n            createPatientBodySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/patient/actions/delete-patient-by-id-controller.ts\n            \n            controller\n            DeletePatientController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/patient/actions/delete-patient-by-id-controller.ts\n            \n            variable\n            patientParamSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/patient/actions/list-all-patient-controller.ts\n            \n            controller\n            ListAllPatientsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/patient/actions/list-patient-by-email-controller.ts\n            \n            controller\n            ListPatientByEmailController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/patient/actions/list-patient-by-email-controller.ts\n            \n            variable\n            createPatientBodySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/patient/actions/list-patient-by-id-controller.ts\n            \n            controller\n            ListPatientByIdController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/patient/actions/list-patient-by-id-controller.ts\n            \n            variable\n            patientParamSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/patient/actions/update-patient-controller.ts\n            \n            controller\n            UpdatePatientController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/patient/actions/update-patient-controller.ts\n            \n            variable\n            updatePatientBodySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/patient/presenter/patient-data-presenter.ts\n            \n            class\n            PatientPresenter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/user/actions/crete-user-controller.ts\n            \n            controller\n            CreateUserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/user/actions/crete-user-controller.ts\n            \n            variable\n            createUserBodySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/user/actions/delete-user-by-id-controller.ts\n            \n            controller\n            DeleteUserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/user/actions/delete-user-by-id-controller.ts\n            \n            variable\n            deleteUserParamSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/user/actions/list-all-users-controller.ts\n            \n            controller\n            ListAllUsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/user/actions/list-user-by-email-controller.ts\n            \n            controller\n            ListUserByEmailController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/user/actions/list-user-by-email-controller.ts\n            \n            variable\n            listUserByEmailBodySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/user/actions/list-user-by-id-controller.ts\n            \n            controller\n            ListUserByIdController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/user/actions/list-user-by-id-controller.ts\n            \n            variable\n            listUserByIdParamSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/http/controllers/user/presenter/user-data-presenter.ts\n            \n            class\n            UserPresenter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/utils/pipes/zod-pipe-validator.ts\n            \n            class\n            ZodPipeValidator\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.3.8\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.8\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.3.8\n        \n            @prisma/client : ^5.15.0\n        \n            @types/passport-jwt : ^4.0.1\n        \n            bcryptjs : ^2.4.3\n        \n            date-fns : ^3.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            zod : ^3.23.8\n        \n            zod-validation-error : ^3.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infra/frameworks/nest/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n\n\n\nDescription\nHealth Manager API is an API to integrate front end with backend (database).\nEnvironment Requirements\nBasic Instructions to run:\nExample :$ pnpm installRunning the app\nExample :# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodTest\nExample :# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HttpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PatientModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_HttpModule\n\n\n\ncluster_HttpModule_imports\n\n\n\ncluster_PatientModule\n\n\n\ncluster_PatientModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHttpModule\n\nHttpModule\n\nAppModule -->\n\nHttpModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nHttpModule -->\n\nDatabaseModule->HttpModule\n\n\n\nPrismaService  -->\n\nDatabaseModule->PrismaService \n\n\n\n\n\nPatientModule\n\nPatientModule\n\nPatientModule -->\n\nDatabaseModule->PatientModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDatabaseModule -->\n\nPrismaService->DatabaseModule\n\n\n\nHttpModule -->\n\nPatientModule->HttpModule\n\n\n\nHttpModule -->\n\nUserModule->HttpModule\n\n\n\n\n\nCreatePatientConcreteRepository\n\nCreatePatientConcreteRepository\n\nPatientModule -->\n\nCreatePatientConcreteRepository->PatientModule\n\n\n\n\n\nCreatePatientUseCase\n\nCreatePatientUseCase\n\nPatientModule -->\n\nCreatePatientUseCase->PatientModule\n\n\n\n\n\nDeletePatientUseCase\n\nDeletePatientUseCase\n\nPatientModule -->\n\nDeletePatientUseCase->PatientModule\n\n\n\n\n\nListAllPatientsUseCase\n\nListAllPatientsUseCase\n\nPatientModule -->\n\nListAllPatientsUseCase->PatientModule\n\n\n\n\n\nListPatientByEmailUseCase\n\nListPatientByEmailUseCase\n\nPatientModule -->\n\nListPatientByEmailUseCase->PatientModule\n\n\n\n\n\nListPatientByIdUseCase\n\nListPatientByIdUseCase\n\nPatientModule -->\n\nListPatientByIdUseCase->PatientModule\n\n\n\n\n\nListPatientsConcreteRepository\n\nListPatientsConcreteRepository\n\nPatientModule -->\n\nListPatientsConcreteRepository->PatientModule\n\n\n\n\n\nUpdateAndDeleteConcreteRepository\n\nUpdateAndDeleteConcreteRepository\n\nPatientModule -->\n\nUpdateAndDeleteConcreteRepository->PatientModule\n\n\n\nUserModule -->\n\nUpdateAndDeleteConcreteRepository->UserModule\n\n\n\n\n\nUpdatePatientUseCase\n\nUpdatePatientUseCase\n\nPatientModule -->\n\nUpdatePatientUseCase->PatientModule\n\n\n\n\n\nCreateUserConcreteRepository\n\nCreateUserConcreteRepository\n\nUserModule -->\n\nCreateUserConcreteRepository->UserModule\n\n\n\n\n\nCreateUserUseCase\n\nCreateUserUseCase\n\nUserModule -->\n\nCreateUserUseCase->UserModule\n\n\n\n\n\nDeleteUserUseCase\n\nDeleteUserUseCase\n\nUserModule -->\n\nDeleteUserUseCase->UserModule\n\n\n\n\n\nListAllUsersUseCase\n\nListAllUsersUseCase\n\nUserModule -->\n\nListAllUsersUseCase->UserModule\n\n\n\n\n\nListUserByEmailUseCase\n\nListUserByEmailUseCase\n\nUserModule -->\n\nListUserByEmailUseCase->UserModule\n\n\n\n\n\nListUserByIdUseCase\n\nListUserByIdUseCase\n\nUserModule -->\n\nListUserByIdUseCase->UserModule\n\n\n\n\n\nListUserConcreteRepository\n\nListUserConcreteRepository\n\nUserModule -->\n\nListUserConcreteRepository->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    18 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    25 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CreatePatientBodySchema   (src/.../create-patient-controller.ts)\n                        \n                        \n                            CreatePatientBodySchema   (src/.../list-patient-by-email-controller.ts)\n                        \n                        \n                            createPatientUseCaseResponse   (src/.../create-patient-use-case.ts)\n                        \n                        \n                            createPatientUseCaseResponse   (src/.../list-all-patients-use-case.ts)\n                        \n                        \n                            createPatientUseCaseResponse   (src/.../list-patients-by-email-use-case.ts)\n                        \n                        \n                            createPatientUseCaseResponse   (src/.../list-patients-by-id-use-case.ts)\n                        \n                        \n                            CreateUserBodySchema   (src/.../crete-user-controller.ts)\n                        \n                        \n                            createUserUseCaseResponse   (src/.../create-user-use-case.ts)\n                        \n                        \n                            deletePatientUseCaseResponse   (src/.../delete-patient-use-case.ts)\n                        \n                        \n                            DeleteUserParamSchema   (src/.../delete-user-by-id-controller.ts)\n                        \n                        \n                            deleteUserUseCaseResponse   (src/.../delete-user-use-case.ts)\n                        \n                        \n                            DomainEventCallback   (src/.../domain-events.ts)\n                        \n                        \n                            Either   (src/.../either.ts)\n                        \n                        \n                            Env   (src/.../env.ts)\n                        \n                        \n                            ListUserByEmailBodySchema   (src/.../list-user-by-email-controller.ts)\n                        \n                        \n                            ListUserByIdParamSchema   (src/.../list-user-by-id-controller.ts)\n                        \n                        \n                            listUsersUseCaseResponse   (src/.../list-all-users-use-case.ts)\n                        \n                        \n                            listUserUseCaseResponse   (src/.../list-users-by-email-use-case.ts)\n                        \n                        \n                            listUserUseCaseResponse   (src/.../list-users-by-id-use-case.ts)\n                        \n                        \n                            Optional   (src/.../optional.ts)\n                        \n                        \n                            PatientParamSchema   (src/.../delete-patient-by-id-controller.ts)\n                        \n                        \n                            PatientParamSchema   (src/.../list-patient-by-id-controller.ts)\n                        \n                        \n                            updatedPatientUseCaseResponse   (src/.../updated-patient-use-case.ts)\n                        \n                        \n                            UpdatePatientBodySchema   (src/.../update-patient-controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infra/http/controllers/patient/actions/create-patient-controller.ts\n    \n    \n        \n            \n                \n                    \n                    CreatePatientBodySchema\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/infra/http/controllers/patient/actions/list-patient-by-email-controller.ts\n    \n    \n        \n            \n                \n                    \n                    CreatePatientBodySchema\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/domain/patient/use-cases/create-patient-use-case.ts\n    \n    \n        \n            \n                \n                    \n                    createPatientUseCaseResponse\n                \n            \n            \n                \n                            Either\n\n                \n            \n        \n    \n    src/domain/patient/use-cases/list-all-patients-use-case.ts\n    \n    \n        \n            \n                \n                    \n                    createPatientUseCaseResponse\n                \n            \n            \n                \n                            Either\n\n                \n            \n        \n    \n    src/domain/patient/use-cases/list-patients-by-email-use-case.ts\n    \n    \n        \n            \n                \n                    \n                    createPatientUseCaseResponse\n                \n            \n            \n                \n                            Either\n\n                \n            \n        \n    \n    src/domain/patient/use-cases/list-patients-by-id-use-case.ts\n    \n    \n        \n            \n                \n                    \n                    createPatientUseCaseResponse\n                \n            \n            \n                \n                            Either\n\n                \n            \n        \n    \n    src/infra/http/controllers/user/actions/crete-user-controller.ts\n    \n    \n        \n            \n                \n                    \n                    CreateUserBodySchema\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/domain/user/use-cases/create-user-use-case.ts\n    \n    \n        \n            \n                \n                    \n                    createUserUseCaseResponse\n                \n            \n            \n                \n                            Either\n\n                \n            \n        \n    \n    src/domain/patient/use-cases/delete-patient-use-case.ts\n    \n    \n        \n            \n                \n                    \n                    deletePatientUseCaseResponse\n                \n            \n            \n                \n                            Either\n\n                \n            \n        \n    \n    src/infra/http/controllers/user/actions/delete-user-by-id-controller.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteUserParamSchema\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/domain/user/use-cases/delete-user-use-case.ts\n    \n    \n        \n            \n                \n                    \n                    deleteUserUseCaseResponse\n                \n            \n            \n                \n                            Either\n\n                \n            \n        \n    \n    src/core/events/domain-events.ts\n    \n    \n        \n            \n                \n                    \n                    DomainEventCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/core/either.ts\n    \n    \n        \n            \n                \n                    \n                    Either\n                \n            \n            \n                \n                        Left | Right\n\n                \n            \n        \n    \n    src/core/configs/env.ts\n    \n    \n        \n            \n                \n                    \n                    Env\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/infra/http/controllers/user/actions/list-user-by-email-controller.ts\n    \n    \n        \n            \n                \n                    \n                    ListUserByEmailBodySchema\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/infra/http/controllers/user/actions/list-user-by-id-controller.ts\n    \n    \n        \n            \n                \n                    \n                    ListUserByIdParamSchema\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/domain/user/use-cases/list-all-users-use-case.ts\n    \n    \n        \n            \n                \n                    \n                    listUsersUseCaseResponse\n                \n            \n            \n                \n                            Either\n\n                \n            \n        \n    \n    src/domain/user/use-cases/list-users-by-email-use-case.ts\n    \n    \n        \n            \n                \n                    \n                    listUserUseCaseResponse\n                \n            \n            \n                \n                            Either\n\n                \n            \n        \n    \n    src/domain/user/use-cases/list-users-by-id-use-case.ts\n    \n    \n        \n            \n                \n                    \n                    listUserUseCaseResponse\n                \n            \n            \n                \n                            Either\n\n                \n            \n        \n    \n    src/core/types/optional.ts\n    \n    \n        \n            \n                \n                    \n                    Optional\n                \n            \n            \n                \n                    Make some property optional on type\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/infra/http/controllers/patient/actions/delete-patient-by-id-controller.ts\n    \n    \n        \n            \n                \n                    \n                    PatientParamSchema\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/infra/http/controllers/patient/actions/list-patient-by-id-controller.ts\n    \n    \n        \n            \n                \n                    \n                    PatientParamSchema\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/domain/patient/use-cases/updated-patient-use-case.ts\n    \n    \n        \n            \n                \n                    \n                    updatedPatientUseCaseResponse\n                \n            \n            \n                \n                            Either\n\n                \n            \n        \n    \n    src/infra/http/controllers/patient/actions/update-patient-controller.ts\n    \n    \n        \n            \n                \n                    \n                    UpdatePatientBodySchema\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            createPatientBodySchema   (src/.../create-patient-controller.ts)\n                        \n                        \n                            createPatientBodySchema   (src/.../list-patient-by-email-controller.ts)\n                        \n                        \n                            createUserBodySchema   (src/.../crete-user-controller.ts)\n                        \n                        \n                            deleteUserParamSchema   (src/.../delete-user-by-id-controller.ts)\n                        \n                        \n                            envSchema   (src/.../env.ts)\n                        \n                        \n                            left   (src/.../either.ts)\n                        \n                        \n                            listUserByEmailBodySchema   (src/.../list-user-by-email-controller.ts)\n                        \n                        \n                            listUserByIdParamSchema   (src/.../list-user-by-id-controller.ts)\n                        \n                        \n                            patientParamSchema   (src/.../delete-patient-by-id-controller.ts)\n                        \n                        \n                            patientParamSchema   (src/.../list-patient-by-id-controller.ts)\n                        \n                        \n                            right   (src/.../either.ts)\n                        \n                        \n                            updatePatientBodySchema   (src/.../update-patient-controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infra/http/controllers/patient/actions/create-patient-controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createPatientBodySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  name: z.string(),\n  email: z.string().email(),\n  phone: z.string(),\n  isActive: z.boolean(),\n})\n                    \n                \n\n\n        \n    \n\n    src/infra/http/controllers/patient/actions/list-patient-by-email-controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createPatientBodySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  email: z.string().email(),\n})\n                    \n                \n\n\n        \n    \n\n    src/infra/http/controllers/user/actions/crete-user-controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createUserBodySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  name: z.string(),\n  email: z.string().email(),\n  password: z.string(),\n  roles: z.array(z.string()),\n})\n                    \n                \n\n\n        \n    \n\n    src/infra/http/controllers/user/actions/delete-user-by-id-controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deleteUserParamSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  id: z.string().uuid() || z.string().cuid(),\n})\n                    \n                \n\n\n        \n    \n\n    src/core/configs/env.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        envSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  DATABASE_URL: z.string().url(),\n  PORT: z.string(),\n  JWT_SECRET: z.string(),\n  JWT_EXPIRES_IN: z.string().default('1d'),\n  PRIVATE_KEY: z.string(),\n  PUBLIC_KEY: z.string(),\n})\n                    \n                \n\n\n        \n    \n\n    src/core/either.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        left\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: L): Either => {\n  return new Left(value);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        right\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: R): Either => {\n  return new Right(value);\n}\n                    \n                \n\n\n        \n    \n\n    src/infra/http/controllers/user/actions/list-user-by-email-controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        listUserByEmailBodySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  email: z.string().email(),\n})\n                    \n                \n\n\n        \n    \n\n    src/infra/http/controllers/user/actions/list-user-by-id-controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        listUserByIdParamSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  id: z.string().uuid() || z.string().cuid(),\n})\n                    \n                \n\n\n        \n    \n\n    src/infra/http/controllers/patient/actions/delete-patient-by-id-controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        patientParamSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  id: z.string().uuid(),\n})\n                    \n                \n\n\n        \n    \n\n    src/infra/http/controllers/patient/actions/list-patient-by-id-controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        patientParamSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  id: z.string().uuid(),\n})\n                    \n                \n\n\n        \n    \n\n    src/infra/http/controllers/patient/actions/update-patient-controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        updatePatientBodySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  id: z.string().uuid(),\n  name: z.string(),\n  email: z.string().email(),\n  phone: z.string(),\n  isActive: z.boolean(),\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
